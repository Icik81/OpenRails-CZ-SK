// COPYRIGHT 2009, 2010, 2011, 2012, 2013 by the Open Rails project.
// 
// This file is part of Open Rails.
// 
// Open Rails is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Open Rails is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.

/* LOCOMOTIVE CLASSES
 * 
 * Used as a base for Steam, Diesel and Electric locomotive classes.
 * 
 * A locomotive is represented by two classes:
 *  MSTSLocomotive - defines the behaviour, ie physics, motion, power generated etc
 *  MSTSLocomotiveViewer - defines the appearance in a 3D viewer including animation for wipers etc
 *  
 * Both these classes derive from corresponding classes for a basic TrainCar
 *  TrainCar - provides for movement, rolling friction, etc
 *  TrainCarViewer - provides basic animation for running gear, wipers, etc
 *  
 * Locomotives can either be controlled by a player, 
 * or controlled by the train's MU signals for brake and throttle etc.
 * The player controlled loco generates the MU signals which pass along to every
 * unit in the train.
 * For AI trains, the AI software directly generates the MU signals - there is no
 * player controlled train.
 * 
 * The end result of the physics calculations for the the locomotive is
 * a TractiveForce and a FrictionForce ( generated by the TrainCar class )
 * 
 */

//#define ALLOW_ORTS_SPECIFIC_ENG_PARAMETERS

// Debug for Advanced Adhesion Model
//#define DEBUG_ADHESION

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Orts.Common;
using Orts.Formats.Msts;
using Orts.MultiPlayer;
using Orts.Parsers.Msts;
using Orts.Simulation.Physics;
using Orts.Simulation.RollingStocks.SubSystems;
using Orts.Simulation.RollingStocks.SubSystems.Brakes;
using Orts.Simulation.RollingStocks.SubSystems.Brakes.MSTS;
using Orts.Simulation.RollingStocks.SubSystems.Controllers;
using Orts.Simulation.RollingStocks.SubSystems.PowerSupplies;
using Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions;
using ORTS.Common;
using ORTS.Scripting.Api;
using System;
using System.Collections.Generic;
using System.Device.Location;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Xml;
using Event = Orts.Common.Event;

namespace Orts.Simulation.RollingStocks
{

    ///////////////////////////////////////////////////
    ///   SIMULATION BEHAVIOUR
    ///////////////////////////////////////////////////

    public enum CabViewType
    {
        Front = 0,
        Rear = 1,
        Void = 2
    }

    /// <summary>
    /// Adds Throttle, Direction, Horn, Sander and Wiper control
    /// to the basic TrainCar.
    /// Use as a base for Electric, Diesel or Steam locomotives.
    /// </summary>
    public partial class MSTSLocomotive : MSTSWagon
    {

        public enum CombinedControl
        {
            None,
            ThrottleDynamic,
            ThrottleAir,
            ThrottleDynamicAir,
            DynamicAir,
        }

        public enum SoundState
        {
            Stopped,
            Sound,
            ContinuousSound
        }

        // simulation parameters
        public bool ManualHorn = false;
        public bool TCSHorn = false;
        public bool Horn = false;
        protected bool PreviousHorn = false;

        public bool ManualBell = false;
        public SoundState BellState = SoundState.Stopped;
        public bool Bell = false;
        protected bool PreviousBell = false;

        public bool VacuumExhausterPressed = false;
        public bool FastVacuumExhausterFitted = false;

        public bool AlerterSnd;
        public bool VigilanceMonitor;
        public bool Sander;
        public bool Wiper;
        public bool BailOff;
        public bool DynamicBrake;
        public float MaxPowerW;
        public float MaxForceN;
        public float AbsTractionSpeedMpS;
        public float MaxCurrentA = 0;
        public float MaxSpeedMpS = 1e3f;
        public float UnloadingSpeedMpS;
        public float MainResPressurePSI = 130;
        public bool CompressorIsOn;
        public float AverageForceN;
        public bool PowerOn;
        public float PowerOnDelayS;
        public bool CabLightOn;
        public bool CabFloodLightOn;
        public bool ShowCab = true;
        public bool MilepostUnitsMetric;
        public float DrvWheelWeightKg; // current weight on locomotive drive wheels, includes drag factor (changes as mass changes)
        public float InitialDrvWheelWeightKg; // initialising weight on locomotive drive wheels, includes drag factor
        public bool CabRadioOn;
        public bool OnLineCabRadio;
        public string OnLineCabRadioURL;
        public bool Battery = true;
        public bool PowerKey;
        public bool BrakeRelease = false;
        public bool Up = false;
        public bool Down = false;

        // Water trough filling
        public bool HasWaterScoop = false; // indicates whether loco + tender have a water scoop or not
        public float ScoopMaxPickupSpeedMpS = 200.0f; // Maximum scoop pickup speed - used in steam locomotive viewer
        public bool ScoopIsBroken = false; // becomes broken if activated where there is no trough
        public bool RefillingFromTrough = false; // refilling from through is ongoing
        public float WaterScoopFillElevationM; // height water has to be raised to fill tender
        public float WaterScoopDepthM; // depth that water scoop goes into trough (pan)
        public float WaterScoopWidthM; // width of water scoop
        public float WaterScoopVelocityMpS; // Velocity of water entering water scoop
        public float WaterScoopDragForceN; // drag force due to scoop being in water trough
        public float WaterScoopedQuantityLpS; // Amount of water scooped up by water scoop per second
        public float WaterScoopInputAmountL; // Water scooped in elapsed time
        public float WaterScoopMinSpeedMpS; // Minimum speed for water pickup
        public bool IsWaterScoopDown = false;
        public bool WaterScoopDown;
        public const float GravitationalAccelerationFtpSpS = 32.26f;
        public float TenderWaterLevelFraction;
        public float WaterScoopTotalWaterL;
        bool WaterScoopOverTroughFlag = false;
        bool WaterScoopNotFittedFlag = false;
        bool WaterScoopSlowSpeedFlag = false;
        bool WaterScoopDirectionFlag = false;
        public bool IsWaterScoopPlayerLocomotive = false;
        bool WaterScoopSoundOn = false;
        public float MaxTotalCombinedWaterVolumeUKG;
        public MSTSNotchController WaterController = new MSTSNotchController(0, 1, 0.01f);
        public float CombinedTenderWaterVolumeUKG          // Decreased by running injectors and increased by refilling
        {
            get { return WaterController.CurrentValue* MaxTotalCombinedWaterVolumeUKG; }
            set { WaterController.CurrentValue = value / MaxTotalCombinedWaterVolumeUKG; }
        }

        public float CurrentLocomotiveSteamHeatBoilerWaterCapacityL
        {
            get { return WaterController.CurrentValue * MaximumSteamHeatBoilerWaterTankCapacityL; }
            set { WaterController.CurrentValue = value / MaximumSteamHeatBoilerWaterTankCapacityL; }
        }
        public float IsTenderRequired = 1.0f;  // Flag indicates that a tender is required for operation of the locomotive. Typically tank locomotives do not require a tender. Assume by default that tender is required.

        public float BoilerPressurePSI;     // Steam Gauge pressure - what the engineer sees.
        public float MaxBoilerPressurePSI = 180f;  // maximum boiler pressure, safety valve setting

        // Vacuum Reservoir and Exhauster Settings

        // Steam heating Flags
        public bool IsSteamInitial = true;        // To initialise steam heat
        public bool IsSteamHeatFirstTime = true;  // Flag for first pass at steam heating.
        public bool IsSteamHeatFitted = false;    // Is steam heating fitted to locomotive
        public float CurrentSteamHeatPressurePSI = 0.0f;   // Current pressure in steam heat system

        public string LocomotiveName; // Name of locomotive from ENG file

        // Carriage Steam Heating Parameters
        public float MaxSteamHeatPressurePSI;    // Maximum Steam heating pressure
        public Interpolator SteamHeatPressureToTemperaturePSItoF;
        public Interpolator SteamDensityPSItoLBpFT3;   // saturated steam density given pressure
        public Interpolator SteamHeatPSItoBTUpLB;      // total heat in saturated steam given pressure
        public bool IsSteamHeatingBoilerFitted = false;   // Flag to indicate when steam heat boiler van is fitted
        public float CalculatedCarHeaterSteamUsageLBpS;

        // Adhesion Debug
        // Commented out as never used
        //bool DebugSpeedReached;
        //float DebugSpeedIncrement = 5.0f; // Speed increment for debug display - in mph
        //float DebugSpeed = 5.0f; // Initialise at 5 mph
        //float DebugTimer = 0.0f;

        // Adhesion parameters
        float BaseFrictionCoefficientFactor;  // Factor used to adjust Curtius formula depending upon weather conditions
        public float SteamStaticWheelForce;
        public float SteamTangentialWheelForce;
        public float SteamDrvWheelWeightLbs;  // Weight on each drive axle
        public float PreviousThrottleSetting = 0.0f;  // Holds the value of the previous throttle setting for calculating the correct antislip speed

        // parameters for Track Sander based upon compressor air and abrasive table for 1/2" sand blasting nozzle @ 50psi
        public float MaxTrackSandBoxCapacityM3 = Me3.FromFt3(40.0f);  // Capacity of sandbox - assume 40.0 cu ft
        public float CurrentTrackSandBoxCapacityM3 = 5.0f;   // This value needs to be initialised to the value above, as it reduces as sand is used.
        public float TrackSanderAirComsumptionM3pS = Me3.FromFt3(195.0f) / 60.0f;  // Default value - cubic feet per min (CFM) 195 ft3/m
        public float TrackSanderAirPressurePSI = 50.0f;
        public float TrackSanderSandConsumptionM3pS = Me3.FromFt3(11.6f) / 3600.0f; // Default value - 11.6 ft3/h

        // Vacuum Braking parameters
        readonly static float OneAtmospherePSI = Bar.ToPSI(1);
        public bool SmallSteamEjectorIsOn = false;
        public bool LargeSteamEjectorIsOn = false;
        public bool VacuumPumpOperating = false;
        public float SteamEjectorSmallPressurePSI = 0.0f;
        public float SteamEjectorLargePressurePSI = 0.0f;
        public bool VacuumPumpFitted;
        public bool SmallEjectorControllerFitted = false;
        public float VacuumPumpResistanceN;
        public float EjectorSmallSteamConsumptionLbpS;
        public float EjectorLargeSteamConsumptionLbpS;
        public float SteamEjectorSmallSetting = 0.0f;
        public float SteamEjectorLargeSetting = 0.0f;
        public float MaxVaccuumMaxPressurePSI = 110.0f;  // Value for the boiler pressure when maximum vacuum will be produced for the steam ejector 
        public float SmallEjectorFeedFraction = 0.35f;
        public float LargeEjectorFeedFraction = 1.0f;
        public bool LargeEjectorControllerFitted = false;
        public float VacuumPumpChargingRateInHgpS = 0.0f;
        public bool VacuumBrakeEQFitted = false;  // Flag to indicate that equalising resevoir fitted to vacuum brakes
        public float HUDNetBPLossGainPSI;
        public float SmallEjectorBrakePipeChargingRatePSIorInHgpS;
        public float LargeEjectorBrakePipeChargingRatePSIorInHgpS;
        public float ExhausterHighSBPChargingRatePSIorInHgpS;  // Rate for Exhauster in high speed mode
        public float ExhausterLowSBPChargingRatePSIorInHgpS;  // Rate for Exhauster in high speed mode
        public bool VacuumBrakeCutoffActivated = false;
        public bool BrakeFlagDecrease = false;
        public bool BrakeFlagIncrease = false;

        private bool _SmallEjectorSoundOn = false;
        public bool SmallEjectorSoundOn
        {
            get => _SmallEjectorSoundOn;
            set
            {
                if (value != _SmallEjectorSoundOn)
                {
                    SignalEvent(value? Event.SmallEjectorOn : Event.SmallEjectorOff);
                    _SmallEjectorSoundOn = value;
                }
            }
        }

        private bool _LargeEjectorSoundOn = false;
        public bool LargeEjectorSoundOn
        {
            get => _LargeEjectorSoundOn;
            set
            {
                if (value != _LargeEjectorSoundOn)
                {
                    SignalEvent(value? Event.LargeEjectorOn : Event.LargeEjectorOff);
                    _LargeEjectorSoundOn = value;
                }
            }
       }

        public bool SteamEngineBrakeFitted = false;
        public bool TrainBrakeFitted = false;
        public bool EngineBrakeFitted = false;
        public bool BrakemanBrakeFitted = false;
        public bool VacuumExhausterIsOn = false;
        public float VacuumBrakesMainResVolumeM3 = Me3.FromFt3(200.0f); // Main vacuum reservoir volume
        public float VacuumBrakesMainResMaxVacuumPSIAorInHg = Vac.ToPress(23);
        public float VacuumBrakesExhausterRestartVacuumPSIAorInHg = Vac.ToPress(21);
        public float VacuumBrakesMainResChargingRatePSIAorInHgpS = Bar.ToPSI(Bar.FromInHg(0.2f));
        public float VacuumMainResVacuumPSIAorInHg = Vac.ToPress(23); // Vacuum currently in Main Reservoir

        // Set values for display in HUD
        public float WagonCoefficientFrictionHUD;
        public float LocomotiveCoefficientFrictionHUD;

        public PressureUnit MainPressureUnit = PressureUnit.None;
        public Dictionary<BrakeSystemComponent, PressureUnit> BrakeSystemPressureUnits = new Dictionary<BrakeSystemComponent, PressureUnit>
        {
            { BrakeSystemComponent.MainReservoir, PressureUnit.None },
            { BrakeSystemComponent.EqualizingReservoir, PressureUnit.None },
            { BrakeSystemComponent.AuxiliaryReservoir, PressureUnit.None },
            { BrakeSystemComponent.EmergencyReservoir, PressureUnit.None },
            { BrakeSystemComponent.MainPipe, PressureUnit.None },
            { BrakeSystemComponent.BrakePipe, PressureUnit.None },
            { BrakeSystemComponent.BrakeCylinder, PressureUnit.None }
        };

        protected float OdometerResetPositionM = 0;
        protected bool OdometerCountingUp = true;
        protected bool OdometerCountingForwards = true;

        public bool OdometerVisible { get; private set; }
        public float OdometerM
        {
            get
            {
                if (Train == null)
                    return 0;

                return OdometerCountingForwards ? Train.DistanceTravelledM - OdometerResetPositionM : OdometerResetPositionM - Train.DistanceTravelledM;
            }
        }

        // ENG file data
        public string CabSoundFileName;
        public string CVFFileName;
        public float MaxMainResPressurePSI = 130;
        public float MainResVolumeM3 = 0.3f;
        public float TrainBrakePipeLeakPSIorInHgpS = 0.0f;    // Air leakage from train brake pipe - should normally be no more then 5psi/min - default off
        public float CompressorRestartPressurePSI = 110;
        public float CompressorChargingRateM3pS = 0.075f;
        public float MainResChargingRatePSIpS = 0.4f;
        public float EngineBrakeReleaseRatePSIpS = 12.5f;
        public float EngineBrakeApplyRatePSIpS = 12.5f;
        public float BrakePipeTimeFactorS = 0.0015f;
        public float BrakePipeDischargeTimeFactor;
        public float BrakeServiceTimeFactorS;
        public float BrakeEmergencyTimeFactorS;
        public float BrakePipeChargingRatePSIorInHgpS;
        public float BrakePipeQuickChargingRatePSIpS;
        public InterpolatorDiesel2D TractiveForceCurves;
        public InterpolatorDiesel2D DynamicBrakeForceCurves;
        public InterpolatorDiesel2D ExtendedExcitationCurrent;
        public InterpolatorDiesel2D ExtendedArmCurrent;
        public InterpolatorDiesel2D ExtendedExcitationEDBCurrent; // buzení
        public InterpolatorDiesel2D ExtendedArmEDBCurrent; // kotvy
        public float DynamicBrakeSpeed1MpS = MpS.FromKpH(5);
        public float DynamicBrakeSpeed2MpS = MpS.FromKpH(30);
        public float DynamicBrakeSpeed3MpS = MpS.FromKpH(999);
        public float DynamicBrakeSpeed4MpS = MpS.FromKpH(999);
        public float DynamicBrakeRatioAtSpeed4 = 0;
        public float MaxDynamicBrakeForceN;
        public float DynamicBrakeMaxCurrentA;
        public float DynamicBrakeDelayS;
        public bool DynamicBrakeAutoBailOff;
        public bool UsingRearCab;

        protected bool DynamicBrakeBlended; // dynamic brake blending is currently active
        protected bool DynamicBrakeBlendingEnabled; // dynamic brake blending is configured
        public bool DynamicBrakeAvailable; // dynamic brake is available
        AirSinglePipe airPipeSystem;
        public double DynamicBrakeCommandStartTime;
        protected bool DynamicBrakeBlendingOverride; // true when DB lever >0% should always override the blending. When false, the bigger command is applied.
        protected bool DynamicBrakeBlendingForceMatch = true; // if true, dynamic brake blending tries to achieve the same braking force as the airbrake would have.

        public CombinedControl CombinedControlType;
        public float CombinedControlSplitPosition;
        public bool HasSmoothStruc;

        public float MaxContinuousForceN;
        public float SpeedOfMaxContinuousForceMpS;  // Speed where maximum tractive effort occurs
        public float MSTSSpeedOfMaxContinuousForceMpS;  // Speed where maximum tractive effort occurs - MSTS parameter if used
        public float ContinuousForceTimeFactor = 1800;
        public bool AntiSlip;
        public bool AdvancedAdhesionModel = false; // flag set depending upon adhesion model used.
        public float SanderSpeedEffectUpToMpS;
        public float SanderSpeedOfMpS = 30.0f;
        public string EngineOperatingProcedures;

        public bool EmergencyButtonPressed { get; set; }
        public bool EmergencyCausesPowerDown { get; private set; }
        public bool EmergencyCausesThrottleDown { get; private set; }
        public bool EmergencyEngagesHorn { get; private set; }
        public bool WheelslipCausesThrottleDown { get; private set; }

        public float BrakeRestoresPowerAtBrakePipePressurePSI { get; private set; }
        public float BrakeCutsPowerAtBrakePipePressurePSI { get; private set; }
        public bool DoesVacuumBrakeCutPower { get; private set; }
        public bool DoesBrakeCutPower { get; private set; }
        public float BrakeCutsPowerAtBrakeCylinderPressurePSI { get; private set; }
        public bool DoesHornTriggerBell { get; private set; }

        protected const float DefaultCompressorRestartToMaxSysPressureDiff = 35;    // Used to check if difference between these two .eng parameters is correct, and to correct it
        protected const float DefaultMaxMainResToCompressorRestartPressureDiff = 10; // Used to check if difference between these two .eng parameters is correct, and to correct it
        protected const float DefaultMaxCompressorRestartPressure = 135; // Max value to be inserted if .eng parameters are corrected
        protected const float DefaultMainResVolume = 0.78f; // Value to be inserted if .eng parameters are corrected
        protected const float DefaultMaxMainResPressure = 140; // Max value to be inserted if .eng parameters are corrected

        public List<CabView> CabViewList = new List<CabView>();
        public CabView3D CabView3D;

        public MSTSNotchController SteamHeatController = new MSTSNotchController(0, 1, 0.1f);

        public MSTSNotchController ThrottleController;
        public ScriptedBrakeController TrainBrakeController;
        public ScriptedBrakeController EngineBrakeController;
        public ScriptedBrakeController BrakemanBrakeController;
        public AirSinglePipe.ValveState EngineBrakeState = AirSinglePipe.ValveState.Lap;
        public MSTSNotchController DynamicBrakeController;
        public MSTSNotchController GearBoxController;

        private int PreviousGearBoxNotch;

        public float EngineBrakeIntervention = -1;
        public float TrainBrakeIntervention = -1;
        public float ThrottleIntervention = -1;
        public float DynamicBrakeIntervention = -1;
        protected float PreviousDynamicBrakeIntervention = -1;

        public ScriptedTrainControlSystem TrainControlSystem;

        public Axle LocomotiveAxle;
        public IIRFilter CurrentFilter;
        public IIRFilter AdhesionFilter;

        public float FilteredMotiveForceN;

        public double CommandStartTime;

        public double LastBrakeSoundTime = 0;

        public float PowerReduction = 0;

        // Icik        
        public ScriptedCircuitBreaker CircuitBreaker;
        public float AdhesionEfficiencyKoef;
        public bool OverCurrent = false;
        public bool OverVoltage = false;
        public bool MultiSystemEngine = false;
        public bool MultiSystemEnginePlayer = false;
        public float MaxCurrentPower;
        public float MaxCurrentBrake;
        public float SlipSpeedCritical;
        public bool EDBIndependent;
        public float PowerOnFilter;
        public float PowerOnFilterCapacity;
        public float PowerOnFilterCapacityLimit;        
        public bool HVOffStatusBrakeCyl = false;
        public bool HVOffStatusBrakePipe = false;
        public bool DoesPowerLossResetControls = false;
        public bool ThrottleZero = false;
        public bool AuxCompressorMode_OffOn;
        public bool CompressorMode_OffAuto;
        public bool CompressorMode2_OffAuto;        
        public bool EngineBrakeEngageEDB = false;
        public bool Heating_OffOn;
        public bool HeatingEnable = false;
        public bool SwitchingVoltageMode_OffAC;
        public bool SwitchingVoltageMode_OffDC;
        public int SwitchingVoltageMode = 1;
        public float PowerReductionByHeatingEng;
        public float PowerReductionByHeatingWag;
        public float PowerReductionByAuxEquipmentEng;
        public float PowerReductionByAuxEquipmentWag;
        public float PowerReduction0;
        public float TElevatedConsumption = 0;
        public float MainResChargingRatePSIpS0;
        public bool AirBrakesIsCompressorElectricOrMechanical;
        public float AirBrakesAirCompressorWattage = 30000;
        float BaseFrictionCoefficientFactor0 = 1;
        public bool CentralHandlingDoors;
        public bool VoltageFilter;
        public float RouteVoltageV;        
        public bool RouteVoltageChange;
        public float LocomotivePowerVoltage;
        public float MaxPowerWAC;
        public float MaxForceNAC;
        public float MaxPowerWDC;
        public float MaxForceNDC;
        public InterpolatorDiesel2D TractiveForceCurvesAC;
        public InterpolatorDiesel2D TractiveForceCurvesDC;
        public InterpolatorDiesel2D DynamicBrakeForceCurvesAC;
        public InterpolatorDiesel2D DynamicBrakeForceCurvesDC;
        public float UiPowerLose = 1;
        public bool QuickReleaseButton = false;
        bool QuickReleaseButtonPressed = false;
        public bool LowPressureReleaseButton = false;
        bool LowPressureReleaseButtonPressed = false;
        public bool QuickReleaseButtonEnable = false;        
        public bool LowPressureReleaseButtonEnable = false;
        public bool AuxCompressor = false;
        public bool CompressorCombined = false;
        public bool CompressorCombined2 = false;
        public bool Compressor_I = false;
        public bool Compressor_II = false;
        public bool Compressor2IsOn;
        public float MainResChargingRatePSIpS_2;
        public float AuxResChargingRatePSIpS;
        public bool AuxCompressorIsOn;
        public float AuxResPressurePSI;
        public float MaxAuxResPressurePSI;
        public float AuxResVolumeM3;
        public float AuxCompressorRestartPressurePSI;
        public float MinAuxPressurePantoPSI;
        public float MinAuxPressureHVPSI;
        public bool AirForPantograph;
        public bool AirForHV;
        public float PantoConsumptionVolumeM3;
        public float HVConsumptionVolumeM3_On;
        public float HVConsumptionVolumeM3_Off;
        public bool HVElectric;
        public float AuxResPipeLeak;
        public float CompressorSwitch = 1;
        public float CompressorSwitch2 = 0;
        public float Pantograph4Switch = 0;        
        public bool Pantograph4 = false;
        public bool Compressor_I_HandMode;
        public bool Compressor_II_HandMode;
        public bool MainResOverPressure = false;
        public bool AuxResOverPressure = false;
        public float MaxMainResOverPressurePSI;
        public float MaxAuxResOverPressurePSI;
        public bool HV5Enable = false;
        public float HV5Switch = 3;
        public float LastStateHV5 = 3;
        public bool HV2Enable = false;
        public float HV2Switch = 0;
        public float LastStateHV2 = 0;
        public bool HV3Enable = false;
        public float HV3Switch = 1;
        public float LastStateHV3 = 1;
        public bool HVPressedTestDC = false;
        public bool HVPressedTestAC = false;
        public bool HVPressedTest = false;
        public float HVPressedTime = 0;
        public float HVOnPressedTime = 0;
        public float HVOffPressedTime = 0;
        public bool HVOnPressedTest = false;
        public bool HVOffPressedTest = false;
        public bool HVCanOn = false;
        public bool HV3CanOn = false;
        public float HV3TimeToOn;        
        public float CompressorBeep = 0;
        public float Compressor2Beep = 0;        
        public bool LocoReadyToGo = false;
        public bool CircuitBreakerOn = false;
        public bool HVOff = false;
        public bool HVOn = false;
        public bool BreakPowerButtonEnable = false;
        public bool BreakPowerButton;
        bool BreakPowerButtonPressed = false;
        public bool BreakPowerButton_Activated;
        public float GameTimeFlow;
        float PantoStatus = 0;
        float PrePantoStatus = 0;
        public float HeatingMaxCurrentA;
        public bool CheckPowerLoss;
        public bool DontRaisePanto;
        float PreDataAmmeter;
        float PreDataAmps;
        float PreDataAmpVolts;
        public bool AIPantoDown;
        public bool Pantograph3Enable = false;
        public float Pantograph3Switch = 1;
        public float LastStatePantograph3;
        public bool PantographOnPressedTest;
        public bool PantographOffPressedTest;
        public bool Pantograph3CanOn = false;
        public float PantographOnPressedTime;
        public float PantographOffPressedTime;


        // Jindrich
        public bool EnableControlVoltageChange = true;
        public CruiseControl CruiseControl;
        public MultiPositionController MultiPositionController;
        public List<MultiPositionController> MultiPositionControllers;
        public StringArray StringArray = new StringArray();
        public bool SelectingSpeedPressed = false;
        public bool EngineBrakePriority = false;
        public bool IsAPartOfPlayerTrain = false;
        public float ThrottleOverriden = 0;
        public int AccelerationBits = 0;
        public bool DisableRestrictedSpeedWhenManualDriving = false;
        public bool AutomaticParkingBrake = false;
        public float AutomaticParkingBrakeEngageSpeedKpH = 0;
        public float ParkingBrakeTargetPressurePSI = 0;
        public bool AutomaticParkingBrakeEngaged = false;
        public List<CabViewControl> ActiveScreens = new List<CabViewControl>();
        public List<CabViewControl> EditableItems = new List<CabViewControl>();
        public ExtendedPhysics extendedPhysics = null;
        public float ControllerVolts;
        public float ThrottleFullRangeIncreaseTimeSeconds = 0;
        public float ThrottleFullRangeDecreaseTimeSeconds = 0;
        public float DynamicBrakeFullRangeIncreaseTimeSeconds;
        public float DynamicBrakeFullRangeDecreaseTimeSeconds;
        public float MaxControllerVolts = 10;
        public CurrentDirectionEnum CurrentDirection = CurrentDirectionEnum.Braking;
        public float AcceleratingToBrakingChangeTime = 0;
        public enum DriverStation { None, Station1, Station2 };
        public DriverStation ActiveStation = DriverStation.None;
        public enum KeyPosition { Pocket, Station1, Station2 };
        public KeyPosition CurrentKeyPosition = KeyPosition.Pocket;
        public Mirel Mirel;
        public bool AntiWheelSpinEquipped = false;
        public float AntiWheelSpinSpeedDiffThreshold = 0.5f;
        protected float skidSpeedDegratation = 0;
        public float DynamicBrakeMaxForceAtSelectorStep = 0;
        public float SelectedMaxAccelerationStep = 0;
        public bool RecuperationAvailable = false;
        public bool MoveThrottle = true;

        public bool
      Speed0Pressed, Speed10Pressed, Speed20Pressed, Speed30Pressed, Speed40Pressed, Speed50Pressed
    , Speed60Pressed, Speed70Pressed, Speed80Pressed, Speed90Pressed, Speed100Pressed
    , Speed110Pressed, Speed120Pressed, Speed130Pressed, Speed140Pressed, Speed150Pressed
    , Speed160Pressed, Speed170Pressed, Speed180Pressed, Speed190Pressed, Speed200Pressed;

        public MSTSLocomotive(Simulator simulator, string wagPath)
            : base(simulator, wagPath)
        {
          //  BrakePipeChargingRatePSIpS = Simulator.Settings.BrakePipeChargingRate;
                        
            MilepostUnitsMetric = Simulator.TRK.Tr_RouteFile.MilepostUnitsMetric;
            //BrakeCutsPowerAtBrakeCylinderPressurePSI = 4.0f;

            LocomotiveAxle = new Axle();
            LocomotiveAxle.DriveType = AxleDriveType.ForceDriven;
            LocomotiveAxle.DampingNs = MassKG / 1000.0f;
            LocomotiveAxle.FrictionN = MassKG / 100.0f;
            LocomotiveAxle.StabilityCorrection = true;
            LocomotiveAxle.FilterMovingAverage.Size = Simulator.Settings.AdhesionMovingAverageFilterSize;
            CurrentFilter = new IIRFilter(IIRFilter.FilterTypes.Butterworth, 1, IIRFilter.HzToRad(0.5f), 0.001f);
            AdhesionFilter = new IIRFilter(IIRFilter.FilterTypes.Butterworth, 1, IIRFilter.HzToRad(1f), 0.001f);

            TrainBrakeController = new ScriptedBrakeController(this);
            EngineBrakeController = new ScriptedBrakeController(this);
            BrakemanBrakeController = new ScriptedBrakeController(this);
            ThrottleController = new MSTSNotchController();
            DynamicBrakeController = new MSTSNotchController();
            TrainControlSystem = new ScriptedTrainControlSystem(this);
            Mirel = new Mirel(this);
        }

        /// <summary>
        /// This initializer is called when we haven't loaded this type of car before
        /// and must read it new from the wag file.
        /// </summary>
        public override void LoadFromWagFile(string wagFilePath)
        {
            base.LoadFromWagFile(wagFilePath);

            // Assumes that CabViewList[0] is the front cab
            // and that CabViewList[1] is the rear cab, if present.
            // Could be extended to more than 2 cabs.
            if (CVFFileName != null)
            {
                var cabView = BuildCabView(WagFilePath, CVFFileName);
                if (cabView != null)
                {
                    CabViewList.Add(cabView);
                    var reverseCVFFileName = Path.Combine(
                        Path.GetDirectoryName(CVFFileName), // Some CVF paths begin with "..\..\", so Path.GetDirectoryName() is needed.
                        Path.GetFileNameWithoutExtension(CVFFileName) + "_rv.cvf"
                    );

                    {
                        cabView = BuildCabView(WagFilePath, reverseCVFFileName);
                        if (cabView != null)
                            CabViewList.Add(cabView);
                    }
                    // practically never happens, but never say never
                    if (CabViewList.Count == 2 && CabViewList[1].CabViewType == CabViewType.Front && CabViewList[0].CabViewType == CabViewType.Rear)
                    {
                        cabView = CabViewList[1];
                        CabViewList.Insert(0, cabView);
                        CabViewList.RemoveAt(2);
                    }
                    // only one cabview, and it looks rear; insert a void one at first place to maintain fast indexing
                    else if (CabViewList.Count == 1 && CabViewList[0].CabViewType == CabViewType.Rear)
                    {
                        UsingRearCab = true;
                        CabViewList.Add(CabViewList[0]);
                        CabViewList[0].CabViewType = CabViewType.Void;
                    }
                }
                CabView3D = BuildCab3DView();
                if (CabViewList.Count == 0 & CabView3D == null)
                    Trace.TraceWarning("{0} locomotive's CabView references non-existent {1}", wagFilePath, CVFFileName);
            }

            //CorrectBrakingParams();
            CheckCoherence();
            GetPressureUnit();
            IsDriveable = true;

            MoveParamsToAxle();
        }

        protected void CheckCoherence()
        {
            if (!TrainBrakeController.IsValid())
                TrainBrakeController = new ScriptedBrakeController(this); //create a blank one

            if (!EngineBrakeController.IsValid())
                EngineBrakeController = null;

            if (!BrakemanBrakeController.IsValid())
                BrakemanBrakeController = null;

            if (ThrottleController == null)
            {
                //If no controller so far, we create a default one
                ThrottleController = new MSTSNotchController();
                ThrottleController.StepSize = 0.1f;
            }

            // need to test for Dynamic brake problem on 3DTS and SLI
            if (DynamicBrakeController.IsValid())
            {
                if (DynamicBrakeController.NotchCount() <= 3)
                {
                    HasSmoothStruc = true;
                }
            }
            else
                DynamicBrakeController = null;

            if ((DynamicBrakeForceCurves == null && DynamicBrakeForceCurvesAC == null && DynamicBrakeForceCurvesDC == null) && MaxDynamicBrakeForceN > 0)
            {
                DynamicBrakeForceCurves = new InterpolatorDiesel2D(2);
                Interpolator interp = new Interpolator(2);
                interp[0] = 0;
                interp[100] = 0;
                DynamicBrakeForceCurves[0] = interp;
                interp = new Interpolator(7);
                interp[0] = 0;
                interp[DynamicBrakeSpeed1MpS] = 0;
                interp[DynamicBrakeSpeed2MpS] = MaxDynamicBrakeForceN;
                interp[DynamicBrakeSpeed3MpS] = MaxDynamicBrakeForceN;
                interp[DynamicBrakeSpeed4MpS] = DynamicBrakeRatioAtSpeed4 * MaxDynamicBrakeForceN;
                interp[DynamicBrakeSpeed4MpS + 0.5f] = 0;
                interp[100] = 0;
                DynamicBrakeForceCurves[1] = interp;
            }
        }

        protected float checkAccBitsPreviousSpeed = 0;
        protected float checkAccBitsOffTime = 0;
        protected void CheckAccelerationBits(float elapsedSeconds, float speed)
        {
            float delta = MpS.ToKpH(speed) - checkAccBitsPreviousSpeed;
            if (delta > 0.5) // increased, blink the increasing speed sign
            {
                checkAccBitsPreviousSpeed = MpS.ToKpH(speed);
                AccelerationBits = 2;
                checkAccBitsOffTime = 0;
            }
            if (delta < -0.5) // decreased, blink the decreasing speed sign
            {
                checkAccBitsPreviousSpeed = MpS.ToKpH(speed);
                AccelerationBits = 1;
                checkAccBitsOffTime = 0;
            }
            checkAccBitsOffTime += elapsedSeconds;
            if (checkAccBitsOffTime > 0.25f)
            {
                AccelerationBits = 0;
                checkAccBitsOffTime = 0;
            }
        }

        protected void GetPressureUnit()
        {
            switch (Simulator.Settings.PressureUnit)
            {
                default:
                case "Automatic":
                    if (CabViewList.Count > 0)
                    {
                        Dictionary<CABViewControlTypes, BrakeSystemComponent> brakeSystemComponents = new Dictionary<CABViewControlTypes, BrakeSystemComponent>
                        {
                            { CABViewControlTypes.MAIN_RES, BrakeSystemComponent.MainReservoir },
                            { CABViewControlTypes.EQ_RES, BrakeSystemComponent.EqualizingReservoir },
                            { CABViewControlTypes.BRAKE_CYL, BrakeSystemComponent.BrakeCylinder },
                            { CABViewControlTypes.BRAKE_PIPE, BrakeSystemComponent.BrakePipe }
                        };

                        Dictionary<CABViewControlUnits, PressureUnit> pressureUnits = new Dictionary<CABViewControlUnits, PressureUnit>
                        {
                            { CABViewControlUnits.KILOPASCALS, PressureUnit.KPa },
                            { CABViewControlUnits.BAR, PressureUnit.Bar },
                            { CABViewControlUnits.PSI, PressureUnit.PSI },
                            { CABViewControlUnits.INCHES_OF_MERCURY, PressureUnit.InHg },
                            { CABViewControlUnits.KGS_PER_SQUARE_CM, PressureUnit.KgfpCm2 }
                       };

                        CabViewControls cvcList = CabViewList[0].CVFFile.CabViewControls;
                        foreach (CabViewControl cvc in cvcList)
                        {
                            if (brakeSystemComponents.ContainsKey(cvc.ControlType) && pressureUnits.ContainsKey(cvc.Units))
                            {
                                BrakeSystemComponent component = brakeSystemComponents[cvc.ControlType];
                                PressureUnit unit = pressureUnits[cvc.Units];

                                BrakeSystemPressureUnits[component] = unit;
                            }
                        }
                    }

                    // Manual rules :
                    BrakeSystemPressureUnits[BrakeSystemComponent.MainPipe] = BrakeSystemPressureUnits[BrakeSystemComponent.MainReservoir]; // Main Pipe is supplied by Main Reservoir
                    BrakeSystemPressureUnits[BrakeSystemComponent.AuxiliaryReservoir] = BrakeSystemPressureUnits[BrakeSystemComponent.BrakePipe]; // Auxiliary Reservoir is supplied by Brake Pipe (in single pipe brakes)
                    BrakeSystemPressureUnits[BrakeSystemComponent.EmergencyReservoir] = BrakeSystemPressureUnits[BrakeSystemComponent.BrakePipe]; // Emergency Reservoir is supplied by Brake Pipe

                    foreach (BrakeSystemComponent component in BrakeSystemPressureUnits.Keys.ToList())
                    {
                        if (BrakeSystemPressureUnits[component] == PressureUnit.None)
                        {
                            BrakeSystemPressureUnits[component] = (MilepostUnitsMetric ? PressureUnit.Bar : PressureUnit.PSI);
                        }
                    }
                    break;

                case "bar":
                    foreach (BrakeSystemComponent component in BrakeSystemPressureUnits.Keys.ToList())
                    {
                        BrakeSystemPressureUnits[component] = PressureUnit.Bar;
                    }
                    break;

                case "PSI":
                    foreach (BrakeSystemComponent component in BrakeSystemPressureUnits.Keys.ToList())
                    {
                        BrakeSystemPressureUnits[component] = PressureUnit.PSI;
                    }
                    break;

                case "inHg":
                    foreach (BrakeSystemComponent component in BrakeSystemPressureUnits.Keys.ToList())
                    {
                        BrakeSystemPressureUnits[component] = PressureUnit.InHg;
                    }
                    break;

                case "kgf/cm^2":
                    foreach (BrakeSystemComponent component in BrakeSystemPressureUnits.Keys.ToList())
                    {
                        BrakeSystemPressureUnits[component] = PressureUnit.KgfpCm2;
                    }
                    break;
            }

            // The main pressure unit is the one that is the most present in the brake system
            MainPressureUnit = BrakeSystemPressureUnits.Values.ToList()
                .GroupBy(x => x)
                .OrderByDescending(x => x.Count())
                .First().Key;
        }

        protected CabView BuildCabView(string wagFilePath, string cvfFileName)
        {
            var viewPointList = new List<ViewPoint>();
            var extendedCVF = new ExtendedCVF();
            bool noseAhead = false;

            var cvfBasePath = Path.Combine(Path.GetDirectoryName(wagFilePath), "CABVIEW");
            var cvfFilePath = Path.Combine(cvfBasePath, cvfFileName);
            if (!File.Exists(cvfFilePath))
                return null;

            var cvfFile = new CabViewFile(cvfFilePath, cvfBasePath);
            var viewPoint = new ViewPoint();
            if (cvfFile.Locations.Count <= 0) return null; //check for Protrain's dummy cab
            // Set up camera locations for the cab views
            for (int i = 0; i < cvfFile.Locations.Count; ++i)
            {
                if (i >= cvfFile.Locations.Count || i >= cvfFile.Directions.Count)
                {
                    Trace.TraceWarning("Skipped cab view camera {1} missing Position and Direction in {0}", cvfFilePath, i);
                    break;
                }
                viewPoint = new ViewPoint();
                viewPoint.Location = cvfFile.Locations[i];
                viewPoint.StartDirection = cvfFile.Directions[i];
                viewPoint.RotationLimit = new Vector3(0, 0, 0);  // cab views have a fixed head position
                viewPointList.Add(viewPoint);
            }
            var cabViewType = new CabViewType();
            cabViewType = ((viewPointList[0].StartDirection.Y >= 90 && viewPointList[0].StartDirection.Y <= 270)
                || (viewPointList[0].StartDirection.Y <= -90 && viewPointList[0].StartDirection.Y >= -270)) ? CabViewType.Rear : CabViewType.Front;
            var wag = this as MSTSWagon;
            var wagFolderSlash = Path.GetDirectoryName(wag.WagFilePath) + @"\";
            string shapeFilePath;
            bool boundingLimitsFound = false;
            ShapeDescriptorFile shapeFile = new ShapeDescriptorFile();
            if (wag.FreightShapeFileName != null)
            {
                shapeFilePath = wagFolderSlash + wag.FreightShapeFileName;
                if (shapeFilePath != null && File.Exists(shapeFilePath + "d"))
                {
                    shapeFile = new ShapeDescriptorFile(shapeFilePath + "d");
                    if (shapeFile.shape.ESD_Bounding_Box != null) boundingLimitsFound = true;
                }
            }
            if (!boundingLimitsFound)
            {
                shapeFilePath = wagFolderSlash + wag.MainShapeFileName;
                if (shapeFilePath != null && File.Exists(shapeFilePath + "d"))
                {
                    shapeFile = new ShapeDescriptorFile(shapeFilePath + "d");
                    if (shapeFile.shape.ESD_Bounding_Box != null) boundingLimitsFound = true;
                }
            }
            if (boundingLimitsFound)
            {
                if (cabViewType == CabViewType.Front)
                    noseAhead = (viewPointList[0].Location.Z + 0.5f < shapeFile.shape.ESD_Bounding_Box.Max.Z) ? true : false;
                else if (cabViewType == CabViewType.Rear)
                    noseAhead = (viewPointList[0].Location.Z - 0.5f > shapeFile.shape.ESD_Bounding_Box.Min.Z) ? true : false;
            }
            if (!(this is MSTSSteamLocomotive))
            {
                InitializeFromORTSSpecific(cvfFilePath, extendedCVF);
            }
            return new CabView(cvfFile, viewPointList, extendedCVF, cabViewType, noseAhead);
        }

        protected CabView3D BuildCab3DView()
        {
            if (Cab3DShapeFileName == null)
                return null;

            var extendedCVF = new ExtendedCVF();
            bool noseAhead = false;

            var cab3dBasePath = Path.Combine(Path.GetDirectoryName(WagFilePath), "CABVIEW3D");
            var shapeFilePath = Path.Combine(cab3dBasePath, Cab3DShapeFileName);
            if (!File.Exists(shapeFilePath))
                return null;

            var cvfBasePath = cab3dBasePath;
            var cvfFilePath = Path.Combine(cvfBasePath, Path.ChangeExtension(Cab3DShapeFileName, "cvf"));
            if (!File.Exists(cvfFilePath))
            {
                cvfFilePath = Path.Combine(cvfBasePath, CVFFileName);
                if (!File.Exists(cvfFilePath))
                {
                    cvfBasePath = Path.Combine(Path.GetDirectoryName(WagFilePath), "CABVIEW");
                    cvfFilePath = Path.Combine(cvfBasePath, CVFFileName);
                    if (!File.Exists(cvfFilePath))
                        return null;
                }
            }
            var cvfFile = new CabViewFile(cvfFilePath, cvfBasePath);
            if (!(this is MSTSSteamLocomotive))
                InitializeFromORTSSpecific(cvfFilePath, extendedCVF);

            var cabViewAngle = CabViewpoints[0].StartDirection.Y;
            var cabViewType = (cabViewAngle >= 90 && cabViewAngle <= 270) || (cabViewAngle <= -90 && cabViewAngle >= -270) ? CabViewType.Rear : CabViewType.Front;

            // only one cabview, and it looks rear; insert a void one at first place to maintain fast indexing
            if (CabViewpoints.Count == 1 && cabViewType == CabViewType.Rear)
                CabViewpoints.Insert(0, new PassengerViewPoint());

            return new CabView3D(cvfFile, CabViewpoints, extendedCVF, cabViewType, noseAhead, shapeFilePath);
        }

        /// <summary>
        /// Parse the wag file parameters required for the simulator and viewer classes
        /// </summary>
        public override void Parse(string lowercasetoken, STFReader stf)
        {
            switch (lowercasetoken)
            {
                case "engine(sound": CabSoundFileName = stf.ReadStringBlock(null); break;
                case "engine(cabview": CVFFileName = stf.ReadStringBlock(null); break;
                case "engine(maxpower": MaxPowerW = stf.ReadFloatBlock(STFReader.UNITS.Power, null); break;
                case "engine(maxforce": MaxForceN = stf.ReadFloatBlock(STFReader.UNITS.Force, null); break;
                case "engine(maxcurrent": MaxCurrentA = stf.ReadFloatBlock(STFReader.UNITS.Current, null); break;
                case "engine(maxcontinuousforce": MaxContinuousForceN = stf.ReadFloatBlock(STFReader.UNITS.Force, null); break;
                case "engine(ortsspeedofmaxcontinuousforce": SpeedOfMaxContinuousForceMpS = stf.ReadFloatBlock(STFReader.UNITS.Speed, null); break;
                case "engine(dieselenginespeedofmaxtractiveeffort": MSTSSpeedOfMaxContinuousForceMpS = stf.ReadFloatBlock(STFReader.UNITS.Speed, null); break;
                case "engine(maxvelocity": MaxSpeedMpS = stf.ReadFloatBlock(STFReader.UNITS.Speed, null); break;
                case "engine(ortsunloadingspeed": UnloadingSpeedMpS = stf.ReadFloatBlock(STFReader.UNITS.Speed, null); break;
                case "engine(type":
                    stf.MustMatch("(");
                    var engineType = stf.ReadString();
                    try
                    {
                        EngineType = (EngineTypes)Enum.Parse(typeof(EngineTypes), engineType.First().ToString().ToUpper() + engineType.Substring(1));
                    }
                    catch
                    {
                        STFException.TraceWarning(stf, "Skipped unknown engine type " + engineType);
                    }
                    break;

                case "engine(enginecontrollers(throttle": ThrottleController = new MSTSNotchController(stf); break;
                case "engine(enginecontrollers(regulator": ThrottleController = new MSTSNotchController(stf); break;
                case "engine(enginecontrollers(brake_dynamic": DynamicBrakeController.Parse(stf); break;

                case "engine(trainbrakescontrollermaxsystempressure":
                case "engine(ortstrainbrakescontrollermaxoverchargepressure":
                case "engine(trainbrakescontrollermaxreleaserate":
                case "engine(trainbrakescontrollermaxquickreleaserate":
                case "engine(ortstrainbrakescontrolleroverchargeeliminationrate":
                case "engine(trainbrakescontrollermaxapplicationrate":
                case "engine(trainbrakescontrolleremergencyapplicationrate":
                case "engine(trainbrakescontrollerfullservicepressuredrop":
                case "engine(trainbrakescontrollerminpressurereduction":
                case "engine(ortstrainbrakescontrollerslowapplicationrate":
                case "engine(ortstrainbrakecontroller":
                case "engine(enginecontrollers(brake_train":
                    TrainBrakeController.Parse(lowercasetoken, stf);
                    TrainBrakeFitted = true;
                    break;
                case "engine(enginecontrollers(ortsfastvacuumexhauster": FastVacuumExhausterFitted = true; break;
                case "engine(enginebrakescontrollermaxsystempressure":
                case "engine(enginebrakescontrollermaxreleaserate":
                case "engine(enginebrakescontrollermaxquickreleaserate":
                case "engine(enginebrakescontrollermaxapplicationrate":
                case "engine(enginebrakescontrolleremergencyapplicationrate":
                case "engine(enginebrakescontrollerfullservicepressuredrop":
                case "engine(enginebrakescontrollerminpressurereduction":
                case "engine(ortsenginebrakescontrollerslowapplicationrate":
                case "engine(enginecontrollers(brake_engine":
                case "engine(ortsenginebrakecontroller":
                    EngineBrakeController.Parse(lowercasetoken, stf);
                    EngineBrakeFitted = true;
                    break;
                case "engine(enginecontrollers(brake_brakeman":
                    BrakemanBrakeController.Parse(lowercasetoken, stf);
                    BrakemanBrakeFitted = true;
                    break;
                case "engine(ortstraincontrolsystem":
                case "engine(ortstraincontrolsystemsound":
                case "engine(ortstraincontrolsystemparameters":
                case "engine(vigilancemonitor":
                case "engine(emergencystopmonitor":
                case "engine(awsmonitor":
                case "engine(overspeedmonitor": VigilanceMonitor = true; TrainControlSystem.Parse(lowercasetoken, stf); break;
                case "engine(enginecontrollers(combined_control": ParseCombData(lowercasetoken, stf); break;
                case "engine(airbrakesmainresvolume": MainResVolumeM3 = Me3.FromFt3(stf.ReadFloatBlock(STFReader.UNITS.VolumeDefaultFT3, null)); break;
                case "engine(airbrakesmainmaxairpressure": MainResPressurePSI = MaxMainResPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(airbrakescompressorrestartpressure": CompressorRestartPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;                
                case "engine(airbrakesaircompressorpowerrating": CompressorChargingRateM3pS = Me3.FromFt3(stf.ReadFloatBlock(STFReader.UNITS.VolumeDefaultFT3, null)); break;                
                case "engine(trainpipeleakrate": TrainBrakePipeLeakPSIorInHgpS = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(vacuumbrakesvacuumpumpresistance": VacuumPumpResistanceN = stf.ReadFloatBlock(STFReader.UNITS.Force, null); break;

                case "engine(ortsvacuumbrakesmainresvolume": VacuumBrakesMainResVolumeM3 = Me3.FromFt3(stf.ReadFloatBlock(STFReader.UNITS.VolumeDefaultFT3, null)); break;
                case "engine(ortsvacuumbrakesmainresmaxvacuum": VacuumBrakesMainResMaxVacuumPSIAorInHg = OneAtmospherePSI - stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break; // convert to PSIA for vacuum brakes
                case "engine(ortsvacuumbrakesexhausterrestartvacuum": VacuumBrakesExhausterRestartVacuumPSIAorInHg = OneAtmospherePSI - stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break; // convert to PSIA for vacuum brakes
                case "engine(ortsvacuumbrakesmainreschargingrate": VacuumBrakesMainResChargingRatePSIAorInHgpS = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;

                case "engine(ortsmainreschargingrate": MainResChargingRatePSIpS = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(ortsenginebrakereleaserate": EngineBrakeReleaseRatePSIpS = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(ortsenginebrakeapplicationrate": EngineBrakeApplyRatePSIpS = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(ortsbrakepipetimefactor": BrakePipeTimeFactorS = stf.ReadFloatBlock(STFReader.UNITS.Time, null); break;
                case "engine(ortsbrakeservicetimefactor": BrakeServiceTimeFactorS = stf.ReadFloatBlock(STFReader.UNITS.Time, null); break;
                case "engine(ortsbrakeemergencytimefactor": BrakeEmergencyTimeFactorS = stf.ReadFloatBlock(STFReader.UNITS.Time, null); break;
                case "engine(ortsbrakepipechargingrate": BrakePipeChargingRatePSIorInHgpS = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(ortsbrakepipequickchargingrate": BrakePipeQuickChargingRatePSIpS = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(ortsbrakepipedischargetimemult": BrakePipeDischargeTimeFactor = stf.ReadFloatBlock(STFReader.UNITS.None, null); break;
                case "engine(ortsmaxtractiveforcecurves": TractiveForceCurves = new InterpolatorDiesel2D(stf, false); TractiveForceCurves.HasNegativeValue();  break;
                case "engine(ortstractioncharacteristics": TractiveForceCurves = new InterpolatorDiesel2D(stf, true); break;
                case "engine(ortsdynamicbrakeforcecurves": DynamicBrakeForceCurves = new InterpolatorDiesel2D(stf, false); break;
                case "engine(ortsextendedexcitationcurrent": ExtendedExcitationCurrent = new InterpolatorDiesel2D(stf, true); break;
                case "engine(ortsextendedarmcurrent": ExtendedArmCurrent = new InterpolatorDiesel2D(stf, true); break;
                case "engine(ortsextendededbextcurrent": ExtendedExcitationEDBCurrent = new InterpolatorDiesel2D(stf, true); break;
                case "engine(ortsextendededbarmcurrent": ExtendedArmEDBCurrent = new InterpolatorDiesel2D(stf, true); break;
                case "engine(ortscontinuousforcetimefactor": ContinuousForceTimeFactor = stf.ReadFloatBlock(STFReader.UNITS.None, null); break;
                case "engine(orts(ortssanderspeedeffectupto": SanderSpeedEffectUpToMpS = stf.ReadFloatBlock(STFReader.UNITS.Speed, null); break;
                case "engine(orts(ortsemergencycausespowerdown": EmergencyCausesPowerDown = stf.ReadBoolBlock(false); break;
                case "engine(orts(ortsemergencycausesthrottledown": EmergencyCausesThrottleDown = stf.ReadBoolBlock(false); break;
                case "engine(orts(ortsemergencyengageshorn": EmergencyEngagesHorn = stf.ReadBoolBlock(false); break;
                case "engine(orts(ortswheelslipcausesthrottledown": WheelslipCausesThrottleDown = stf.ReadBoolBlock(false); break;
                case "engine(dynamicbrakesminusablespeed": DynamicBrakeSpeed1MpS = stf.ReadFloatBlock(STFReader.UNITS.SpeedDefaultMPH, null); break;
                case "engine(dynamicbrakesfadingspeed": DynamicBrakeSpeed2MpS = stf.ReadFloatBlock(STFReader.UNITS.SpeedDefaultMPH, null); break;
                case "engine(dynamicbrakesmaximumeffectivespeed": DynamicBrakeSpeed3MpS = stf.ReadFloatBlock(STFReader.UNITS.SpeedDefaultMPH, null); break;
                case "engine(dynamicbrakesmaximumspeedforfadeout": DynamicBrakeSpeed4MpS = stf.ReadFloatBlock(STFReader.UNITS.SpeedDefaultMPH, null); break;
                case "engine(dynamicbrakeseffectatmaximumfadeout": DynamicBrakeRatioAtSpeed4 = stf.ReadFloatBlock(STFReader.UNITS.None, null); break;
                case "engine(dynamicbrakesmaximumforce": MaxDynamicBrakeForceN = stf.ReadFloatBlock(STFReader.UNITS.Force, null); break;
                case "engine(dynamicbrakehasautobailoff":
                case "engine(ortsdynamicbrakeshasautobailoff": DynamicBrakeAutoBailOff = stf.ReadBoolBlock(true); break;
                case "engine(dynamicbrakesdelaytimebeforeengaging": DynamicBrakeDelayS = stf.ReadFloatBlock(STFReader.UNITS.Time, null); break;
                case "engine(dynamicbrakesresistorcurrentlimit": DynamicBrakeMaxCurrentA = stf.ReadFloatBlock(STFReader.UNITS.Current, null); break;
                case "engine(numwheels": MSTSLocoNumDrvWheels = stf.ReadFloatBlock(STFReader.UNITS.None, 4.0f); if (MSTSLocoNumDrvWheels < 1) STFException.TraceWarning(stf, "Engine:NumWheels is less than 1, parts of the simulation may not function correctly"); break;
                case "engine(ortsnumberdriveaxles": LocoNumDrvAxles = stf.ReadIntBlock(null); if (LocoNumDrvAxles < 1) STFException.TraceWarning(stf, "Engine:ORTSNumberDriveAxles is less than 1, parts of the simulation may not function correctly"); break;
                case "engine(antislip": AntiSlip = stf.ReadBoolBlock(false); break;
                case "engine(ortsdrivewheelweight": InitialDrvWheelWeightKg = stf.ReadFloatBlock(STFReader.UNITS.Mass, null); break;
                case "engine(engineoperatingprocedures": EngineOperatingProcedures = stf.ReadStringBlock(""); break;
                case "engine(headout":
                    HeadOutViewpoints.Add(new ViewPoint(stf.ReadVector3Block(STFReader.UNITS.Distance, Vector3.Zero)));
                    HeadOutViewpoints.Add(new ViewPoint(HeadOutViewpoints[0], true));
                    break;
                case "engine(sanding": SanderSpeedOfMpS = stf.ReadFloatBlock(STFReader.UNITS.Speed, 30.0f); break;
                case "engine(ortsdoesvacuumbrakecutpower": DoesVacuumBrakeCutPower = stf.ReadBoolBlock(false); break;
                case "engine(doesbrakecutpower": DoesBrakeCutPower = stf.ReadBoolBlock(false); break;
                case "engine(brakecutspoweratbrakecylinderpressure": BrakeCutsPowerAtBrakeCylinderPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(ortsbrakecutspoweratbrakepipepressure": BrakeCutsPowerAtBrakePipePressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(ortsbrakerestorespoweratbrakepipepressure": BrakeRestoresPowerAtBrakePipePressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(doeshorntriggerbell": DoesHornTriggerBell = stf.ReadBoolBlock(false); break;
                case "engine(brakesenginecontrollers":
                    foreach (var brakesenginecontrollers in stf.ReadStringBlock("").ToLower().Replace(" ", "").Split(','))
                    {
                        if (EngineType == EngineTypes.Electric || EngineType == EngineTypes.Diesel)
                        {
                            switch (brakesenginecontrollers)
                            {
                                case "blended":                              
                                    DynamicBrakeBlendingEnabled = true;
                                    break;
                                case "dynamic":
                                    DynamicBrakeAvailable = true;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    break;

                case "engine(brakestrainbraketype":
                    foreach (var brakestrainbraketype in stf.ReadStringBlock("").ToLower().Replace(" ", "").Split(','))
                    {
                        switch (brakestrainbraketype)
                            {
                                case "vacuum_single_pipe_eq":
                                    VacuumBrakeEQFitted = true;
                                    break;
                                 default:
                                    break;
                            }
                    }
                    break;

                case "engine(brakesenginebraketype":
                    foreach (var brakesenginebraketype in stf.ReadStringBlock("").ToLower().Replace(" ", "").Split(','))
                    {
                        switch (brakesenginebraketype)
                        {
                            case "steam_brake":
                                SteamEngineBrakeFitted = true;
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case "engine(ortsdynamicblendingoverride": DynamicBrakeBlendingOverride = stf.ReadBoolBlock(false); break;
                case "engine(ortsdynamicblendingforcematch": DynamicBrakeBlendingForceMatch = stf.ReadBoolBlock(false); break;
                case "engine(vacuumbrakeshasvacuumpump": VacuumPumpFitted = stf.ReadBoolBlock(false); break;
                case "engine(enginecontrollers(ortssteamheat": SteamHeatController.Parse(stf); break;
                case "engine(name": stf.MustMatch("("); LocomotiveName = stf.ReadString(); break;
                case "engine(maxsteamheatingpressure": MaxSteamHeatPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(ortsonlinecabradio": OnLineCabRadio = stf.ReadBoolBlock(false); break;
                case "engine(ortsonlinecabradiourl": OnLineCabRadioURL = stf.ReadString(); break;
                case "engine(vacuumbrakesminboilerpressuremaxvacuum": MaxVaccuumMaxPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(enginecontrollers(waterscoop": HasWaterScoop = true; break;
                case "engine(ortswaterscoopfillelevation": WaterScoopFillElevationM = stf.ReadFloatBlock(STFReader.UNITS.Distance, 0.0f); break;
                case "engine(ortswaterscoopdepth": WaterScoopDepthM = stf.ReadFloatBlock(STFReader.UNITS.Distance, 0.0f); break;
                case "engine(ortswaterscoopwidth": WaterScoopWidthM = stf.ReadFloatBlock(STFReader.UNITS.Distance, 0.0f); break;
                case "engine(ortsmaxtracksanderboxcapacity": MaxTrackSandBoxCapacityM3 = stf.ReadFloatBlock(STFReader.UNITS.Volume, null); break;
                case "engine(ortsmaxtracksandersandconsumption": TrackSanderSandConsumptionM3pS = stf.ReadFloatBlock(STFReader.UNITS.Volume, null); break;
                case "engine(ortsmaxtracksanderairconsumption": TrackSanderAirComsumptionM3pS = stf.ReadFloatBlock(STFReader.UNITS.Volume, null); break;
                // Icik
                case "engine(adhesionefficiencykoef": AdhesionEfficiencyKoef = stf.ReadFloatBlock(STFReader.UNITS.None, null); break;
                case "engine(multisystemengine": MultiSystemEngine = MultiSystemEnginePlayer = stf.ReadBoolBlock(false); break;
                case "engine(maxcurrentpower": MaxCurrentPower = stf.ReadFloatBlock(STFReader.UNITS.Current, null); break;
                case "engine(maxcurrentbrake": MaxCurrentBrake = stf.ReadFloatBlock(STFReader.UNITS.Current, null); break;
                case "engine(slipspeedcritical": SlipSpeedCritical = stf.ReadFloatBlock(STFReader.UNITS.Speed, null); break;
                case "engine(edbindependent": EDBIndependent = stf.ReadBoolBlock(false); break;
                case "engine(doespowerlossresetcontrols": DoesPowerLossResetControls = stf.ReadBoolBlock(false); break;
                case "engine(airbrakesiscompressorelectricormechanical": AirBrakesIsCompressorElectricOrMechanical = stf.ReadBoolBlock(false); break;
                case "engine(airbrakesaircompressorwattage": AirBrakesAirCompressorWattage = stf.ReadFloatBlock(STFReader.UNITS.Power, null); break;
                case "engine(centralhandlingdoors": CentralHandlingDoors = stf.ReadBoolBlock(false); break;
                case "engine(voltagefilter": VoltageFilter = stf.ReadBoolBlock(false); break;
                case "engine(locomotivepowervoltage": EnableControlVoltageChange = false; LocomotivePowerVoltage = stf.ReadFloatBlock(STFReader.UNITS.Voltage, null); break;
                case "engine(maxpowerac": MaxPowerWAC = stf.ReadFloatBlock(STFReader.UNITS.Power, null); break;
                case "engine(maxforceac": MaxForceNAC = stf.ReadFloatBlock(STFReader.UNITS.Force, null); break;
                case "engine(maxpowerdc": MaxPowerWDC = stf.ReadFloatBlock(STFReader.UNITS.Power, null); break;
                case "engine(maxforcedc": MaxForceNDC = stf.ReadFloatBlock(STFReader.UNITS.Force, null); break;
                case "engine(ortstractioncharacteristicsac": TractiveForceCurvesAC = new InterpolatorDiesel2D(stf, true); break;
                case "engine(ortstractioncharacteristicsdc": TractiveForceCurvesDC = new InterpolatorDiesel2D(stf, true); break;
                case "engine(ortsdynamicbrakeforcecurvesac": DynamicBrakeForceCurvesAC = new InterpolatorDiesel2D(stf, false); break;
                case "engine(ortsdynamicbrakeforcecurvesdc": DynamicBrakeForceCurvesDC = new InterpolatorDiesel2D(stf, false); break;
                case "engine(ortsmainreschargingrate2": MainResChargingRatePSIpS_2 = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(ortsauxreschargingrate": AuxResChargingRatePSIpS = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(maxauxrespressure": MaxAuxResPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(auxresvolume": AuxResVolumeM3 = Me3.FromFt3(stf.ReadFloatBlock(STFReader.UNITS.VolumeDefaultFT3, null)); break;
                case "engine(auxcompressorrestartpressure": AuxCompressorRestartPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(minauxpressurepanto": MinAuxPressurePantoPSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(minauxpressurehv": MinAuxPressureHVPSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(pantoconsumptionvolume": PantoConsumptionVolumeM3 = Me3.FromFt3(stf.ReadFloatBlock(STFReader.UNITS.VolumeDefaultFT3, null)); break;
                case "engine(hvconsumptionvolumeon": HVConsumptionVolumeM3_On = Me3.FromFt3(stf.ReadFloatBlock(STFReader.UNITS.VolumeDefaultFT3, null)); break;
                case "engine(hvconsumptionvolumeoff": HVConsumptionVolumeM3_Off = Me3.FromFt3(stf.ReadFloatBlock(STFReader.UNITS.VolumeDefaultFT3, null)); break;
                case "engine(hvelectric": HVElectric = stf.ReadBoolBlock(false); break;
                case "engine(auxrespipeleak": AuxResPipeLeak = stf.ReadFloatBlock(STFReader.UNITS.PressureRateDefaultPSIpS, null); break;
                case "engine(maxmainresoverpressure": MaxMainResOverPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(maxauxresoverpressure": MaxAuxResOverPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, null); break;
                case "engine(heatingmaxcurrent": HeatingMaxCurrentA = stf.ReadFloatBlock(STFReader.UNITS.Current, null); break;                

                // Jindrich
                case "engine(batterydefaultoff": Battery = !stf.ReadBoolBlock(false); break;
                case "engine(throttlefullrangeincreasetimeseconds": ThrottleFullRangeIncreaseTimeSeconds = stf.ReadFloatBlock(STFReader.UNITS.Any, 5); break;
                case "engine(throttlefullrangedecreasetimeseconds": ThrottleFullRangeDecreaseTimeSeconds = stf.ReadFloatBlock(STFReader.UNITS.Any, 5); break;
                case "engine(dynamicbrakefullrangeincreasetimeseconds": DynamicBrakeFullRangeIncreaseTimeSeconds = stf.ReadFloatBlock(STFReader.UNITS.Any, 5); break;
                case "engine(dynamicbrakefullrangedecreasetimeseconds": DynamicBrakeFullRangeDecreaseTimeSeconds = stf.ReadFloatBlock(STFReader.UNITS.Any, 5); break;
                case "engine(acceleratingtobrakingchangetime": AcceleratingToBrakingChangeTime = stf.ReadFloatBlock(STFReader.UNITS.Any, 2); break;
                case "engine(maxcontrollervolts": MaxControllerVolts = stf.ReadFloatBlock(STFReader.UNITS.Any, 5); break;
                case "engine(ortscruisecontrol": SetUpCruiseControl(); break;
                case "engine(ortsmirel": SetUpMirel(); break;
                case "engine(ortsmirel(defaultmaxspeedkph": Mirel.MaxSelectedSpeed = stf.ReadFloatBlock(STFReader.UNITS.Speed, 80); break;
                case "engine(ortsmirel(lvztype":
                    {
                        String type = stf.ReadStringBlock(String.Empty).ToLower();
                        switch (type)
                        {
                            case "full":
                                {
                                    Mirel.MirelType = Mirel.Type.Full;
                                    break;
                                }
                            case "ls90":
                                {
                                    Mirel.MirelType = Mirel.Type.LS90;
                                    break;
                                }
                            default:
                                {
                                    Mirel.MirelType = Mirel.Type.Full;
                                    break;
                                }
                        }
                        break;
                    }
                case "engine(ortsmirel(noalertonrestrictedsignal": Mirel.NoAlertOnRestrictedSignal = stf.ReadBoolBlock(false); break;
                case "engine(ortsmultipositioncontroller": SetUpMPC(); break;
                case "engine(disablerestrictedspeedwhenmanualdriving": DisableRestrictedSpeedWhenManualDriving = stf.ReadBoolBlock(false); break;
                case "engine(ortsautomaticparkingbrake": AutomaticParkingBrake = true; break;
                case "engine(ortsautomaticparkingbrake(engagespeed": AutomaticParkingBrakeEngageSpeedKpH = stf.ReadFloatBlock(STFReader.UNITS.Speed, 0); break;
                case "engine(ortsautomaticparkingbrake(targetpressurepsi": ParkingBrakeTargetPressurePSI = stf.ReadFloatBlock(STFReader.UNITS.PressureDefaultPSI, 30); break;
                case "engine(antiwheelspinequipped": AntiWheelSpinEquipped = stf.ReadBoolBlock(false); break;
                case "engine(antiwheelspinspeeddiffthreshold": AntiWheelSpinSpeedDiffThreshold = stf.ReadFloatBlock(STFReader.UNITS.None, 0.5f); break;
                case "engine(dynamicbrakemaxforceatselectorstep": DynamicBrakeMaxForceAtSelectorStep = stf.ReadFloatBlock(STFReader.UNITS.Any, 1.0f); break;
                case "engine(defaultforcestep": SelectedMaxAccelerationStep = stf.ReadFloatBlock(STFReader.UNITS.Any, 1.0f); break;
                case "engine(stringarrays":
                    stf.MustMatch("(");
                    while (!stf.EndOfBlock())
                    {
                        stf.ParseBlock(new STFReader.TokenProcessor[] {
                        new STFReader.TokenProcessor("stringarray", ()=>{
                            stf.MustMatch("(");
                            int index = (int)stf.ReadFloatBlock(STFReader.UNITS.None, 0);
                            StrArray strArray = new StrArray();
                            foreach (var array in stf.ReadStringBlock("").Split(','))
                            {
                                int displayID = -1;
                                string updatedArray = "";
                                if (array.Contains("{") && array.Contains("}"))
                                {
                                    string[] behaviors = array.Split('{');
                                    updatedArray = behaviors[0];
                                    displayID = int.Parse(behaviors[1].Replace("}", ""));
            }
                                else
                                {
                                    updatedArray = array;
        }
                                if (strArray.Strings == null)
                                {
                                    strArray.Strings = new Dictionary<string, int>();
                                    strArray.Index = index;
                                }
                                else
                                {
                                    strArray.Index = index;
                                }
                                strArray.Strings.Add(updatedArray, displayID);
                            }
                            if (StringArray.StArray == null) StringArray.StArray = new List<StrArray>();
                            StringArray.StArray.Add(strArray);
                        }),
                        });
                    }
                    break;
                default:
                    base.Parse(lowercasetoken, stf);
                    // Jindrich
                    if (CruiseControl != null)
                        CruiseControl.Parse(lowercasetoken, stf);
                    if (MultiPositionController != null)
                        MultiPositionController.Parse(lowercasetoken, stf);
                    break;
            }
        }

        /// <summary>
        /// This initializer is called when we are making a new copy of a car already
        /// loaded in memory.  We use this one to speed up loading by eliminating the
        /// need to parse the wag file multiple times.
        /// </summary>
        public override void Copy(MSTSWagon copy)
        {
            base.Copy(copy);  // each derived level initializes its own variables

            MSTSLocomotive locoCopy = (MSTSLocomotive)copy;
            CabSoundFileName = locoCopy.CabSoundFileName;
            CVFFileName = locoCopy.CVFFileName;
            CabViewList = locoCopy.CabViewList;
            CabView3D = locoCopy.CabView3D;
            MaxPowerW = locoCopy.MaxPowerW;
            MaxForceN = locoCopy.MaxForceN;
            MaxCurrentA = locoCopy.MaxCurrentA;
            MaxSpeedMpS = locoCopy.MaxSpeedMpS;
            UnloadingSpeedMpS = locoCopy.UnloadingSpeedMpS;
            EngineType = locoCopy.EngineType;
            TractiveForceCurves = locoCopy.TractiveForceCurves;
            MaxContinuousForceN = locoCopy.MaxContinuousForceN;
            ExtendedExcitationCurrent = locoCopy.ExtendedExcitationCurrent;
            SpeedOfMaxContinuousForceMpS = locoCopy.SpeedOfMaxContinuousForceMpS;
            MSTSSpeedOfMaxContinuousForceMpS = locoCopy.MSTSSpeedOfMaxContinuousForceMpS;
            ContinuousForceTimeFactor = locoCopy.ContinuousForceTimeFactor;
            DynamicBrakeForceCurves = locoCopy.DynamicBrakeForceCurves;
            DynamicBrakeAutoBailOff = locoCopy.DynamicBrakeAutoBailOff;
            CombinedControlType = locoCopy.CombinedControlType;
            CombinedControlSplitPosition = locoCopy.CombinedControlSplitPosition;
            DynamicBrakeDelayS = locoCopy.DynamicBrakeDelayS;
            MaxDynamicBrakeForceN = locoCopy.MaxDynamicBrakeForceN;
            HasSmoothStruc = locoCopy.HasSmoothStruc;
            LocoNumDrvAxles = locoCopy.LocoNumDrvAxles;
            MSTSLocoNumDrvWheels = locoCopy.MSTSLocoNumDrvWheels;
            AntiSlip = locoCopy.AntiSlip;
            VacuumPumpFitted = locoCopy.VacuumPumpFitted;
            FastVacuumExhausterFitted = locoCopy.FastVacuumExhausterFitted;
            DrvWheelWeightKg = locoCopy.DrvWheelWeightKg;
            InitialDrvWheelWeightKg = locoCopy.InitialDrvWheelWeightKg;
            SanderSpeedEffectUpToMpS = locoCopy.SanderSpeedEffectUpToMpS;
            SanderSpeedOfMpS = locoCopy.SanderSpeedOfMpS;
            MaxTrackSandBoxCapacityM3 = locoCopy.MaxTrackSandBoxCapacityM3;
            TrackSanderSandConsumptionM3pS = locoCopy.TrackSanderSandConsumptionM3pS;
            TrackSanderAirComsumptionM3pS = locoCopy.TrackSanderAirComsumptionM3pS;
            PowerOnDelayS = locoCopy.PowerOnDelayS;
            DoesHornTriggerBell = locoCopy.DoesHornTriggerBell;
            MaxSteamHeatPressurePSI = locoCopy.MaxSteamHeatPressurePSI;
            VacuumPumpResistanceN = locoCopy.VacuumPumpResistanceN;
            VacuumBrakesMainResVolumeM3 = locoCopy.VacuumBrakesMainResVolumeM3;
            VacuumBrakesMainResMaxVacuumPSIAorInHg = locoCopy.VacuumBrakesMainResMaxVacuumPSIAorInHg;
            VacuumBrakesExhausterRestartVacuumPSIAorInHg = locoCopy.VacuumBrakesExhausterRestartVacuumPSIAorInHg;
            VacuumBrakesMainResChargingRatePSIAorInHgpS = locoCopy.VacuumBrakesMainResChargingRatePSIAorInHgpS;

            EmergencyCausesPowerDown = locoCopy.EmergencyCausesPowerDown;
            EmergencyCausesThrottleDown = locoCopy.EmergencyCausesThrottleDown;
            EmergencyEngagesHorn = locoCopy.EmergencyEngagesHorn;

            WheelslipCausesThrottleDown = locoCopy.WheelslipCausesThrottleDown;

            CompressorRestartPressurePSI = locoCopy.CompressorRestartPressurePSI;
            TrainBrakePipeLeakPSIorInHgpS = locoCopy.TrainBrakePipeLeakPSIorInHgpS;
            MaxMainResPressurePSI = locoCopy.MaxMainResPressurePSI;
            MainResPressurePSI = MaxMainResPressurePSI;
            MainResVolumeM3 = locoCopy.MainResVolumeM3;
            MainResChargingRatePSIpS = locoCopy.MainResChargingRatePSIpS;
            BrakePipeDischargeTimeFactor = locoCopy.BrakePipeDischargeTimeFactor;

            DynamicBrakeBlended = locoCopy.DynamicBrakeBlended;
            DynamicBrakeBlendingEnabled = locoCopy.DynamicBrakeBlendingEnabled;
            airPipeSystem = locoCopy.airPipeSystem;
            DynamicBrakeCommandStartTime = locoCopy.DynamicBrakeCommandStartTime;
            DynamicBrakeBlendingOverride = locoCopy.DynamicBrakeBlendingOverride;
            DynamicBrakeBlendingForceMatch = locoCopy.DynamicBrakeBlendingForceMatch;

            MainPressureUnit = locoCopy.MainPressureUnit;
            BrakeSystemPressureUnits = locoCopy.BrakeSystemPressureUnits;
            IsDriveable = copy.IsDriveable;
            //ThrottleController = MSTSEngineController.Copy(locoCopy.ThrottleController);
            ThrottleController = (MSTSNotchController)locoCopy.ThrottleController.Clone();
            SteamHeatController = (MSTSNotchController)locoCopy.SteamHeatController.Clone();
            TrainBrakeController = locoCopy.TrainBrakeController.Clone(this);
            EngineBrakeController = locoCopy.EngineBrakeController != null ? locoCopy.EngineBrakeController.Clone(this) : null;
            BrakemanBrakeController = locoCopy.BrakemanBrakeController != null ? locoCopy.BrakemanBrakeController.Clone(this) : null;
            DynamicBrakeController = locoCopy.DynamicBrakeController != null ? (MSTSNotchController)locoCopy.DynamicBrakeController.Clone() : null;
            TrainControlSystem.Copy(locoCopy.TrainControlSystem);
            LocomotiveName = locoCopy.LocomotiveName;
            MaxVaccuumMaxPressurePSI = locoCopy.MaxVaccuumMaxPressurePSI;
            VacuumBrakeEQFitted = locoCopy.VacuumBrakeEQFitted;
            TrainBrakeFitted = locoCopy.TrainBrakeFitted;
            EngineBrakeFitted = locoCopy.EngineBrakeFitted;
            BrakemanBrakeFitted = locoCopy.BrakemanBrakeFitted;
            SteamEngineBrakeFitted = locoCopy.SteamEngineBrakeFitted;
            HasWaterScoop = locoCopy.HasWaterScoop;
            WaterScoopFillElevationM = locoCopy.WaterScoopFillElevationM;
            WaterScoopDepthM = locoCopy.WaterScoopDepthM;
            WaterScoopWidthM = locoCopy.WaterScoopWidthM;
            MoveParamsToAxle();

            // Icik
            AdhesionEfficiencyKoef = locoCopy.AdhesionEfficiencyKoef;
            MultiSystemEngine = locoCopy.MultiSystemEngine;
            MultiSystemEnginePlayer = locoCopy.MultiSystemEnginePlayer;
            MaxCurrentPower = locoCopy.MaxCurrentPower;
            MaxCurrentBrake = locoCopy.MaxCurrentBrake;
            SlipSpeedCritical = locoCopy.SlipSpeedCritical;
            EDBIndependent = locoCopy.EDBIndependent;
            DoesPowerLossResetControls = locoCopy.DoesPowerLossResetControls;
            EngineBrakeEngageEDB = locoCopy.EngineBrakeEngageEDB;
            SwitchingVoltageMode = locoCopy.SwitchingVoltageMode;            
            PowerReductionByAuxEquipment = locoCopy.PowerReductionByAuxEquipment;
            AirBrakesIsCompressorElectricOrMechanical = locoCopy.AirBrakesIsCompressorElectricOrMechanical;
            AirBrakesAirCompressorWattage = locoCopy.AirBrakesAirCompressorWattage;
            CentralHandlingDoors = locoCopy.CentralHandlingDoors;
            VoltageFilter = locoCopy.VoltageFilter;            
            LocomotivePowerVoltage = locoCopy.LocomotivePowerVoltage;
            TractiveForceCurvesAC = locoCopy.TractiveForceCurvesAC;
            TractiveForceCurvesDC = locoCopy.TractiveForceCurvesDC;
            DynamicBrakeForceCurvesAC = locoCopy.DynamicBrakeForceCurvesAC;
            DynamicBrakeForceCurvesDC = locoCopy.DynamicBrakeForceCurvesDC;
            MainResChargingRatePSIpS_2 = locoCopy.MainResChargingRatePSIpS_2;
            AuxResChargingRatePSIpS = locoCopy.AuxResChargingRatePSIpS;
            MaxAuxResPressurePSI = locoCopy.MaxAuxResPressurePSI;
            AuxResVolumeM3 = locoCopy.AuxResVolumeM3;
            AuxCompressorRestartPressurePSI = locoCopy.AuxCompressorRestartPressurePSI;
            MinAuxPressurePantoPSI = locoCopy.MinAuxPressurePantoPSI;
            MinAuxPressureHVPSI = locoCopy.MinAuxPressureHVPSI;
            PantoConsumptionVolumeM3 = locoCopy.PantoConsumptionVolumeM3;
            HVConsumptionVolumeM3_On = locoCopy.HVConsumptionVolumeM3_On;
            HVConsumptionVolumeM3_Off = locoCopy.HVConsumptionVolumeM3_Off;
            HVElectric = locoCopy.HVElectric;
            AuxResPipeLeak = locoCopy.AuxResPipeLeak;
            MaxMainResOverPressurePSI = locoCopy.MaxMainResOverPressurePSI;
            MaxAuxResOverPressurePSI = locoCopy.MaxAuxResOverPressurePSI;
            HeatingMaxCurrentA = locoCopy.HeatingMaxCurrentA;

            // Jindrich
            if (locoCopy.CruiseControl != null)
                CruiseControl = locoCopy.CruiseControl;
            if (locoCopy.Mirel != null)
                Mirel = locoCopy.Mirel;
        }

        public void ActiveStationIncrease()
        {
            if (!Mirel.Equipped) return;
            SignalEvent(Event.ActiveCabSelectorChange);
            if (ActiveStation == DriverStation.None && !UsingRearCab)
                ActiveStation = DriverStation.Station1;
            else if (ActiveStation == DriverStation.None && UsingRearCab)
                ActiveStation = DriverStation.Station2;

            switch (ActiveStation)
            {
                case DriverStation.None:
                    {
                        Simulator.Confirmer.Information("No active cab selected");
                        PowerKey = false;
                        break;
                    }
                case DriverStation.Station1:
                    {
                        PowerKey = true;
                        Simulator.Confirmer.Information("Cab 1 selected");
                        break;
                    }
                case DriverStation.Station2:
                    {
                        PowerKey = true;
                        Simulator.Confirmer.Information("Cab 2 selected");
                        break;
                    }
            }
        }
        public void ActiveStationDecrease()
        {
            if (!Mirel.Equipped) return;
            SignalEvent(Event.ActiveCabSelectorChange);
            ActiveStation = DriverStation.None;

            switch (ActiveStation)
            {
                case DriverStation.None:
                    {
                        Simulator.Confirmer.Information("No active cab selected");
                        PowerKey = false;
                        break;
                    }
                case DriverStation.Station1:
                    {
                        Simulator.Confirmer.Information("Cab 1 selected");
                        PowerKey = true;
                        break;
                    }
                case DriverStation.Station2:
                    {
                        Simulator.Confirmer.Information("Cab 2 selected");
                        PowerKey = true;
                        break;
                    }
            }
        }

        /// <summary>
        /// We are moving parameters from locomotive to axle. 
        /// </summary>
        public void MoveParamsToAxle()
        {
            if (LocomotiveAxle != null)
            {
                LocomotiveAxle.SlipWarningTresholdPercent = SlipWarningThresholdPercent;
                LocomotiveAxle.AdhesionK = AdhesionK;
                LocomotiveAxle.CurtiusKnifflerA = Curtius_KnifflerA;
                LocomotiveAxle.CurtiusKnifflerB = Curtius_KnifflerB;
                LocomotiveAxle.CurtiusKnifflerC = Curtius_KnifflerC;
            }
        }

        /// <summary>
        /// We are saving the game.  Save anything that we'll need to restore the 
        /// status later.
        /// </summary>
        public override void Save(BinaryWriter outf)
        {
            // we won't save the horn state
            outf.Write(Bell);
            outf.Write(Sander);
            outf.Write(VacuumExhausterPressed);
            outf.Write(Wiper);
            outf.Write(OdometerResetPositionM);
            outf.Write(OdometerCountingUp);
            outf.Write(OdometerCountingForwards);
            outf.Write(OdometerVisible);
            outf.Write(MainResPressurePSI);
            outf.Write(CompressorIsOn);
            outf.Write(VacuumMainResVacuumPSIAorInHg);
            outf.Write(VacuumExhausterIsOn);
            outf.Write(TrainBrakePipeLeakPSIorInHgpS);
            outf.Write(AverageForceN);
            outf.Write(LocomotiveAxle.AxleSpeedMpS);
            outf.Write(CabLightOn);
            outf.Write(UsingRearCab);
            outf.Write(CalculatedCarHeaterSteamUsageLBpS);
            ControllerFactory.Save(ThrottleController, outf);
            ControllerFactory.Save(TrainBrakeController, outf);
            ControllerFactory.Save(EngineBrakeController, outf);
            ControllerFactory.Save(BrakemanBrakeController, outf);
            ControllerFactory.Save(DynamicBrakeController, outf);
            ControllerFactory.Save(SteamHeatController, outf);
            outf.Write(AcceptMUSignals);
            outf.Write(PowerReduction);
            outf.Write(Battery);
            outf.Write(PowerKey);
            outf.Write(ScoopIsBroken);
            outf.Write(IsWaterScoopDown);
            outf.Write(CurrentTrackSandBoxCapacityM3);
            outf.Write(SpeedMpS);
            outf.Write(_SpeedMpS);
            outf.Write(WheelSpeedMpS);
            outf.Write(AbsSpeedMpS);
            outf.Write(AbsTractionSpeedMpS);
            outf.Write(AbsWheelSpeedMpS);
            // Icik
            outf.Write(HVOffStatusBrakeCyl);
            outf.Write(HVOffStatusBrakePipe);
            outf.Write(AuxCompressorMode_OffOn);
            outf.Write(CompressorMode_OffAuto);
            outf.Write(CompressorMode2_OffAuto);
            outf.Write(EngineBrakeEngageEDB);
            outf.Write(Heating_OffOn);
            outf.Write(SwitchingVoltageMode_OffAC);
            outf.Write(SwitchingVoltageMode_OffDC);
            outf.Write(SwitchingVoltageMode);
            outf.Write(TElevatedConsumption);
            outf.Write(Compressor2IsOn);
            outf.Write(AuxCompressorIsOn);
            outf.Write(AuxResPressurePSI);
            outf.Write(CompressorSwitch);
            outf.Write(Compressor_I_HandMode);
            outf.Write(CompressorSwitch2);
            outf.Write(Compressor_II_HandMode);
            outf.Write(MainResOverPressure);
            outf.Write(AuxResOverPressure);
            outf.Write(Pantograph4Switch);
            outf.Write(HV5Switch);
            outf.Write(BreakPowerButton_Activated);
            outf.Write(MultiSystemEngine);
            outf.Write(LocomotivePowerVoltage);

            base.Save(outf);

            TrainControlSystem.Save(outf);
            LocomotiveAxle.Save(outf);
            if (CruiseControl != null)
                CruiseControl.Save(outf);
            if (Mirel != null)
                Mirel.Save(outf);
            outf.Write((int)ActiveStation);
            if (extendedPhysics != null)
                extendedPhysics.Save(outf);
            Mirel.Save(outf);
            if (MultiPositionControllers != null)
            {
                if (MultiPositionControllers.Count > 0)
                {
                    foreach (MultiPositionController mpc in MultiPositionControllers)
                        mpc.Save(outf);
                }
            }
            outf.Write(ControllerVolts);
        }

        /// <summary>
        /// We are restoring a saved game.  The TrainCar class has already
        /// been initialized.   Restore the game state.
        /// </summary>
        protected bool wasRestored = false;
        public override void Restore(BinaryReader inf)
        {
            wasRestored = true;
            if (inf.ReadBoolean()) SignalEvent(Event.BellOn);
            if (inf.ReadBoolean()) SignalEvent(Event.SanderOn);
            if (inf.ReadBoolean()) SignalEvent(Event.VacuumExhausterOn);
            if (inf.ReadBoolean()) SignalEvent(Event.WiperOn);
            OdometerResetPositionM = inf.ReadSingle();
            OdometerCountingUp = inf.ReadBoolean();
            OdometerCountingForwards = inf.ReadBoolean();
            OdometerVisible = inf.ReadBoolean();
            MainResPressurePSI = inf.ReadSingle();
            CompressorIsOn = inf.ReadBoolean();
            VacuumMainResVacuumPSIAorInHg = inf.ReadSingle();
            VacuumExhausterIsOn = inf.ReadBoolean();
            TrainBrakePipeLeakPSIorInHgpS = inf.ReadSingle();
            AverageForceN = inf.ReadSingle();
            LocomotiveAxle.Reset(Simulator.GameTime, inf.ReadSingle());
            CabLightOn = inf.ReadBoolean();
            UsingRearCab = inf.ReadBoolean();
            CalculatedCarHeaterSteamUsageLBpS = inf.ReadSingle();
            ControllerFactory.Restore(ThrottleController, inf);
            ControllerFactory.Restore(TrainBrakeController, inf);
            ControllerFactory.Restore(EngineBrakeController, inf);
            ControllerFactory.Restore(BrakemanBrakeController, inf);
            ControllerFactory.Restore(DynamicBrakeController, inf);
            ControllerFactory.Restore(SteamHeatController, inf);
            AcceptMUSignals = inf.ReadBoolean();
            PowerReduction = inf.ReadSingle();
            Battery = inf.ReadBoolean();
            PowerKey = inf.ReadBoolean();
            ScoopIsBroken = inf.ReadBoolean();
            IsWaterScoopDown = inf.ReadBoolean();
            CurrentTrackSandBoxCapacityM3 = inf.ReadSingle();

            AdhesionFilter.Reset(0.5f);

            SpeedMpS = inf.ReadSingle();
            _SpeedMpS = inf.ReadSingle();
            WheelSpeedMpS = inf.ReadSingle();
            AbsSpeedMpS = inf.ReadSingle();
            AbsTractionSpeedMpS = inf.ReadSingle();
            AbsWheelSpeedMpS = inf.ReadSingle();

            // Icik
            HVOffStatusBrakeCyl = inf.ReadBoolean();
            HVOffStatusBrakePipe = inf.ReadBoolean();
            AuxCompressorMode_OffOn = inf.ReadBoolean();
            CompressorMode_OffAuto = inf.ReadBoolean();
            CompressorMode2_OffAuto = inf.ReadBoolean();
            EngineBrakeEngageEDB = inf.ReadBoolean();
            Heating_OffOn = inf.ReadBoolean();
            SwitchingVoltageMode_OffAC = inf.ReadBoolean();
            SwitchingVoltageMode_OffDC = inf.ReadBoolean();
            SwitchingVoltageMode = inf.ReadInt32();
            TElevatedConsumption = inf.ReadSingle();
            Compressor2IsOn = inf.ReadBoolean();
            AuxCompressorIsOn = inf.ReadBoolean();
            AuxResPressurePSI = inf.ReadSingle();
            CompressorSwitch = inf.ReadSingle();
            Compressor_I_HandMode = inf.ReadBoolean();
            CompressorSwitch2 = inf.ReadSingle();
            Compressor_II_HandMode = inf.ReadBoolean();
            MainResOverPressure = inf.ReadBoolean();
            AuxResOverPressure = inf.ReadBoolean();
            Pantograph4Switch = inf.ReadSingle();
            HV5Switch = inf.ReadSingle();
            BreakPowerButton_Activated = inf.ReadBoolean();
            MultiSystemEngine = inf.ReadBoolean();
            LocomotivePowerVoltage = inf.ReadSingle();

            base.Restore(inf);

            TrainControlSystem.Restore(inf);
            LocomotiveAxle = new Axle(inf);

            // Jindrich
            if (CruiseControl != null)
                CruiseControl.Restore(inf);
            if (Mirel != null)
                Mirel.Restore(inf);
            int fActiveStation = inf.ReadInt32();
            ActiveStation = (DriverStation)fActiveStation;
            if (File.Exists(WagFilePath + ".ExtendedPhysics.xml"))
            {
                extendedPhysics = new ExtendedPhysics(this);
                extendedPhysics.Parse(WagFilePath + ".ExtendedPhysics.xml");
                extendedPhysics.Restore(inf);
            }
            Mirel.Restore(inf);
            if (MultiPositionControllers != null)
            {
                if (MultiPositionControllers.Count > 0)
                {
                    foreach (MultiPositionController mpc in MultiPositionControllers)
                        mpc.Restore(inf);
                }
            }
            ControllerVolts = inf.ReadSingle();
        }

        public bool IsLeadLocomotive()
        {
            return Train.LeadLocomotive == this;
        }

        protected void ParseCombData(string lowercasetoken, STFReader stf)
        {
            var throttle = false;
            var train = false;
            var dynamic = false;
            var independent = false;

            stf.MustMatch("(");
            var minValue = stf.ReadFloat(STFReader.UNITS.None, 0);
            var maxValue = stf.ReadFloat(STFReader.UNITS.None, 1);
            var split = stf.ReadFloat(STFReader.UNITS.None, 0.5f);
            var defaultValue = stf.ReadFloat(STFReader.UNITS.None, 0.5f);

            string s;
            while ((s = stf.ReadItem()) != ")")
            {
                throttle |= s == "throttle";
                train |= s == "train";
                dynamic |= s == "dynamic";
                independent |= s == "independent";
            }

            CombinedControlSplitPosition = (split - minValue) / (maxValue - minValue);

            if (throttle && dynamic && train)
                CombinedControlType = CombinedControl.ThrottleDynamicAir;
            else if (throttle && train)
                CombinedControlType = CombinedControl.ThrottleAir;
            else if (throttle && dynamic)
                CombinedControlType = CombinedControl.ThrottleDynamic;
            else if (dynamic && train)
                CombinedControlType = CombinedControl.DynamicAir;

            if (train && !TrainBrakeController.IsValid())
                TrainBrakeController = new ScriptedBrakeController(this);
            if (dynamic && !DynamicBrakeController.IsValid())
                DynamicBrakeController = new MSTSNotchController(0, 1, .05f);
            if (dynamic)
                DynamicBrake = true;
        }

        /// <summary>
        /// Sets controler settings from other engine for cab switch
        /// </summary>
        /// <param name="other"></param>
        public override void CopyControllerSettings(TrainCar other)
        {
            base.CopyControllerSettings(other);
            if (ThrottleController != null)
                ThrottleController.SetValue(other.ThrottlePercent / 100);
            if (DynamicBrakeController != null)
                DynamicBrakeController.SetValue(other.DynamicBrakePercent / 100);
            if (TrainBrakeController != null)
                TrainBrakeController.SetValue(((MSTSLocomotive)other).TrainBrakeController.CurrentValue);
            if (EngineBrakeController != null)
                EngineBrakeController.SetValue(0);
            if (BrakemanBrakeController != null)
                BrakemanBrakeController.SetValue(0);
        }

        public bool controlUpdated;
        public bool notificationReceived;
        /// <summary>
        /// Called just after the InitializeFromWagFile
        /// </summary>
        public override void Initialize()
        {
            // Jindřich - napaječky a voltage markery
            Simulator.powerSupplyStations = new List<PowerSupplyStation>();
            SetUpPowerSupplyStations();
            Simulator.voltageChangeMarkers = new List<VoltageChangeMarker>();
            SetUpVoltageChangeMarkers();            

            // Icik            
            SetDefault_AuxCompressor();
            MainResChargingRatePSIpS0 = MainResChargingRatePSIpS;           
            if (!Compressor_I && !Compressor_II)
                Compressor_I = true;
            if (Compressor_I && Compressor_II && MainResChargingRatePSIpS_2 == 0)
            {
                MainResChargingRatePSIpS0 = MainResChargingRatePSIpS / 2;
                MainResChargingRatePSIpS = MainResChargingRatePSIpS0;
            }
            if (MainResChargingRatePSIpS_2 == 0)
                MainResChargingRatePSIpS_2 = MainResChargingRatePSIpS;
            


            if (File.Exists(WagFilePath + ".ExtendedPhysics.xml") && extendedPhysics == null)
            {
                extendedPhysics = new ExtendedPhysics(this);
                extendedPhysics.Parse(WagFilePath + ".ExtendedPhysics.xml");
            }
            TrainBrakeController.Initialize();
            EngineBrakeController.Initialize();
            BrakemanBrakeController.Initialize();
            TrainControlSystem.Initialize();

            DynamicBrakeChangeActiveState(false);

            if (MaxSteamHeatPressurePSI == 0)       // Check to see if steam heating is fitted to locomotive
            {
                IsSteamHeatFitted = false;
            }
            else
            {
                IsSteamHeatFitted = true;
            }

            SteamHeatPressureToTemperaturePSItoF = SteamTable.SteamHeatPressureToTemperatureInterpolatorPSItoF();
            SteamDensityPSItoLBpFT3 = SteamTable.SteamDensityInterpolatorPSItoLBpFT3();
            SteamHeatPSItoBTUpLB = SteamTable.SteamHeatInterpolatorPSItoBTUpLB();

            // Check to see if water scoop elements have been configured
            if (WaterScoopFillElevationM == 0)
            {
                WaterScoopFillElevationM = 2.7432f; // Set to default of 9 ft
            } 

            if (WaterScoopDepthM == 0)
            {
                WaterScoopDepthM = 0.0889f; // Set to default of 3.5 ins
            }

            if (WaterScoopWidthM == 0)
            {
                WaterScoopWidthM = 0.3048f; // Set to default of 1 ft
            }

            // Check if current sander has been set
            if (CurrentTrackSandBoxCapacityM3 == 0 )
            {
                CurrentTrackSandBoxCapacityM3 = MaxTrackSandBoxCapacityM3;
            }
            
            // Ensure Drive Axles is set with a default value if user doesn't supply an OR value in ENG file
            if (LocoNumDrvAxles == 0)
            {
                if (MSTSLocoNumDrvWheels != 0 && MSTSLocoNumDrvWheels <= 6)
                {
                    LocoNumDrvAxles = (int) MSTSLocoNumDrvWheels;
                }
                else
                {
                    LocoNumDrvAxles = 4; // Set 4 axles as default
                }

                if (Simulator.Settings.VerboseConfigurationMessages)
                {
                    Trace.TraceInformation("Number of Locomotive Drive Axles set to default value of {0}", LocoNumDrvAxles);
                }
            }
               

            // Calculate minimum speed to pickup water
            const float Aconst = 2;
            WaterScoopMinSpeedMpS = Me.FromFt((float)Math.Sqrt(Aconst * GravitationalAccelerationFtpSpS * Me.ToFt(WaterScoopFillElevationM)));

            // Initialise Brake Pipe Charging Rate
            if (BrakePipeChargingRatePSIorInHgpS == 0) // Check to see if BrakePipeChargingRate has been set in the ENG file.
            {
                // Set Default BrakePipe Charging Rate depending upon whether locomotive has Vacuum or air brakes - overwritten by ENG file setting.
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    BrakePipeChargingRatePSIorInHgpS = 0.32f; // Vacuum brakes
                }
                else
                {
                    BrakePipeChargingRatePSIorInHgpS = Simulator.Settings.BrakePipeChargingRate; // Air brakes
                }
            }
            // Initialise Brake Pipe Quick Charging Rate
            if (BrakePipeQuickChargingRatePSIpS == 0) BrakePipeQuickChargingRatePSIpS = BrakePipeChargingRatePSIorInHgpS;

            // Initialise Exhauster Charging rate in diesel and electric locomotives. The equivalent ejector charging rates are set in the steam locomotive.
            if (this is MSTSDieselLocomotive || this is MSTSElectricLocomotive)
            {
                ExhausterHighSBPChargingRatePSIorInHgpS = BrakePipeChargingRatePSIorInHgpS;
                ExhausterLowSBPChargingRatePSIorInHgpS = BrakePipeChargingRatePSIorInHgpS / 5.0f; // Low speed exhauster setting is 1/5 of high speed
            }
            else
            {
                // Default to zero if not used.
                ExhausterHighSBPChargingRatePSIorInHgpS = 0.0f;
                ExhausterLowSBPChargingRatePSIorInHgpS = 0.0f;
            }

            // Initialise BrakePipeDischargeTimeFactor
            if (BrakePipeDischargeTimeFactor == 0)
            {
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    BrakePipeDischargeTimeFactor = 1.5f; // Vacuum brakes
                }
                else
                {
                    BrakePipeDischargeTimeFactor = 1.5f; // Air brakes
                }
            }
            
            // Initialise the resistance of the vacuum pump
            if (VacuumPumpResistanceN == 0)
            {
                VacuumPumpResistanceN = 120.0f;
            }

            // Initialise Brake Emergency Time Factor
            if (BrakeEmergencyTimeFactorS == 0) // Check to see if BrakeEmergencyTimeFactorS has been set in the ENG file.
            {
                // Set Default Brake Emergency Time Factor depending upon whether locomotive has Vacuum or air brakes - overwritten by ENG file setting.
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    BrakeEmergencyTimeFactorS = 1.0f; // Vacuum brakes
                }
                else
                {
                    BrakeEmergencyTimeFactorS = 0.1f; // Air brakes
                }
            }

            // Initialise Brake Service Time Factor
            if (BrakeServiceTimeFactorS == 0) // Check to see if BrakeServiceTimeFactorS has been set in the ENG file.
            {
                // Set Default Brake Service Time Factor depending upon whether locomotive has Vacuum or air brakes - overwritten by ENG file setting.
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    BrakeServiceTimeFactorS = 10.0f; // Vacuum brakes
                }
                else
                {
                    BrakeServiceTimeFactorS = 1.009f; // Air brakes
                }
            }

            // Check TrainBrakesControllerMaxSystemPressure parameter for "correct" value 
            // This is only done for vacuum brakes as the UoM can be confusing - it defaults to psi due to way parameter is read, and if units are entered then a InHG value can be incorrectly converted.
            if ((BrakeSystem is VacuumSinglePipe))
            {
                if (TrainBrakeController.MaxPressurePSI == 21 || TrainBrakeController.MaxPressurePSI == 25) // If 21 or 25 has been entered assume that it is 21InHg or 25InHg, and convert it to the correct psi equivalent
                {
                    float TempMaxPressure = TrainBrakeController.MaxPressurePSI;

                    // Convert assumed inHg value to psi
                    TrainBrakeController.MaxPressurePSI = Bar.ToPSI(Bar.FromInHg(TrainBrakeController.MaxPressurePSI));

                    if (Simulator.Settings.VerboseConfigurationMessages)
                    {
                        Trace.TraceInformation("TrainBrakeController.MaxPressurePSI is assumed to be {0} Inhg, - confirmed as a value of {1} InHg", TempMaxPressure, Bar.ToInHg(Bar.FromPSI(TrainBrakeController.MaxPressurePSI)));
                    }
                    
                }
                else if (TrainBrakeController.MaxPressurePSI < 7 || TrainBrakeController.MaxPressurePSI > 13) // Outside an acceptable range (Eqiv = 15InHg to 25InHg), then convert to a fixed default
                {
                    if (Simulator.Settings.VerboseConfigurationMessages)
                    {
                        Trace.TraceInformation("TrainBrakeController.MaxPressurePSI being incorrectly read as {0} Inhg, - set to a default value of {1} InHg", TrainBrakeController.MaxPressurePSI, Bar.ToInHg(Bar.FromPSI(Bar.ToPSI(Bar.FromInHg(21.0f)))));
                    }
                    TrainBrakeController.MaxPressurePSI = Bar.ToPSI(Bar.FromInHg(21.0f));
                }

            }

            //if (DoesBrakeCutPower && BrakeCutsPowerAtBrakePipePressurePSI > BrakeRestoresPowerAtBrakePipePressurePSI)
            //{
            //    BrakeCutsPowerAtBrakePipePressurePSI = BrakeRestoresPowerAtBrakePipePressurePSI - 1.0f;

            //    if (Simulator.Settings.VerboseConfigurationMessages)
            //    {
            //        Trace.TraceInformation("BrakeCutsPowerAtBrakePipePressure is greater then BrakeRestoresPowerAtBrakePipePressurePSI, and has been set to value of {0} InHg", Bar.ToInHg(Bar.FromPSI(BrakeCutsPowerAtBrakePipePressurePSI)));
            //    }
            //}

            if (DoesBrakeCutPower && (BrakeSystem is VacuumSinglePipe) && (BrakeRestoresPowerAtBrakePipePressurePSI == 0 || BrakeRestoresPowerAtBrakePipePressurePSI > OneAtmospherePSI))
            {
                BrakeRestoresPowerAtBrakePipePressurePSI = Bar.ToPSI(Bar.FromInHg(15.0f)); // Power can be restored once brake pipe rises above 15 InHg

                if (Simulator.Settings.VerboseConfigurationMessages)
                {
                    Trace.TraceInformation("BrakeRestoresPowerAtBrakePipePressure appears out of limits, and has been set to value of {0} InHg", Bar.ToInHg(Bar.FromPSI(BrakeRestoresPowerAtBrakePipePressurePSI)));
                }
            }

            // Initialise Brake Time Factor
            if (BrakePipeTimeFactorS == 0) // Check to see if BrakePipeTimeFactorS has been set in the ENG file.
            {
                // Set Default Brake Pipe Time Factor depending upon whether locomotive has Vacuum or air brakes - overwritten by ENG file setting.
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    BrakePipeTimeFactorS = 0.02f; // Vacuum brakes
                }
                else
                {
                    BrakePipeTimeFactorS = 0.0015f; // Air brakes
                }
            }

            // Initialise Train Pipe Leak Rate
            if (TrainBrakePipeLeakPSIorInHgpS == 0) // Check to see if TrainBrakePipeLeakPSIorInHgpS has been set in the ENG file.
            {
                // Set Default Train Brake Pipe Leak depending upon whether locomotive has Vacuum or air brakes - overwritten by ENG file setting.
                // Default currently set to zero - means that by default function is off, and a value must be entered into the ENG file to get it to work
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    TrainBrakePipeLeakPSIorInHgpS = 0.0f; // Vacuum brakes
                }
                else
                {
                    TrainBrakePipeLeakPSIorInHgpS = 0.0f; // Air brakes
                }
            }

            base.Initialize();
            if (DynamicBrakeBlendingEnabled) airPipeSystem = BrakeSystem as AirSinglePipe;

            DrvWheelWeightKg = InitialDrvWheelWeightKg;
        }

        public float DistanceToPowerSupplyStationM(int PowerSystem, out PowerSupplyStation myStation)
        {
            double distance = 100000;
            double currentLat = 0;
            double currentLon = 0;
            myStation = null;
            new WorldLatLon().ConvertWTC(WorldPosition.TileX, WorldPosition.TileZ, WorldPosition.WorldLocation.Location, ref currentLat, ref currentLon);
            currentLat = MathHelper.ToDegrees((float)currentLat);
            currentLon = MathHelper.ToDegrees((float)currentLon);
            foreach (PowerSupplyStation pss in Simulator.powerSupplyStations)
            {
                if (pss.PowerSystem == PowerSystem)
                {
                    if (myStation == null)
                        myStation = pss;
                    PowerSystem = myStation.PowerSystem;
                    double psiLat = MathHelper.ToDegrees((float)pss.Longitude);
                    double psiLon = MathHelper.ToDegrees((float)pss.Latitude);
                    double currdistance = getDistance(currentLat, currentLon, psiLat, psiLon) * 1138.8261851015801354401805869074;
                    if (currdistance < distance)
                    {
                        distance = currdistance;
                        myStation = pss;
                        RouteVoltageV = myStation.PowerSystem == 0 ? 3000 : 25000;
                    }
                }
            }
            if (RouteVoltageV == 3000)
                if (distance > 14000)
                    distance = 14000;
            if (RouteVoltageV == 25000)
                if (distance > 28000)
                    distance = 28000;
            return (float)distance;
        }

        public float DistanceToVoltageMarkerM(out int Voltage, out VoltageChangeMarker myMarker)
        {
            double distance = 100000;
            double currentLat = 0;
            double currentLon = 0;
            myMarker = new VoltageChangeMarker();
            Voltage = 0;
            new WorldLatLon().ConvertWTC(WorldPosition.TileX, WorldPosition.TileZ, WorldPosition.WorldLocation.Location, ref currentLat, ref currentLon);
            currentLat = MathHelper.ToDegrees((float)currentLat);
            currentLon = MathHelper.ToDegrees((float)currentLon);
            foreach (VoltageChangeMarker vcm in Simulator.voltageChangeMarkers)
            {
                double psiLat = MathHelper.ToDegrees((float)vcm.Longitude);
                double psiLon = MathHelper.ToDegrees((float)vcm.Latitude);
                double currdistance = getDistance(currentLat, currentLon, psiLat, psiLon) * 1138.8261851015801354401805869074;
                if (currdistance < distance)
                {
                    distance = currdistance;
                    myMarker = vcm;
                    Voltage = vcm.Voltage;
                }
            }
            return (float)distance;
        }

        private double getDistance(double lat1, double lon1, double lat2, double lon2)
        {
            if ((lat1 == lat2) && (lon1 == lon2))
            {
                return 0;
            }
            else
            {
                double theta = lon1 - lon2;
                double dist = Math.Sin(deg2rad(lat1)) * Math.Sin(deg2rad(lat2)) + Math.Cos(deg2rad(lat1)) * Math.Cos(deg2rad(lat2)) * Math.Cos(deg2rad(theta));
                dist = Math.Acos(dist);
                dist = rad2deg(dist);
                dist = dist * 60 * 1.1515;
                    dist = dist * 1.609344;
                return (dist);
            }
        }

        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        //::  This function converts decimal degrees to radians             :::
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        private double deg2rad(double deg)
        {
            return (deg * Math.PI / 180.0);
        }

        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        //::  This function converts radians to decimal degrees             :::
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        private double rad2deg(double rad)
        {
            return (rad / Math.PI * 180.0);
        }

        public void SetUpVoltageChangeMarkers()
        {
            try
            {
                Simulator.voltageChangeMarkers.Clear();
                if (!File.Exists(Simulator.RoutePath + "\\VoltageChangeMarkers.xml"))
                    return;
                XmlDocument doc = new XmlDocument();
                doc.Load(Simulator.RoutePath + "\\VoltageChangeMarkers.xml");
                foreach (XmlNode node in doc.ChildNodes)
                {
                    if (node.Name == "VoltageChangeMarkers")
                    {
                        foreach (XmlNode nodeSupply in node.ChildNodes)
                        {
                            double nextNodeLon = 0;
                            double nextNodeLat = 0;
                            int nextNodeVoltage = 0;

                            foreach (XmlNode nodeId in nodeSupply.ChildNodes)
                            {
                                if (nodeId.Name == "Longitude")
                                {
                                    try
                                    {
                                        nextNodeLon = double.Parse(nodeId.InnerText);
                                    }
                                    catch
                                    {
                                        nextNodeLon = double.Parse(nodeId.InnerText.Replace(".", ","));
                                    }

                                }
                                if (nodeId.Name == "Latitude")
                                {
                                    try
                                    {
                                        nextNodeLat = double.Parse(nodeId.InnerText);
                                    }
                                    catch
                                    {
                                        nextNodeLat = double.Parse(nodeId.InnerText.Replace(".", ","));
                                    }
                                }
                                if (nodeId.Name == "Voltage")
                                    nextNodeVoltage = int.Parse(nodeId.InnerText);
                            }
                            VoltageChangeMarker vcm = new VoltageChangeMarker();
                            vcm.Latitude = nextNodeLat;
                            vcm.Longitude = nextNodeLon;
                            vcm.Voltage = nextNodeVoltage;
                            Simulator.voltageChangeMarkers.Add(vcm);
                        }
                    }
                }
            }
            catch { }
        }

        public void SetUpPowerSupplyStations()
        {
            try
            {
                Simulator.powerSupplyStations.Clear();
                if (!File.Exists(Simulator.RoutePath + "\\PowerSupplyStations.xml"))
                    return;
                XmlDocument doc = new XmlDocument();
                doc.Load(Simulator.RoutePath + "\\PowerSupplyStations.xml");
                foreach (XmlNode node in doc.ChildNodes)
                {
                    if (node.Name == "PowerSupplyStations")
                    {
                        foreach (XmlNode nodeSupply in node.ChildNodes)
                        {
                            int nextNodeId = -1;
                            double nextNodeLon = 0;
                            double nextNodeLat = 0;
                            int nextNodePowerSystem = 0;

                            foreach (XmlNode nodeId in nodeSupply.ChildNodes)
                            {
                                if (nodeId.Name == "Longitude")
                                {
                                    try
                                    {
                                        nextNodeLon = double.Parse(nodeId.InnerText);
                                    }
                                    catch
                                    {
                                        nextNodeLon = double.Parse(nodeId.InnerText.Replace(".", ","));
                                    }

                                }
                                if (nodeId.Name == "Latitude")
                                {
                                    try
                                    {
                                        nextNodeLat = double.Parse(nodeId.InnerText);
                                    }
                                    catch
                                    {
                                        nextNodeLat = double.Parse(nodeId.InnerText.Replace(".", ","));
                                    }
                                }
                                if (nodeId.Name == "PowerSystem")
                                    nextNodePowerSystem = int.Parse(nodeId.InnerText);
                                if (nodeId.Name == "Id")
                                    nextNodeId = int.Parse(nodeId.InnerText);

                            }
                            PowerSupplyStation pss = new PowerSupplyStation();
                            pss.Id = nextNodeId;
                            pss.Latitude = nextNodeLat;
                            pss.Longitude = nextNodeLon;
                            pss.PowerSystem = nextNodePowerSystem;
                            Simulator.powerSupplyStations.Add(pss);
                        }
                    }
                }
            }
            catch { }
            if (Simulator.powerSupplyStations.Count == 0)
            {
                PowerSupplyStation pss = new PowerSupplyStation();
                pss.IsDefault = true;
                Simulator.powerSupplyStations.Add(pss);
                pss = new PowerSupplyStation();
                pss.PowerSystem = 1;
                Simulator.powerSupplyStations.Add(pss);
            }
        }

        /// <summary>
        /// Make instance of Cruise Control and Initialize it
        /// </summary>
        public void SetUpCruiseControl()
        {
            CruiseControl = new CruiseControl(this);
            CruiseControl.Initialize();
            CruiseControl.Equipped = true;
        }

        /// <summary>
        /// Make instance of multi position controller
        /// </summary>
        public void SetUpMPC()
        {
            MultiPositionController = new MultiPositionController(this);
            if (MultiPositionControllers == null)
            {
                MultiPositionControllers = new List<MultiPositionController>();
            }
            MultiPositionControllers.Add(MultiPositionController);
        }

        public void SetUpMirel()
        {
            Mirel.Initialize();
            Mirel.Equipped = true;
        }

        //================================================================================================//
        /// <summary>
        /// Set starting conditions  when initial speed > 0 
        /// </summary>
        /// 

        public override void InitializeMoving()
        {
            base.InitializeMoving();
            LocomotiveAxle.Reset(Simulator.GameTime, SpeedMpS);
            LocomotiveAxle.AxleSpeedMpS = SpeedMpS;
            LocomotiveAxle.AdhesionConditions = (float)(Simulator.Settings.AdhesionFactor) * 0.01f;
            AdhesionFilter.Reset(0.5f);
            AverageForceN = MaxForceN * Train.MUThrottlePercent / 100;
            float maxPowerW = MaxPowerW * Train.MUThrottlePercent * Train.MUThrottlePercent / 10000;
            if (AverageForceN * SpeedMpS > maxPowerW) AverageForceN = maxPowerW / SpeedMpS;
            LocomotiveAxle.FilterMovingAverage.Initialize(AverageForceN);
            if (Train.IsActualPlayerTrain)
            {
                TrainControlSystem.InitializeMoving();
                TrainBrakeController.InitializeMoving();
                BrakeSystem.LocoInitializeMoving();
            }
        }

        //================================================================================================//
        /// <summary>
        /// Correct braking parameters if needed or required 
        /// </summary>
        /// 
        //protected void CorrectBrakingParams()
        //{
        //    if (Simulator.Settings.CorrectQuestionableBrakingParams || Simulator.Settings.SimpleControlPhysics)
        //    {
        //        if (!(BrakeSystem is EPBrakeSystem) && !(BrakeSystem is VacuumSinglePipe) && !(BrakeSystem is AirTwinPipe))
        //        {
        //            if (CompressorRestartPressurePSI - TrainBrakeController.MaxPressurePSI < DefaultCompressorRestartToMaxSysPressureDiff - 10)
        //            {
        //                CompressorRestartPressurePSI = Math.Max(CompressorRestartPressurePSI, Math.Min(TrainBrakeController.MaxPressurePSI + DefaultCompressorRestartToMaxSysPressureDiff, DefaultMaxCompressorRestartPressure));
        //                MainResPressurePSI = MaxMainResPressurePSI = Math.Max(MaxMainResPressurePSI, Math.Min(CompressorRestartPressurePSI + DefaultMaxMainResToCompressorRestartPressureDiff, DefaultMaxMainResPressure));

        //            }
        //            if (MainResVolumeM3 < 0.3f && MassKG > 20000) MainResVolumeM3 = DefaultMainResVolume;

        //            // correct questionable MaxCylPressurePSI
        //            BrakeSystem.CorrectMaxCylPressurePSI(this);
        //        }
        //        if (MainResChargingRatePSIpS <= 0)
        //        {
        //            MainResChargingRatePSIpS = Math.Max(0.5f, (CompressorChargingRateM3pS * Bar.ToPSI(1)) / MainResVolumeM3);
        //        }
        //    }
        //    else if (MainResChargingRatePSIpS <= 0) MainResChargingRatePSIpS = 0.4f;

        //    // Corrections for dynamic braking parameters

        //    if (this is MSTSElectricLocomotive && DynamicBrakeDelayS > 4) DynamicBrakeDelayS = 2; // Electric locomotives have short engaging delays
        //    if (DynamicBrakeSpeed2MpS > 0 && DynamicBrakeSpeed3MpS > 0 && DynamicBrakeSpeed2MpS > DynamicBrakeSpeed3MpS)
        //    {
        //        // also exchanging DynamicBrakesMaximumEffectiveSpeed with DynamicBrakesFadingSpeed is a frequent error that upsets operation of
        //        // dynamic brakes
        //        var temp = DynamicBrakeSpeed2MpS;
        //        DynamicBrakeSpeed2MpS = DynamicBrakeSpeed3MpS;
        //        DynamicBrakeSpeed3MpS = temp;
        //    }
        //    if (Simulator.Settings.CorrectQuestionableBrakingParams)
        //    {
        //        if (MaxDynamicBrakeForceN > 0 && MaxContinuousForceN > 0 &&
        //        (MaxDynamicBrakeForceN / MaxContinuousForceN < 0.3f && MaxDynamicBrakeForceN == 20000))
        //            MaxDynamicBrakeForceN = Math.Min (MaxContinuousForceN * 0.5f, 150000); // 20000 is suggested as standard value in the MSTS documentation, but in general it is a too low value
        //    }
        //}

        /// <summary>
        /// Dynamic brake blending 
        /// </summary>
        protected bool disableDynamicBrakeIntervention = false; 
        public void DynamicBrakeBlending(float elapsedClockSeconds)
        {
            if (IsPlayerTrain)
            {
                if (!PowerOn && !EDBIndependent)
                    disableDynamicBrakeIntervention = true;
                if (Bar.FromPSI(BrakeSystem.BrakeLine1PressurePSI) > 4.9)
                    disableDynamicBrakeIntervention = false;
                if (disableDynamicBrakeIntervention)
                {
                    DynamicBrakeIntervention = -1;
                    DynamicBrakeBlended = false;
                    return;
                }

                // Povolí EDB pro AI vlaky
                if (!IsPlayerTrain)
                {
                    airPipeSystem = BrakeSystem as AirSinglePipe;
                    DynamicBrake = true;
                }

            }
            if (airPipeSystem != null
                && ((airPipeSystem is EPBrakeSystem && Train.BrakeLine4 > 0f) || (MainResPressurePSI >= airPipeSystem.maxPressurePSI0 && airPipeSystem.BrakeLine1PressurePSI < TrainBrakeController.MaxPressurePSI - 1f && AbsSpeedMpS > 1)
                && ThrottleController.CurrentValue == 0f && !(DynamicBrakeController != null && DynamicBrakeBlendingOverride && DynamicBrakeController.CurrentValue > 0f))
                /* && (!DynamicBrakeBlendingLeverOverride && DynamicBrakeController != null && DynamicBrakeIntervention < DynamicBrakeController.CurrentValue)*/)
            {
                float threshold = DynamicBrakeBlendingForceMatch ? 100f : 0.01f;
                float maxCylPressurePSI = airPipeSystem.GetMaxCylPressurePSI();
                float targetDynamicBrakePercent = airPipeSystem is EPBrakeSystem ? Train.BrakeLine4 : Math.Min(((TrainBrakeController.MaxPressurePSI - airPipeSystem.BrakeLine1PressurePSI) * airPipeSystem.GetAuxCylVolumeRatio()) / maxCylPressurePSI, 1f);
                //DynamicBrakeIntervention = Math.Min(((TrainBrakeController.CurrentValue - DynamicBrakeBlendingStart) / (DynamicBrakeBlendingStop - DynamicBrakeBlendingStart)), 1f);

                if (!DynamicBrakeBlended)
                {
                    DynamicBrakeBlended = true;
                    if (DynamicBrakeController != null)
                        DynamicBrakeIntervention = DynamicBrakeController.CurrentValue;
                    else
                        DynamicBrakeIntervention = 0;
                    DynamicBrakeCommandStartTime = Simulator.ClockTime;
                }
                if (DynamicBrake)
                {
                    float diff = DynamicBrakeBlendingForceMatch ? targetDynamicBrakePercent * MaxBrakeForceN - DynamicBrakeForceN : targetDynamicBrakePercent - DynamicBrakeIntervention;
                    if (diff > threshold && DynamicBrakeIntervention <= 1)
                    {
                        DynamicBrakeIntervention = Math.Min(DynamicBrakeIntervention + elapsedClockSeconds * (airPipeSystem.GetMaxApplicationRatePSIpS() / maxCylPressurePSI), 1.0f);
                    }
                    else if (diff < -threshold)
                    {
                        DynamicBrakeIntervention = Math.Max(DynamicBrakeIntervention - elapsedClockSeconds * (airPipeSystem.GetMaxApplicationRatePSIpS() / maxCylPressurePSI), 0f);
                    }
                }
                if (DynamicBrakeController != null)
                    DynamicBrakeIntervention = Math.Max(DynamicBrakeIntervention, DynamicBrakeController.CurrentValue);
            }

            else if (DynamicBrakeBlended)
            {
                if (DynamicBrakeIntervention > 0 && DynamicBrakeIntervention > DynamicBrakeController.CurrentValue)
                    DynamicBrakeIntervention -= 0.01f;
                else
                {
                    DynamicBrakeBlended = false;
                    DynamicBrakeIntervention = -1;
                }
            }
        }

        // Icik
        // Definice ochran lokomotiv
        public void Overcurrent_Protection(float elapsedClockSeconds)
        {
            if (!IsPlayerTrain)
                return;
            if (MaxCurrentA > 0)  // Zohlední jen elektrické a dieselelektrické lokomotivy 
            {
                // Nadproudová ochrana                        
                if (MaxCurrentPower == 0) MaxCurrentPower = MaxCurrentA / 1.2f;
                if (MaxCurrentBrake == 0) MaxCurrentBrake = MaxCurrentA / 2.3f;

                //Trace.TraceInformation("WheelSlipTime {0},  Simulator.GameTime {1},  Time0 {2},   SlipSpeed {3}", WheelSlipTime, Simulator.GameTime, Time0, SlipSpeed);

                float Current = (FilteredMotiveForceN + DynamicBrakeForceN) / MaxForceN * MaxCurrentA;

                if (this is MSTSElectricLocomotive && DynamicBrakeForceN == 0) // Stanovení kritického proudu pro elektrické lokomotivy při výkonu
                    if (Current > MaxCurrentPower)
                        OverCurrent = true;
                if (this is MSTSElectricLocomotive && DynamicBrakeForceN > 0) // Stanovení kritického proudu pro elektrické lokomotivy při dynamickém brždění
                    if (Current > MaxCurrentBrake)
                        OverCurrent = true;

                if (this is MSTSDieselLocomotive && DynamicBrakeForceN == 0) // Stanovení kritického proudu pro dieselelektrické lokomotivy při výkonu
                    if (Current > MaxCurrentPower)
                        OverCurrent = true;
                if (this is MSTSDieselLocomotive && DynamicBrakeForceN > 0) // Stanovení kritického proudu pro dieselelektrické lokomotivy při dynamickém brždění
                    if (Current > MaxCurrentBrake)
                        OverCurrent = true;

                if (OverCurrent)
                {
                    if (DoesPowerLossResetControls)
                    {
                        SetThrottlePercent(0);
                        ControllerVolts = 0;
                    }
                    if (this is MSTSElectricLocomotive) // Elektrické lokomotivy
                    {
                        switch (MultiSystemEngine)
                        {
                            case true: // Vícesystémová lokomotiva                            
                                HVOff = true; // Vypnutí HV    
                                break;
                            case false: // Jednosystémová lokomotiva
                                HVOff = true; // Vypnutí HV                                
                                break;
                        }
                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Zásah nadproudové ochrany!"));
                    }
                    if (this is MSTSDieselLocomotive) // Dieselelektrické lokomotivy
                    {                        
                        PowerReduction = 0.9f; // Omezení trakčních motorů  
                        SetDynamicBrakePercent(0);
                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Zásah nadproudové ochrany!"));
                    }
                }

                // Resetování nadproudové ochrany u elektrických lokomotiv
                if (this is MSTSElectricLocomotive && OverCurrent && LocalThrottlePercent == 0 && LocalDynamicBrakePercent == 0)
                {
                    OverCurrent = false;
                }

                // Resetování nadproudové ochrany u dieselelektrických lokomotiv
                if (this is MSTSDieselLocomotive && OverCurrent && LocalThrottlePercent == 0 && LocalDynamicBrakePercent == 0)
                {                    
                    OverCurrent = false;
                    PowerReduction = 0;
                }
            }
        }

        // Icik
        // Protiskluzová ochrana
        public void AntiSlip_Protection(float elapsedClockSeconds)
        {
            if (!IsPlayerTrain)
                return;
            if (MaxCurrentA > 0)  // Zohlední jen elektrické a dieselelektrické lokomotivy 
            {                
                if (SlipSpeedCritical == 0) SlipSpeedCritical = 40 / 3.6f; // Výchozí hodnota 40 km/h     
                float AbsSlipSpeedMpS = Math.Abs(WheelSpeedMpS) - AbsSpeedMpS;  // Zjistí absolutní rychlost prokluzu 
                if (extendedPhysics != null)
                {
                    SlipSpeedCritical = 10 / 3.6f; // 10kmh pokud počítáme pátou osu
                    AbsSlipSpeedMpS = extendedPhysics.FastestAxleSpeedMpS - extendedPhysics.AverageAxleSpeedMpS;
                }
                //Trace.TraceInformation("WheelSlipTime {0},  Simulator.GameTime {1},  Time0 {2},   SlipSpeed {3}", WheelSlipTime, Simulator.GameTime, Time0, SlipSpeed);
                
                if (AbsSlipSpeedMpS > SlipSpeedCritical) // Přepěťová ochrana při skluzu 
                    OverVoltage = true;

                if (OverVoltage)
                {
                    if (DoesPowerLossResetControls)
                    {
                        SetThrottlePercent(0);
                        ControllerVolts = 0;
                    }
                    if (this is MSTSElectricLocomotive) // Elektrické lokomotivy
                    {                        
                        switch (MultiSystemEngine)
                        {
                            case true: // Vícesystémová lokomotiva                            
                                HVOff = true; // Vypnutí HV    
                                break;
                            case false: // Jednosystémová lokomotiva
                                HVOff = true; // Vypnutí HV                                
                                break;
                        }
                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Zásah protiskluzové ochrany!"));
                    }
                    if (this is MSTSDieselLocomotive) // Dieselelektrické lokomotivy
                    {             
                        PowerReduction = 0.9f; // Omezení trakčních motorů  
                        SetDynamicBrakePercent(0);
                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Zásah protiskluzové ochrany!"));
                    }
                }

                // Resetování nadproudové ochrany u elektrických lokomotiv
                if (this is MSTSElectricLocomotive && OverVoltage && LocalThrottlePercent == 0 && LocalDynamicBrakePercent == 0)
                {
                    OverVoltage = false;
                }

                // Resetování nadproudové ochrany u dieselelektrických lokomotiv
                if (this is MSTSDieselLocomotive && OverVoltage && LocalThrottlePercent == 0 && LocalDynamicBrakePercent == 0)
                {                    
                    OverVoltage = false;
                    PowerReduction = 0;                    
                }
            }
        }

        // Icik
        // Napěťový filtr pro umožnění použití EDB bez pantografu        
        public void PowerOn_Filter(float elapsedClockSeconds)
        {
            if (!IsPlayerTrain)
                return;
            // Nabíjení a vybíjení napěťového filtru
            if (EDBIndependent)
            {
                // Kapacita napěťového filtru
                PowerOnFilterCapacity = 2400; // 5 min při brždění 80kN, plně nabito za 4 min
                                              // Mezní kapacita napěťového filtru, při které začne deaktivace EDB 
                PowerOnFilterCapacityLimit = 200;

                // Nabíjení
                if (PowerOn && PowerOnFilter < PowerOnFilterCapacity)
                    PowerOnFilter = PowerOnFilter + (10 * elapsedClockSeconds); // 10 jednotek za sekundu
                // Vybíjení
                if (!PowerOn && DynamicBrakePercent > 0 && PowerOnFilter > 0)
                    PowerOnFilter = PowerOnFilter - (DynamicBrakeForceN / 10000 * elapsedClockSeconds);
                // Pokles síly EDB při vybití filtru
                if (!PowerOn && DynamicBrakePercent > 0 && PowerOnFilter < PowerOnFilterCapacityLimit)                    
                {
                    if (DynamicBrakeIntervention > -1)
                        DynamicBrakeIntervention -= 0.01f;
                    if (DynamicBrakeIntervention < 0)
                        DynamicBrakeIntervention = -1;
                    DynamicBrakePercent--;
                    if (DynamicBrakePercent < 0)
                        DynamicBrakePercent = 0;
                    SetDynamicBrakePercent(DynamicBrakePercent);
                }

                //Trace.TraceWarning("Hodnota PowerOnFilter {0}, DynamicBrakePercent {1}, čas simulace {2}", PowerOnFilter, DynamicBrakePercent, Simulator.GameTime);
            }
        }

        // Icik
        // Při aktivní EDB a použití přímočinné brzdy zruší účinek EDB      
        public void EDBCancelByEngineBrake()
        {
            if (!IsPlayerTrain)
                return;
            if (EngineBrakeEngageEDB)
            {
                if (DynamicBrakeIntervention > -1) 
                    DynamicBrakeIntervention -= 0.5f;
                if (DynamicBrakeIntervention < 0)
                    DynamicBrakeIntervention = -1;
                DynamicBrakePercent -= 5;
                if (DynamicBrakePercent < 0) 
                    DynamicBrakePercent = 0;
                SetDynamicBrakePercent(DynamicBrakePercent);
                if (BrakeSystem.AutoCylPressurePSI1 < 1 && DynamicBrakeIntervention == -1)
                {
                    EngineBrakeEngageEDB = false;
                    DynamicBrakePercent = -1;
                }
            }          
        }

        // Icik
        // Vypínání HV při určitém tlaku v potrubí
        public void HVOffbyAirPressure()
        {
            if (!IsPlayerTrain)
                return;
            if (DoesBrakeCutPower)
            {
                // Pokud stoupne tlak nad hraniční hodnotu tlaku v brzdovém válci
                if (BrakeCutsPowerAtBrakeCylinderPressurePSI != 0)
                {
                    if (BrakeSystem.GetCylPressurePSI() >= BrakeCutsPowerAtBrakeCylinderPressurePSI && LocalThrottlePercent > 0
                      || HVOffStatusBrakeCyl)
                    {
                        HVOff = true; // Vypnutí HV
                        HVOffStatusBrakeCyl = true;
                    }
                    if (BrakeSystem.GetCylPressurePSI() < BrakeCutsPowerAtBrakeCylinderPressurePSI)
                        HVOffStatusBrakeCyl = false;
                }
                
                if (PowerOn && BrakeSystem.BrakeCylApply && LocalThrottlePercent > 0
                || HVOffStatusBrakePipe)
                {
                    // Pokud klesne tlak pod hraniční hodnotu tlaku v brzdovém potrubí
                    if (BrakeCutsPowerAtBrakePipePressurePSI != 0)
                        if (BrakeSystem.BrakeLine1PressurePSI <= BrakeCutsPowerAtBrakePipePressurePSI)
                        {
                            HVOff = true; // Vypnutí HV                             
                            HVOffStatusBrakePipe = true;
                        }
                    //Trace.TraceWarning("Hodnota BrakeSystem.BrakeLine1PressurePSI {0}, BrakeCutsPowerAtBrakePipePressurePSI {1}", BrakeSystem.BrakeLine1PressurePSI, BrakeCutsPowerAtBrakePipePressurePSI);                    
                }
                
                if (!PowerOn && BrakeSystem.BrakeCylRelease && HVOffStatusBrakePipe)
                {
                    // Pokud vystoupí tlak nad hraniční hodnotu tlaku v brzdovém potrubí
                    if (BrakeRestoresPowerAtBrakePipePressurePSI != 0)
                        if (BrakeSystem.BrakeLine1PressurePSI >= BrakeRestoresPowerAtBrakePipePressurePSI)
                        {
                            HVOffStatusBrakePipe = false;
                        }
                }
            }
        }

        // Icik
        public float I_Heating = 0;
        public float I_HeatingData = 0;
        public float I_HeatingData0 = 0;
        public float U_Heating = 3000;
        public bool HeatingOverCurrent = false;
        public bool HeatingIsOn = false;
        public float MSGHeatingCycle;
        public float GameTimeCyklus;

        public void ElevatedConsumptionOnLocomotive(float elapsedClockSeconds)
        {
            GameTimeCyklus++;
            if (GameTimeCyklus > 10)
                GameTimeCyklus = 0;

            if (TElevatedConsumption == 0)
                PowerReduction0 = PowerReduction;
            
            if (!IsPlayerTrain)
                HeatingIsOn = true;

            // Ochrana při nadproudu topení/klimatizace jen pro hráče
            if (IsPlayerTrain)
            {
                // Maximální proud topení            
                if (HeatingMaxCurrentA == 0)
                    HeatingMaxCurrentA = 130; // Default 130A

                if (Heating_OffOn && PowerOn && !HeatingOverCurrent)
                    HeatingIsOn = true;
                else
                {
                    if (I_HeatingData > 0)
                        I_HeatingData -= 50 * elapsedClockSeconds; // 50A/s
                    HeatingIsOn = false;
                }
              
                if (HeatingOverCurrent)
                {
                    if (I_HeatingData > 0)
                        I_HeatingData -= 50 * elapsedClockSeconds; // 50A/s
                    SignalEvent(Event.HeatingOverCurrentOn);
                }
                else
                    SignalEvent(Event.HeatingOverCurrentOff);

                if (!Heating_OffOn)
                    HeatingOverCurrent = false;

                if (this is MSTSDieselLocomotive && !Heating_OffOn && !OverCurrent && !OverVoltage)
                    PowerReduction = 0;

                I_HeatingData0 = (float)Math.Round(I_HeatingData);
            }
            
            // Počítání teplot proběhne každý desátý cyklus 
            if (GameTimeCyklus == 10 && (!Train.HeatingBoilerCarAttached || !Train.HeatedCarAttached))
            {
                foreach (TrainCar car in Train.Cars)
                {
                    if (car.WagonType == WagonTypes.Passenger || car.HasPassengerCapacity || car.WagonType == WagonTypes.Engine)
                    {
                        if (car.WagonType == WagonTypes.Passenger)
                            car.HasPassengerCapacity = true;

                        // Defaulty
                        if (!car.WagonHasTemperature && GameTimeFlow > 1 || car.CarOutsideTempCLastStatus != car.CarOutsideTempC)
                        {
                            if (car.WagonType == WagonTypes.Engine)
                            {
                                // Motorové vozy
                                if (car.HasPassengerCapacity)
                                {
                                    if (car.CarLengthM <= 10)
                                    {
                                        if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 20.0f * 1000;   // 20kW                    
                                        if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 5; // 10l/h                                            
                                    }
                                    if (car.CarLengthM > 10 && car.CarLengthM <= 20)
                                    {
                                        if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 30.0f * 1000;   // 30kW
                                        if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 10; // 10l/h
                                    }
                                    if (car.CarLengthM > 20)
                                    {
                                        if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 50.0f * 1000;   // 50kW
                                        if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 14; // 14l/h                                            
                                    }
                                }
                                else
                                // Lokomotivy
                                {
                                    if (car.CarLengthM <= 10)
                                    {
                                        if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 10.0f * 1000;   // 10kW                    
                                        if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 2; // 2l/h
                                    }
                                    if (car.CarLengthM > 10)
                                    {
                                        if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 15.0f * 1000;   // 15kW
                                        if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 3; // 3l/h
                                    }
                                }
                            }
                            else
                            {
                                // Vozy
                                if (car.CarLengthM <= 10)
                                {
                                    if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 20.0f * 1000;   // 20kW
                                    if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 5; // 7l/h
                                    if (car.DieselHeaterTankCapacity == 0) car.DieselHeaterTankCapacity = 30; // 30l
                                }
                                if (car.CarLengthM > 10 && car.CarLengthM <= 20)
                                {
                                    if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 30.0f * 1000;   // 30kW
                                    if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 10; // 10l/h
                                    if (car.DieselHeaterTankCapacity == 0) car.DieselHeaterTankCapacity = 50; // 50l
                                }
                                if (car.CarLengthM > 20)
                                {
                                    if (car.PowerReductionByHeating == 0) car.PowerReductionByHeating = 50.0f * 1000;   // 50kW
                                    if (car.DieselHeaterConsumptionPerHour == 0) car.DieselHeaterConsumptionPerHour = 14; // 14l/h
                                    if (car.DieselHeaterTankCapacity == 0) car.DieselHeaterTankCapacity = 70; // 70l
                                }
                            }       
                            
                            car.PowerReductionByHeating = MathHelper.Clamp(car.PowerReductionByHeating, 0, 50.0f * 1000);
                            car.PowerReductionByAirCondition = MathHelper.Clamp(car.PowerReductionByAirCondition, 0, 50.0f * 1000);

                            // Zapne jednotky topení/klimy 
                            car.BrakeSystem.HeatingIsOn = true;

                            // Vozy nikdy nebudou startovat podchlazené pod 5°C
                            if (car.CarOutsideTempC < 5 && !car.WagonHasTemperature)
                            {
                                car.WagonTemperature = Simulator.Random.Next(5, 10);
                                car.CarOutsideTempC0 = car.WagonTemperature;
                            }
                            else
                            if (!car.WagonHasTemperature)
                            {
                                car.WagonTemperature = Simulator.Random.Next((int)car.CarOutsideTempC - 2, (int)car.CarOutsideTempC + 2);
                                car.CarOutsideTempC0 = car.WagonTemperature;
                            }
                            else
                                car.CarOutsideTempC0 = car.CarOutsideTempC;

                            car.CarOutsideTempC0 = MathHelper.Clamp(car.CarOutsideTempC0, 5, 40);

                            // Natopené vozy, oživená loko
                            if (BrakeSystem.IsAirFull && !car.WagonHasTemperature)
                            {
                                if (Simulator.Season == SeasonType.Summer)
                                    car.WagonTemperature = Simulator.Random.Next(24, 29);
                                else
                                    car.WagonTemperature = Simulator.Random.Next(18, 23);
                            }
                            car.WagonHasTemperature = true;
                            car.CarOutsideTempCLastStatus = car.CarOutsideTempC;
                        }

                        //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Teplota " + car.CarOutsideTempC0));


                        float TempStepUp = 200;
                        float TempStepDown = 300;                        
                        float TempStepUpSlow = 100;                        
                        float TempStepDownSlow = 100;
                        float TempCDeltaOutside;
                        float CarAirVolumeM3;                       

                        // Výpočet objemu vzduchu ve vozech
                        CarAirVolumeM3 = car.CarWidthM * car.CarLengthM * (car.CarHeightM - 1.06f);

                        // Výpočet objemu vzduchu v lokomotivách
                        if (car.WagonType == WagonTypes.Engine && !HasPassengerCapacity)
                        {
                            CarAirVolumeM3 = car.CarWidthM * 1.5f * (car.CarHeightM - 1.06f);
                            TempStepUp = 1000;
                            TempStepDown = 3000;
                            TempStepUpSlow = 10;
                            TempStepDownSlow = 10;
                        }

                        // Vliv otevření dveří u vozů
                        if (car.BrakeSystem.LeftDoorIsOpened)
                        {
                            TempStepUpSlow += 75;
                            TempStepDownSlow += 75;
                        }
                        if (car.BrakeSystem.RightDoorIsOpened)
                        {
                            TempStepUpSlow += 75;
                            TempStepDownSlow += 75;
                        }

                        // Ochlazování a oteplování vlivem protékajícího vzduchu a okolní teploty
                        TempCDeltaOutside = car.WagonTemperature / car.CarOutsideTempC0 / 5;
                        if (car.AbsSpeedMpS > 0 && car.WagonTemperature > car.CarOutsideTempC0 * (1 - (car.AbsSpeedMpS / (250 / 3.6f))))
                            car.TempCDeltaAir = -TempStepDownSlow / CarAirVolumeM3 * TempCDeltaOutside * (1 + (1 - (car.AbsSpeedMpS / (250 / 3.6f)))) * elapsedClockSeconds;
                        else
                        if (car.AbsSpeedMpS > 0 && car.WagonTemperature < car.CarOutsideTempC0 * (1 - (car.AbsSpeedMpS / (250 / 3.6f))))
                            car.TempCDeltaAir = +TempStepUpSlow / CarAirVolumeM3 * TempCDeltaOutside * (1 - (car.AbsSpeedMpS / (250 / 3.6f))) * elapsedClockSeconds;
                        else
                        if (car.AbsSpeedMpS == 0 && car.WagonTemperature < car.CarOutsideTempC0 * 1.05f)
                            car.TempCDeltaAir = +TempStepUpSlow / CarAirVolumeM3 * TempCDeltaOutside * elapsedClockSeconds;
                        else
                        if (car.AbsSpeedMpS == 0 && car.WagonTemperature > car.CarOutsideTempC0)
                            car.TempCDeltaAir = -TempStepDownSlow / CarAirVolumeM3 * TempCDeltaOutside * elapsedClockSeconds;
                        else
                            car.TempCDeltaAir = 0;

                        // Topení
                        if (Simulator.Season == SeasonType.Spring || Simulator.Season == SeasonType.Autumn || Simulator.Season == SeasonType.Winter)
                        {
                            float SetTempCHyst = 3.5f;
                            //TempCDeltaOutside = car.CarOutsideTempC0 / car.WagonTemperature;

                            if (car.SetTemperatureC == 0)
                            {
                                car.SetTemperatureC = Simulator.Random.Next(19, 27);
                                car.SetTempCThreshold = car.SetTemperatureC;
                            }

                            if (IsPlayerTrain)
                            {
                                MSGHeatingCycle++;
                                if (MSGHeatingCycle > 1000 && car.WagonTemperature < 14)
                                {
                                    if (car.WagonType == WagonTypes.Engine && !car.HasPassengerCapacity)
                                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Je ti zima!"));
                                    else
                                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Cestujícím je zima!"));
                                    MSGHeatingCycle = 0;
                                }
                            }
                            // Termostat vypnutý, topení aktivní
                            if ((HeatingIsOn || car.DieselHeaterPower > 0) && car.WagonTemperature < car.SetTempCThreshold && !car.ThermostatOn)
                            {
                                car.TempCDelta = +car.PowerReductionByHeating0 / TempStepUp / CarAirVolumeM3 * elapsedClockSeconds;
                                if (car.DieselHeaterPower > 0)
                                    car.TempCDelta = +car.DieselHeaterPower0 / TempStepUp / CarAirVolumeM3 * elapsedClockSeconds;
                                if (car.WagonTemperature > car.SetTempCThreshold - 0.1f)
                                    car.ThermostatOn = true;
                                car.StatusHeatIsOn = true;
                            }
                            else
                            {
                                // Termostat zapnutý, topení neaktivní                        
                                car.TempCDelta = 0;
                                if (car.WagonTemperature < car.SetTempCThreshold - SetTempCHyst)
                                    car.ThermostatOn = false;
                                car.StatusHeatIsOn = false;
                            }
                        }

                        // Klimatizace
                        if (Simulator.Season == SeasonType.Summer)
                        {
                            float SetTempCHyst = 2.5f;
                            TempCDeltaOutside = car.WagonTemperature / car.CarOutsideTempC;

                            if (car.SetTemperatureC == 0)
                            {
                                car.SetTemperatureC = Simulator.Random.Next(17, 25);
                                car.SetTempCThreshold = car.SetTemperatureC;
                            }

                            if (IsPlayerTrain)
                            {
                                MSGHeatingCycle++;
                                if (MSGHeatingCycle > 1000 && car.WagonTemperature > 32)
                                {
                                    if (car.WagonType == WagonTypes.Engine && !car.HasPassengerCapacity)
                                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Je ti horko!"));
                                    else
                                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Cestujícím je příliš horko!"));
                                    MSGHeatingCycle = 0;
                                }
                            }
                            // Termostat vypnutý, klimatizace aktivní
                            if (HeatingIsOn && car.WagonTemperature > car.SetTempCThreshold && !car.ThermostatOn && car.PowerReductionByAirCondition > 0)
                            {
                                car.TempCDelta = -car.PowerReductionByAirCondition0 / TempStepDown / CarAirVolumeM3 * elapsedClockSeconds;
                                if (car.WagonTemperature < car.SetTempCThreshold + 0.1f)
                                    car.ThermostatOn = true;
                                car.StatusHeatIsOn = true;
                            }
                            else
                            {
                                // Termostat zapnutý, klimatizace neaktivní  
                                car.TempCDelta = 0;
                                if (car.WagonTemperature > car.SetTempCThreshold + SetTempCHyst)
                                    car.ThermostatOn = false;
                                car.StatusHeatIsOn = false;
                            }

                        }
                        car.WagonTemperature += car.TempCDelta + car.TempCDeltaAir;
                    }
                     //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Teplota " + car.WagonTemperature));
                }
            }
            
            // Bufík
            if (IsPlayerTrain && GameTimeCyklus == 10)
            {
                foreach (TrainCar car in Train.Cars)
                {
                    var mstsDieselLocomotive = car as MSTSDieselLocomotive;
                    if (car.DieselHeaterPower > 0 && (car.DieselHeaterTankCapacity > 2 || mstsDieselLocomotive != null && mstsDieselLocomotive.DieselLevelL > 0))
                    {      
                        if (car.DieselHeaterTankCapacity == 0 && mstsDieselLocomotive != null)
                            car.DieselHeaterTankCapacityMark = mstsDieselLocomotive.DieselLevelL;
                        else
                            car.DieselHeaterTankCapacityMark = car.DieselHeaterTankCapacity;

                        car.PowerReductionByHeating0 = 0;
                        car.PowerReductionByAirCondition0 = 0;
                        if (!car.BrakeSystem.HeatingIsOn) // Pokud má vůz vypnutý bufík
                        {
                            car.DieselHeaterPower0 = 0;
                            car.DieselHeaterConsumptionPerHour0 = 0;
                            car.StatusHeatIsOn = false;
                        }
                        else
                        {   // Bufík je zapnutý a aktivní (termostat vypnutý)                            
                            if (car.StatusHeatIsOn)
                            {
                                car.DieselHeaterPower0 = car.DieselHeaterPower;
                                car.DieselHeaterConsumptionPerHour0 = car.DieselHeaterConsumptionPerHour;
                                // Motorové vozy a lokomotivy
                                if (car.DieselHeaterTankCapacity == 0 && mstsDieselLocomotive != null)
                                {
                                    mstsDieselLocomotive.DieselLevelL -= car.DieselHeaterConsumptionPerHour0 * elapsedClockSeconds / 3600;
                                    if (mstsDieselLocomotive.DieselLevelL < 0f) mstsDieselLocomotive.DieselLevelL = 0f;                                                                        
                                }
                                else
                                // Vozy                                
                                {
                                    car.DieselHeaterTankCapacity -= car.DieselHeaterConsumptionPerHour0 * elapsedClockSeconds / 3600;
                                    if (car.DieselHeaterTankCapacity < 2f) car.DieselHeaterTankCapacity = 2f;                                    
                                }
                            }
                        }

                        if (!car.StatusHeatIsOn) // Pokud je bufík neaktivní (termostat zapnutý)
                        {
                            car.DieselHeaterPower0 = 0;
                            car.DieselHeaterConsumptionPerHour0 = 0;
                        }
                    }                   
                }
            }

            // Elektrické topení a klimatizace
            if (HeatingIsOn)
            {                
                TElevatedConsumption = 1;
                PowerReductionByHeatingWag = 0;

                foreach (TrainCar car in Train.Cars)
                {
                    if (!car.BrakeSystem.HeatingIsOn) // Pokud má vůz vypnuté topení nebo klimatizaci
                    {
                        car.PowerReductionByHeating0 = 0;
                        car.PowerReductionByAirCondition0 = 0;
                        car.StatusHeatIsOn = false;
                    }
                    else                    
                    {   // Jednotka je zapnutá a aktivní (termostat vypnutý)
                        car.PowerReductionByHeating0 = car.PowerReductionByHeating;
                        car.PowerReductionByAirCondition0 = car.PowerReductionByAirCondition;
                    }

                    if (!car.StatusHeatIsOn) // Pokud je jednotka neaktivní (termostat zapnutý)
                    {
                        car.PowerReductionByHeating0 = 0;
                        car.PowerReductionByAirCondition0 = 0;
                    }

                    if (Simulator.Season == SeasonType.Summer)
                        PowerReductionByHeatingWag += car.PowerReductionByAirCondition0; // Klimatizace
                    else
                        PowerReductionByHeatingWag += car.PowerReductionByHeating0; // Topení                        

                    if (I_HeatingData > HeatingMaxCurrentA && IsPlayerTrain)
                    {
                        if (car.WagonType == WagonTypes.Engine && this is MSTSDieselLocomotive)
                        {
                            PowerReduction = 0.9f;
                            HeatingOverCurrent = true;
                            Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Vybavení nadproudové ochrany topení/klimatizace!"));
                        }
                        if (car.WagonType == WagonTypes.Engine && this is MSTSElectricLocomotive)
                        {
                            HVOff = true;
                            HeatingOverCurrent = true;
                            Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Vybavení nadproudové ochrany topení/klimatizace!"));
                        }
                    }
                }

                PowerReductionByHeatingSum = PowerReductionByHeatingWag;

                if (IsPlayerTrain)
                {
                    // Výpočet proudu při zapnutí topení nebo klimatizace
                    I_Heating = (float)Math.Round(PowerReductionByHeatingSum / U_Heating);
                    if (I_HeatingData > I_Heating)
                        I_HeatingData -= 20 * elapsedClockSeconds; // 20A/s               
                    if (I_HeatingData < I_Heating)
                        I_HeatingData += 10 * elapsedClockSeconds; // 10A/s                                
                    I_HeatingData = MathHelper.Clamp(I_HeatingData, 0, 1000);
                    I_HeatingData0 = (float)Math.Round(I_HeatingData0);

                    //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Příkon topení/klimatizace " + PowerReductionByHeating0 / 1000 + " kW" + "   Proud " + I_HeatingData0 + " A!"));
                    //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Zapnuté topení, výkon zredukován " + PowerReductionByHeating0 * MaxPowerW / 1000) + " kW!");
                }
            }
            else
                PowerReductionByHeatingSum = 0;

            TElevatedConsumption = 1;
            PowerReductionByAuxEquipmentWag = 0;
            PowerReductionByAuxEquipmentEng = 0;

            if (PowerOn && AuxPowerOn)
            {
                foreach (TrainCar car in Train.Cars)
                {                    
                    if (car.WagonType == WagonTypes.Passenger) // Osobní vozy
                    {
                        PowerReductionByAuxEquipmentWag += car.PowerReductionByAuxEquipment;
                    }
                    if (car.WagonType == WagonTypes.Engine) // Lokomotivy
                    {
                        PowerReductionByAuxEquipmentEng += car.PowerReductionByAuxEquipment;
                    }
                }                
                // I.Compressor
                if (/*WagonType == WagonTypes.Engine && this is MSTSDieselLocomotive &&*/ CompressorIsOn) // Lokomotivy
                {
                    if (AirBrakesIsCompressorElectricOrMechanical) 
                        if (AirBrakesAirCompressorWattage == 0) AirBrakesAirCompressorWattage = 35000f; // 35kW Mechanický kompresor
                        else 
                        if (AirBrakesAirCompressorWattage == 0) AirBrakesAirCompressorWattage = 25000f; // 25kW Elektrický kompresor
                    PowerReductionByAuxEquipmentEng += AirBrakesAirCompressorWattage;
                }
                // II.Compressor
                if (/*WagonType == WagonTypes.Engine && this is MSTSDieselLocomotive &&*/ Compressor2IsOn) // Lokomotivy
                {
                    if (AirBrakesIsCompressorElectricOrMechanical)
                        if (AirBrakesAirCompressorWattage == 0) AirBrakesAirCompressorWattage = 35000f; // 35kW Mechanický kompresor
                        else
                        if (AirBrakesAirCompressorWattage == 0) AirBrakesAirCompressorWattage = 25000f; // 25kW Elektrický kompresor
                    PowerReductionByAuxEquipmentEng += AirBrakesAirCompressorWattage;
                }
                // Pomocný kompresor
                if (/*WagonType == WagonTypes.Engine && this is MSTSDieselLocomotive &&*/ AuxCompressorIsOn) // Lokomotivy
                {
                    AirBrakesAirCompressorWattage = 5000f; // 5kW Elektrický kompresor
                    PowerReductionByAuxEquipmentEng += AirBrakesAirCompressorWattage;
                }
            }
            PowerReductionByAuxEquipmentSum = PowerReductionByAuxEquipmentWag + PowerReductionByAuxEquipmentEng;
            //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Zvýšený odběr proudu, výkon zredukován "+ PowerReductionByAuxEquipment0 * MaxPowerW/1000) + " kW!");                        

            if (IsPlayerTrain)
            {
                if (WagonType == WagonTypes.Engine && this is MSTSElectricLocomotive) // Elektrické lokomotivy
                {
                    //PowerReduction = PowerReduction0;
                    return;
                }

                if (WagonType == WagonTypes.Engine && this is MSTSDieselLocomotive) // Diesel lokomotivy
                {
                    // Výpočet celkového úbytku výkonu 
                    if (MaxPowerW == 0) MaxPowerW = 1000000; // Default pro výkon, který nesmí být 0kW
                    float PowerReductionResult = (PowerReductionByHeatingSum + PowerReductionByAuxEquipmentSum) * (1000000 / MaxPowerW);
                    PowerReductionResult = PowerReductionResult / 1000000;
                    PowerReductionResult = MathHelper.Clamp(PowerReductionResult, 0, 1);

                    if (PowerReduction < PowerReductionResult)
                        PowerReduction = PowerReduction + 0.025f;
                    else PowerReduction = PowerReductionResult;

                    //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Celková ztráta výkonu "+ PowerReduction * MaxPowerW/1000 + " kW!"));
                    //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("PowerReduction " + PowerReduction));

                    if (PowerReductionResult == 0)
                    {
                        if (PowerReduction > PowerReduction0)
                            PowerReduction = PowerReduction - 0.05f;
                        if (PowerReduction < PowerReduction0)
                        {
                            PowerReduction = PowerReduction0;
                            TElevatedConsumption = 0;
                        }
                    }
                }

                //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Příkon topení " + PowerReductionByHeating0 / 1000) + " kW!");
                //Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Příkon pom.obvodů " + PowerReductionByAuxEquipment0 / 1000) + " kW!");
            }
        }
        
        // Stanovení hodnot výkonů a síly pro AC-DC systém
        public void MaxPower_MaxForce_ACDC()
        {
            if (!IsPlayerTrain)
                return;
            switch (SwitchingVoltageMode)
            {
                case 0:
                    if (MaxPowerWDC != 0)
                        MaxPowerW = MaxPowerWDC;
                    if (MaxForceNDC != 0)
                        MaxForceN = MaxForceNDC;                    
                    break;
                case 1:
                    break;
                case 2:
                    if (MaxPowerWAC != 0)
                        MaxPowerW = MaxPowerWAC;
                    if (MaxForceNAC != 0)
                        MaxForceN = MaxForceNAC;                    
                    break;
            }
        }

        public void SetDefault_AuxCompressor()
        {
            // Netěsnost pomocné jímky pomocného kompresoru 0.002 bar/s
            if (AuxResPipeLeak == 0)
                AuxResPipeLeak = 0.002f * 14.50377f;

            // Velikost jímky pomocného kompresoru
            if (AuxResVolumeM3 == 0)
                AuxResVolumeM3 = 60.0f / 1000f; // 60 L

            // Maximální rychlost plnění jímky pomocným kompresorem
            if (AuxResChargingRatePSIpS == 0)
                AuxResChargingRatePSIpS = 0.027f * 14.50377f; // 0.027 bar/s 

            // Vícesystémové lokomotivy
            if (MultiSystemEngine)
            {                
                // Maximální tlak v jímce pomocného kompresoru 
                if (MaxAuxResPressurePSI == 0)
                    MaxAuxResPressurePSI = 5.0f * 14.50377f; // 5 barů                                        

                // Hodnota pro restart pomocného kompresoru
                //if (AuxCompressorRestartPressurePSI == 0)
                //    AuxCompressorRestartPressurePSI = 4.5f * 14.50377f; // 4.5 barů

                // Minimální hodnota tlaku pro chod pantografu
                if (MinAuxPressurePantoPSI == 0)
                    MinAuxPressurePantoPSI = 4.4f * 14.50377f; // 4.4 barů

                // Minimální hodnota tlaku pro chod HV
                if (MinAuxPressureHVPSI == 0)
                    MinAuxPressureHVPSI = 4.2f * 14.50377f; // 4.2 barů                               
            }

            else
            // Jednosystémové lokomotivy
            {             
                if (LocomotivePowerVoltage == 3000)
                {
                    // Maximální tlak v jímce pomocného kompresoru 
                    if (MaxAuxResPressurePSI == 0)
                        MaxAuxResPressurePSI = 5.0f * 14.50377f; // 5 barů                        

                    // Hodnota pro restart pomocného kompresoru
                    //if (AuxCompressorRestartPressurePSI == 0)
                    //    AuxCompressorRestartPressurePSI = 4.5f * 14.50377f; // 4.5 barů

                    // Minimální hodnota tlaku pro chod pantografu
                    if (MinAuxPressurePantoPSI == 0)
                        MinAuxPressurePantoPSI = 4.4f * 14.50377f; // 4.4 barů

                    // Minimální hodnota tlaku pro chod HV
                    if (MinAuxPressureHVPSI == 0)
                        MinAuxPressureHVPSI = 4.2f * 14.50377f; // 4.2 barů                    
                }
                if (LocomotivePowerVoltage == 25000)
                {
                    // Maximální tlak v jímce pomocného kompresoru 
                    if (MaxAuxResPressurePSI == 0)
                        MaxAuxResPressurePSI = 7.0f * 14.50377f; // 7 barů

                    // Hodnota pro restart pomocného kompresoru
                    //if (AuxCompressorRestartPressurePSI == 0)
                    //    AuxCompressorRestartPressurePSI = 5.5f * 14.50377f; // 5.5 barů

                    // Minimální hodnota tlaku pro chod pantografu
                    if (MinAuxPressurePantoPSI == 0)
                        MinAuxPressurePantoPSI = 5.8f * 14.50377f; // 5.8 barů

                    // Minimální hodnota tlaku pro chod HV
                    if (MinAuxPressureHVPSI == 0)
                        MinAuxPressureHVPSI = 5.0f * 14.50377f; // 5.0 barů                    
                }
            }
        }
       
        /// <summary>
        /// This function updates periodically the states and physical variables of the locomotive's subsystems.
        /// </summary>
        private bool trainBrakeApply = false;
        private bool trainBrakeRelease = false;
        protected float EngineBrakePercentSet = 0;
        public bool CanCheckEngineBrake = true;
        protected int checkParkingBrakeCount = 0;
        public override void Update(float elapsedClockSeconds)
        {
            if (IsPlayerTrain && !Simulator.Paused)
            {
                if (extendedPhysics != null)
                    extendedPhysics.Update(elapsedClockSeconds);
                if (CruiseControl != null)
                {
                    if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Manual)
                    {
                        CruiseControl.controllerVolts = ControllerVolts;
                    }
                    if (CruiseControl.RestrictedSpeedActive)
                        CruiseControl.CheckRestrictedSpeedZone();
                }
                if (Mirel != null)
                {
                    if (IsPlayerTrain && Mirel.Equipped)
                        Mirel.Update(elapsedClockSeconds, AbsSpeedMpS, AbsWheelSpeedMpS);
                }

                if (CruiseControl != null && ControllerVolts > 0 && DynamicBrakePercent > -1)
                    DynamicBrakeChangeActiveState(false);

                if (extendedPhysics == null)
                {
                    if (CruiseControl == null)
                    {
                        if (ThrottlePercent > 0)
                        {
                            ControllerVolts = ThrottlePercent / 10;
                        }
                    }
                    else if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Manual)
                    {
                        ControllerVolts = ThrottlePercent / 10;
                    }
                }

                if (DynamicBrakePercent > 0)
                {
                    if (PowerOn)
                    {
                        ControllerVolts = -(DynamicBrakePercent / 100) * MaxControllerVolts;
                    }
                    else
                    {
                        if (PowerOnFilter > 0)
                        {
                            ControllerVolts = -(DynamicBrakePercent / 100) * MaxControllerVolts;
                        }
                    }
                }
                else if (DynamicBrakePercent <= 0 && ControllerVolts < 0)
                    ControllerVolts = 0;
            }

            // Icik
            // Zpoždění pro inicializaci systémů ochran lokomotivy
            GameTimeFlow += elapsedClockSeconds;
            Overcurrent_Protection(elapsedClockSeconds);
            AntiSlip_Protection(elapsedClockSeconds);
            PowerOn_Filter(elapsedClockSeconds);
            EDBCancelByEngineBrake();
            HVOffbyAirPressure();
            MaxPower_MaxForce_ACDC();
            ElevatedConsumptionOnLocomotive(elapsedClockSeconds);
            if (IsPlayerTrain && !Pantograph3Enable) TogglePantograph4Switch();
            if (IsPlayerTrain && Pantograph3Enable) TogglePantograph3Switch();
            ToggleHV2Switch();
            ToggleHV3Switch();
            ToggleHV5Switch();

            TrainControlSystem.Update();

            elapsedTime = elapsedClockSeconds;
            string s = this.LocomotiveName;
            UpdatePowerSupply(elapsedClockSeconds);
            UpdateControllers(elapsedClockSeconds);

            if (GetTrainBrakeStatus().Contains("Apply") || GetTrainBrakeStatus().Contains("Emergency"))
            {
                if (Mirel.initTest != Mirel.InitTest.Passed)
                {
                    if (!trainBrakeApply)
                    {
                        trainBrakeApply = !trainBrakeApply;
                        SignalEvent(Event.MirelBrakeReleasingPipePressure);
                    }
                }
            }
            else if (trainBrakeApply)
            {
                SignalEvent(Event.MirekBrakeStopReleaseSound);
                trainBrakeApply = !trainBrakeApply;
            }

            if (GetTrainBrakeStatus().Contains("Release"))
            {
                if (Mirel.initTest != Mirel.InitTest.Passed)
                {
                    if (!trainBrakeRelease)
                    {
                        trainBrakeRelease = !trainBrakeRelease;
                        SignalEvent(Event.MirelBrakeFillingPipePressure);
                    }
                }
            }
            else if (trainBrakeRelease)
            {
                SignalEvent(Event.MirekBrakeStopFillSound);
                trainBrakeRelease = !trainBrakeRelease;
            }

            // Train Heading - only check the lead locomotive otherwise flipped locomotives further in consist will overwrite the train direction
            if (IsLeadLocomotive())
            {
                var heading = (float)Math.Atan2(WorldPosition.XNAMatrix.M13, WorldPosition.XNAMatrix.M11);
                Train.PhysicsTrainLocoDirectionDeg = MathHelper.ToDegrees((float)heading);

                if (Flipped)
                {
                    Train.PhysicsTrainLocoDirectionDeg += 180.0f; // Reverse direction of train
                    if (Train.PhysicsTrainLocoDirectionDeg > 360) // If this results in an angle greater then 360, then convert it back to an angle between 0 & 360.
                    {
                        Train.PhysicsTrainLocoDirectionDeg -= 360;
                    }
                }
            }

            if (IsSteamHeatFitted)
            {
                UpdateCarSteamHeat(elapsedClockSeconds);
            }
            checkParkingBrakeCount++;
            if (AutomaticParkingBrake && IsPlayerTrain && checkParkingBrakeCount == 10)
            {
                checkParkingBrakeCount = 0;
                if (CruiseControl != null)
                {
                    if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto || CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.AVV)
                    {
                        bool braking = false;
                        if (MultiPositionControllers != null)
                        {
                            foreach (MultiPositionController mpc in MultiPositionControllers)
                            {
                                if (mpc.controllerBinding == MultiPositionController.ControllerBinding.Throttle
                                    && mpc.controllerPosition != MultiPositionController.ControllerPosition.Drive
                                    && mpc.controllerPosition != MultiPositionController.ControllerPosition.KeepCurrent
                                    && mpc.controllerPosition != MultiPositionController.ControllerPosition.ThrottleIncrease
                                    && mpc.controllerPosition != MultiPositionController.ControllerPosition.ThrottleIncreaseFast
                                    && mpc.controllerPosition != MultiPositionController.ControllerPosition.ThrottleIncreaseOrDynamicBrakeDecrease
                                    && mpc.controllerPosition != MultiPositionController.ControllerPosition.ThrottleIncreaseOrDynamicBrakeDecreaseFast
                                    )
                                {
                                    braking = true;
                                }
                            }
                        }
                        if (CruiseControl.SpeedSelMode != CruiseControl.SpeedSelectorMode.Parking)
                            braking = false;
                        if (AbsSpeedMpS > MpS.FromKpH(AutomaticParkingBrakeEngageSpeedKpH))
                            braking = false;
                        if (!braking && !EngineBrakePriority)
                        {
                            SetEngineBrakePercent(0);
                            EngineBrakePercentSet = 0;
                        }
                        if (CanCheckEngineBrake && BrakeSystem.GetCylPressurePSI() < 0.01 || AbsSpeedMpS == 0)
                        {
                            if (EngineBrakeController.CurrentValue == 0.0f)
                                EngineBrakePriority = false;
                        }
                        AutomaticParkingBrakeEngaged = braking;
                    }
                    else AutomaticParkingBrakeEngaged = false;
                }
            }

            if (IsPlayerTrain)
            {
                string test = GetTrainBrakeStatus();
                if (GetTrainBrakeStatus().Contains("Release") || GetTrainBrakeStatus().Contains("Jízdní"))
                {
                    if (Mirel.initTest != Mirel.InitTest.Passed)
                    {
                        if (!trainBrakeRelease)
                        {
                            trainBrakeRelease = !trainBrakeRelease;
                            SignalEvent(Event.MirelBrakeFillingPipePressure);
                        }
                    }
                    else
                    {
                        trainBrakeRelease = true;
                    }
                }
                else if (trainBrakeRelease)
                {
                    SignalEvent(Event.MirekBrakeStopFillSound);
                    trainBrakeRelease = !trainBrakeRelease;
                }
            }


            // TODO  this is a wild simplification for electric and diesel electric
            float t = ThrottlePercent / 100f;

            if (!AdvancedAdhesionModel)  // Advanced adhesion model turned off.
               AbsWheelSpeedMpS = AbsSpeedMpS;

            // For the advanced adhesion model, a rudimentary form of slip control is incorporated by using the wheel speed to calculate tractive effort.
            // As wheel speed is increased tractive effort is decreased. Hence wheel slip is "controlled" to a certain extent.
            // This doesn't cover all types of locomotives, for example if DC traction motors and no slip control, then the tractive effort shouldn't be reduced.
            // This won't eliminate slip, but limits its impact. 
            // More modern locomotive have a more sophisticated system that eliminates slip in the majority (if not all circumstances).
            // Simple adhesion control does not have any slip control feature built into it.
            // TODO - a full review of slip/no slip control.
            if (WheelSlip && AdvancedAdhesionModel)
            {
                AbsTractionSpeedMpS = AbsWheelSpeedMpS;
            }
            else
            {
                AbsTractionSpeedMpS = AbsSpeedMpS;
            }

            // Jindrich
            //UpdateMotiveForce(elapsedClockSeconds, t, AbsSpeedMpS, AbsWheelSpeedMpS);
            CheckAccelerationBits(elapsedClockSeconds, AbsWheelSpeedMpS);

            if (CruiseControl != null && !TrainBrakeController.TCSEmergencyBraking)
            {
                if (!IsPlayerTrain || CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Manual)
                {
                    CruiseControl.WasForceReset = false;
            UpdateTractiveForce(elapsedClockSeconds, t, AbsSpeedMpS, AbsWheelSpeedMpS);
                }
                else if (CruiseControl.SelectedSpeedMpS > 0)
                {
                    CruiseControl.Update(elapsedClockSeconds, AbsWheelSpeedMpS);
                    if (extendedPhysics != null)
                        UpdateTractiveForce(elapsedClockSeconds, t, AbsSpeedMpS, AbsWheelSpeedMpS);
                }
                else if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                    CruiseControl.Update(elapsedClockSeconds, AbsWheelSpeedMpS);
                else
                    UpdateTractiveForce(elapsedClockSeconds, t, AbsSpeedMpS, AbsWheelSpeedMpS);

            }
            else
            {
                if (CruiseControl != null && (TrainBrakeController.TCSEmergencyBraking || TrainBrakeController.TCSFullServiceBraking))
                    CruiseControl.WasBraking = true;
                UpdateTractiveForce(elapsedClockSeconds, t, AbsSpeedMpS, AbsWheelSpeedMpS);
            }

            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                    mpc.Update(elapsedClockSeconds);
            }

            float speedDiff = 0;
            if (IsPlayerTrain && !Simulator.Paused)
            {
                if (extendedPhysics == null)
                {
                    speedDiff = AbsWheelSpeedMpS - AbsSpeedMpS;
                }
                if (extendedPhysics != null)
                {
                    speedDiff = extendedPhysics.FastestAxleSpeedMpS - extendedPhysics.AverageAxleSpeedMpS;                    
                }
                speedDiff = Math.Abs(speedDiff);

                if (CruiseControl != null)
                {
                    foreach (MSTSLocomotive loco in CruiseControl.PlayerNotDriveableTrainLocomotives)
                    {
                        if ((loco.AbsWheelSpeedMpS - loco.AbsSpeedMpS) > speedDiff)
                            speedDiff = loco.AbsWheelSpeedMpS - loco.AbsSpeedMpS;
                    }
                }
                if (speedDiff > AntiWheelSpinSpeedDiffThreshold)
                {
                    skidSpeedDegratation += 0.1f;
                }
                else if (skidSpeedDegratation > 0)
                {
                    skidSpeedDegratation -= 0.05f; // původně 0.01
                }
                if (extendedPhysics != null)
                {
                    if (extendedPhysics.OverridenControllerVolts > ControllerVolts && ControllerVolts == 0 && wasRestored)
                    {
                        wasRestored = false;
                        ControllerVolts = extendedPhysics.OverridenControllerVolts;
                    }
                    extendedPhysics.OverridenControllerVolts = ControllerVolts;
                }
                if (AntiWheelSpinEquipped)
                {
                    if (extendedPhysics == null && skidSpeedDegratation > 0)
                    {
                        TractiveForceN /= skidSpeedDegratation * 10;
                        if (TractiveForceN > MaxForceN)
                            TractiveForceN = MaxForceN;
                    }
                    else if (extendedPhysics != null)
                        extendedPhysics.OverridenControllerVolts = ControllerVolts - skidSpeedDegratation;
                }
            }
            ApplyDirectionToTractiveForce();

            // Calculate the total motive force for the locomotive - ie TractiveForce (driving force) + Dynamic Braking force.
            // Note typically only one of the above will only ever be non-zero at the one time.
            // For flipped locomotives the force is "flipped" elsewhere, whereas dynamic brake force is "flipped" below by the direction of the speed.
            MotiveForceN = TractiveForceN;

            // Icik
            if (DynamicBrakePercent > 0 && (DynamicBrakeForceCurves != null || DynamicBrakeForceCurvesAC != null || DynamicBrakeForceCurvesDC != null) && AbsSpeedMpS > 0)
            {                
                float f = 0;
                switch (SwitchingVoltageMode)
                {
                    case 0:                        
                        if (DynamicBrakeForceCurvesDC != null)
                            f = DynamicBrakeForceCurvesDC.Get(.01f * DynamicBrakePercent, AbsTractionSpeedMpS);
                        break;
                    case 1:
                        if (DynamicBrakeForceCurves != null)
                            f = DynamicBrakeForceCurves.Get(.01f * DynamicBrakePercent, AbsTractionSpeedMpS);
                        break;
                    case 2:
                        if (DynamicBrakeForceCurvesAC != null)
                            f = DynamicBrakeForceCurvesAC.Get(.01f * DynamicBrakePercent, AbsTractionSpeedMpS);
                        break;
                }
                f = f * UiPowerLose;

                //if (f > 0 && PowerOn)
                // Icik 
                // EDB funguje z baterií
                if (f > 0 && (PowerOn || PowerOnFilter > 0))
                {
                    DynamicBrakeForceN = f * (1 - PowerReduction);
                    MotiveForceN = -(SpeedMpS > 0 ? 1 : SpeedMpS < 0 ? -1 : Direction == Direction.Reverse ? -1 : 1) * DynamicBrakeForceN;
                }
                else
                {
                    DynamicBrakeForceN = 0f;
                }
            }
            else
                DynamicBrakeForceN = 0; // Set dynamic brake force to zero if in Notch 0 position

            UpdateFrictionCoefficient(elapsedClockSeconds); // Find the current coefficient of friction depending upon the weather

            UpdateWaterTroughRefill(elapsedClockSeconds, AbsSpeedMpS); // Update refill from trough

            switch (this.Train.TrainType)
            {
                case Train.TRAINTYPE.AI:
                case Train.TRAINTYPE.AI_PLAYERHOSTING:
                    if (AcceptMUSignals)
                    {
                        if (!PowerOn)
                        {
                            //Train.SignalEvent(PowerSupplyEvent.RaisePantograph, 1);

                            if (this is MSTSDieselLocomotive)
                            {
                                foreach (DieselEngine de in (this as MSTSDieselLocomotive).DieselEngines)
                                {
                                    if (de.EngineStatus != DieselEngine.Status.Running)
                                        de.Initialize(true);
                                }
                            }
                        }
                        if (this is MSTSDieselLocomotive)
                        {
                            foreach (DieselEngine de in (this as MSTSDieselLocomotive).DieselEngines)
                            {
                                 if (de.GearBox != null)
                                    de.GearBox.GearBoxOperation = GearBoxOperation.Automatic;
                            }
                        }
                    }

                    AntiSlip = true; // Always set AI trains to AntiSlip
                    SimpleAdhesion();   // Simple adhesion model used for AI trains
                    if (Train.IsActualPlayerTrain) FilteredMotiveForceN = CurrentFilter.Filter(MotiveForceN, elapsedClockSeconds);
                    WheelSpeedMpS = Flipped ? -AbsSpeedMpS : AbsSpeedMpS;            //make the wheels go round
                    break;
                case Train.TRAINTYPE.STATIC:
                case Train.TRAINTYPE.INTENDED_PLAYER:
                    break;
                case Train.TRAINTYPE.PLAYER:
                case Train.TRAINTYPE.AI_PLAYERDRIVEN:
                case Train.TRAINTYPE.REMOTE:
                    // For notched throttle controls (e.g. Dash 9 found on Marias Pass) UpdateValue is always 0.0
                    if (ThrottleController.UpdateValue != 0.0)
                    {
                        Simulator.Confirmer.UpdateWithPerCent(
                            this is MSTSSteamLocomotive ? CabControl.Regulator : CabControl.Throttle,
                            ThrottleController.UpdateValue > 0 ? CabSetting.Increase : CabSetting.Decrease,
                            ThrottleController.CurrentValue * 100);
                    }
                    if (DynamicBrakeController != null && DynamicBrakeController.UpdateValue != 0.0 && DynamicBrake)
                    {
                        Simulator.Confirmer.UpdateWithPerCent(
                            CabControl.DynamicBrake,
                            DynamicBrakeController.UpdateValue > 0 ? CabSetting.Increase : CabSetting.Decrease,
                            DynamicBrakeController.CurrentValue * 100);
                    }

                    // Icik
                    //if (Simulator.UseAdvancedAdhesion && !Simulator.Paused) 
                    if (Simulator.UseAdvancedAdhesion) 
                    {
                        AdvancedAdhesion(elapsedClockSeconds); // Use advanced adhesion model
                        AdvancedAdhesionModel = true;  // Set flag to advise advanced adhesion model is in use
                    }
                    else
                    {
                        SimpleAdhesion();  // Use simple adhesion model
                        AdvancedAdhesionModel = false; // Set flag to advise simple adhesion model is in use
                    }

                    UpdateTrackSander(elapsedClockSeconds);

                    if (this is MSTSDieselLocomotive || this is MSTSElectricLocomotive)  // Antislip and throttle down should only work on diesel or electric locomotives.
                    {

                        // If wheel slip waring activated, and antislip is set in ENG file then reduce throttle setting to a value below warning power
                        if (WheelSlipWarning && AntiSlip)
                        {
                            ThrottleController.SetValue(PreviousThrottleSetting);
                        }


                        PreviousThrottleSetting = (ThrottlePercent / 100.0f) - 0.005f;
                        PreviousThrottleSetting = MathHelper.Clamp(PreviousThrottleSetting, 0.0f, 1.0f); // Prevents parameter going outside of bounds 

                        // If wheels slip and WheelslipCausesThrottleDown is set in engine file reduce throttle to 0 setting
                        if (WheelslipCausesThrottleDown && WheelSlip)
                            ThrottleController.SetValue(0.0f);
                    }

                    //Force to display
                    FilteredMotiveForceN = CurrentFilter.Filter(MotiveForceN, elapsedClockSeconds);
                    break;
                default:
                    break;

            }

            // always set AntiSlip for AI trains
              if (Train.TrainType == Train.TRAINTYPE.AI || Train.TrainType == Train.TRAINTYPE.AI_PLAYERHOSTING)
                 {
                    AntiSlip = true;
                 }

            // If the train is vacuumed braked then no need to update the compressor, but udate the ejector instead
              if (BrakeSystem is VacuumSinglePipe)
                 {
                    
                    if (VacuumBrakeEQFitted) // Only update exhauster/main reservoir on locomotives fitted ith an EQ reservoir
                    {
                    UpdateVacuumExhauster(elapsedClockSeconds);
                    }
                    else
                    {
                        UpdateSteamEjector(elapsedClockSeconds);
                    }
                
                 }
                 else
                 {
                   UpdateCompressor(elapsedClockSeconds);
                 }

            UpdateHornAndBell(elapsedClockSeconds);

            UpdateSoundVariables(elapsedClockSeconds);

            PrevMotiveForceN = MotiveForceN;
            base.Update(elapsedClockSeconds);

#if DEBUG_ADHESION
            // Timer to determine travel time - resets when locomotive stops
            if (AbsSpeedMpS > 0)
            {
                DebugTimer += elapsedClockSeconds;  // Increment debug timer whilever train is moving
            }
            else
            {
                DebugTimer = 0.0f; // Reset timer if train is stopped
            }

            // Speed detector, set to print out an adhesion snapshot every 5mph increment
            if (AbsSpeedMpS > MpS.FromMpH(DebugSpeed))
            {
                if (!DebugSpeedReached)
                {
                    DebugSpeedReached = true;                    
                }
                else
                {
                    if (DebugSpeedReached)
                    {
                        DebugSpeed += DebugSpeedIncrement;
                    }
                    DebugSpeedReached = false;

                }

            }

            // Only prints out in speed increments of 5mph
            if (DebugSpeedReached)
            {
                
                Trace.TraceInformation("====================================== Debug Adhesion (MSTSLocomotive.cs) ===============================");
                Trace.TraceInformation("AntiSlip - {0} ABSWheelSpeed {1}", AntiSlip, AbsWheelSpeedMpS);
                Trace.TraceInformation("Advanced Adhesion Model - {0}", Simulator.UseAdvancedAdhesion);
                Trace.TraceInformation("Car Id: {0} Engine type: {1} Speed: {2} Gradient: {3} Time: {4}", CarID, EngineType, FormatStrings.FormatSpeedDisplay(AbsSpeedMpS, IsMetric), -CurrentElevationPercent, DebugTimer);
                Trace.TraceInformation("Rail TE: {0} DBTE: {1}", FormatStrings.FormatForce(MotiveForceN, IsMetric), FormatStrings.FormatForce(CouplerForceU, IsMetric));

                Trace.TraceInformation("Axle - Drive Force: {0} Axle Force: {1} Wheelspeed: {2}", FormatStrings.FormatForce(LocomotiveAxle.DriveForceN, IsMetric), FormatStrings.FormatForce(LocomotiveAxle.AxleForceN, IsMetric), FormatStrings.FormatSpeedDisplay(WheelSpeedMpS, IsMetric));
                Trace.TraceInformation("Axle - Axle Inertia: {0} Wheel Radius: {1}", LocomotiveAxle.InertiaKgm2, DriverWheelRadiusM);

                Trace.TraceInformation("Adhesion - Curtius_A: {0} Curtius_B: {1} Curtius_C: {2} Curtius_D: {3}", Curtius_KnifflerA, Curtius_KnifflerB, Curtius_KnifflerC, AdhesionK);
                Trace.TraceInformation("Locomotive Weight: {0} Axle Weight: {1}", MassKG, DrvWheelWeightKg);

                Trace.TraceInformation("Axle Speed: {0} TrainSpeed: {1} Slip Speed: {2}", LocomotiveAxle.AxleSpeedMpS, LocomotiveAxle.TrainSpeedMpS, LocomotiveAxle.SlipSpeedMpS);

                Trace.TraceInformation("Adhesion Conditions: {0}", LocomotiveAxle.AdhesionConditions);

                Trace.TraceInformation("Fog - Min {0} fog {1}", Math.Min((Simulator.Weather.FogDistance * 2.75e-4f + 0.45f), 1.0f), Simulator.Weather.FogDistance);

                Trace.TraceInformation("Rain - Min {0} pric {1}", Math.Min((Simulator.Weather.PricipitationIntensityPPSPM2 * 0.0078f + 0.45f), 0.607f), Simulator.Weather.PricipitationIntensityPPSPM2);

            }
#endif

        } // End Method Update

        /// <summary>
        /// This function updates periodically the states and physical variables of the locomotive's power supply.
        /// </summary>
        protected virtual void UpdatePowerSupply(float elapsedClockSeconds)
        {
        }

        /// <summary>
        /// This function updates periodically the steam heating in wagons.
        /// </summary>
        protected virtual void UpdateCarSteamHeat(float elapsedClockSeconds)
        {
        }

        /// <summary>
        /// This function updates periodically the states and physical variables of the locomotive's controllers.
        /// </summary>
        protected virtual void UpdateControllers(float elapsedClockSeconds)
        {

            SteamHeatController.Update(elapsedClockSeconds);
            if (IsPlayerTrain)
            {
                if (SteamHeatController.UpdateValue > 0.0)
                    Simulator.Confirmer.UpdateWithPerCent(CabControl.SteamHeat, CabSetting.Increase, SteamHeatController.CurrentValue * 100);
                if (SteamHeatController.UpdateValue < 0.0)
                    Simulator.Confirmer.UpdateWithPerCent(CabControl.SteamHeat, CabSetting.Decrease, SteamHeatController.CurrentValue * 100);
            }

            TrainBrakeController.Update(elapsedClockSeconds);
            if (TrainBrakeController.UpdateValue > 0.0)
            {
                Simulator.Confirmer.Update(CabControl.TrainBrake, CabSetting.Increase, GetTrainBrakeStatus());
            }

            if (TrainBrakeController.UpdateValue < 0.0)
            {
                Simulator.Confirmer.Update(CabControl.TrainBrake, CabSetting.Decrease, GetTrainBrakeStatus());
            }

            if (EngineBrakeController != null)
            {
                EngineBrakeController.Update(elapsedClockSeconds);
                if (EngineBrakeController.UpdateValue > 0.0)
                {
                    Simulator.Confirmer.Update(CabControl.EngineBrake, CabSetting.Increase, GetEngineBrakeStatus());
                }
                if (EngineBrakeController.UpdateValue < 0.0)
                {
                    Simulator.Confirmer.Update(CabControl.EngineBrake, CabSetting.Decrease, GetEngineBrakeStatus());
                }
            }

            if (BrakemanBrakeController != null)
            {
                BrakemanBrakeController.Update(elapsedClockSeconds);
                if (BrakemanBrakeController.UpdateValue > 0.0)
                {
                    Simulator.Confirmer.Update(CabControl.BrakemanBrake, CabSetting.Increase, GetBrakemanBrakeStatus());
                }
                if (BrakemanBrakeController.UpdateValue < 0.0)
                {
                    Simulator.Confirmer.Update(CabControl.BrakemanBrake, CabSetting.Decrease, GetBrakemanBrakeStatus());
                }
            }

            DynamicBrakeBlending(elapsedClockSeconds);
            if (DynamicBrakeController != null && DynamicBrakeController.CommandStartTime > DynamicBrakeCommandStartTime) // use the latest command time
                DynamicBrakeCommandStartTime = DynamicBrakeController.CommandStartTime;

            if ((DynamicBrakeController != null || DynamicBrakeBlendingEnabled || DynamicBrakeAvailable) && (DynamicBrakePercent >= 0 || IsLeadLocomotive() && DynamicBrakeIntervention >= 0))
            {
                if (!DynamicBrake)
                {
                    if (DynamicBrakeCommandStartTime + DynamicBrakeDelayS < Simulator.ClockTime /*|| (DynamicBrakeController != null && DynamicBrakeController.CommandStartTime + DynamicBrakeDelayS < Simulator.ClockTime)*/)
                    {
                        DynamicBrake = true; // Engage
                        if (IsLeadLocomotive() && DynamicBrakeController != null)
                            Simulator.Confirmer.ConfirmWithPerCent(CabControl.DynamicBrake, DynamicBrakeController.CurrentValue * 100);
                    }
                    else if (IsLeadLocomotive())
                        Simulator.Confirmer.Confirm(CabControl.DynamicBrake, CabSetting.On); // Keeping status string on screen so user knows what's happening
                }
                else if (this.IsLeadLocomotive())
                {
                    if (DynamicBrakeController != null)
                    {
                        DynamicBrakeController.Update(elapsedClockSeconds);
                        DynamicBrakePercent = (DynamicBrakeIntervention < 0.1 ? DynamicBrakeController.CurrentValue : DynamicBrakeIntervention) * 100f;
                        LocalDynamicBrakePercent = (DynamicBrakeIntervention < 0.1 ? DynamicBrakeController.CurrentValue : DynamicBrakeIntervention) * 100f;
                    }
                    else
                    {
                        DynamicBrakePercent = Math.Max(DynamicBrakeIntervention * 100f, 0f);
                        LocalDynamicBrakePercent = Math.Max(DynamicBrakeIntervention * 100f, 0f);
                    }

                    if (DynamicBrakeIntervention < 0.1 && PreviousDynamicBrakeIntervention >= 0 && DynamicBrakePercent == 0)
                    {
                        DynamicBrakePercent = -1;
                        LocalDynamicBrakePercent = -1;
                    }
                    PreviousDynamicBrakeIntervention = DynamicBrakeIntervention;
                }
                else if (DynamicBrakeController != null)
                    DynamicBrakeController.Update(elapsedClockSeconds);
            }
            else if ((DynamicBrakeController != null || DynamicBrakeBlendingEnabled || DynamicBrakeAvailable) && DynamicBrakePercent < 0 && (DynamicBrakeIntervention < 0 || !IsLeadLocomotive()) && DynamicBrake)
            {
                // <CScomment> accordingly to shown documentation dynamic brake delay is required only when engaging
                //           if (DynamicBrakeController.CommandStartTime + DynamicBrakeDelayS < Simulator.ClockTime)
                //           {
                DynamicBrake = false; // Disengage
                DynamicBrakeForceN = 0f; // Reset dynamic brake force
                if (IsLeadLocomotive())
                    Simulator.Confirmer.Confirm(CabControl.DynamicBrake, CabSetting.Off);
                //           }
                //            else if (IsLeadLocomotive())
                //               Simulator.Confirmer.Confirm(CabControl.DynamicBrake, CabSetting.On); // Keeping status string on screen so user knows what's happening
            }

            //Currently the ThrottlePercent is global to the entire train
            //So only the lead locomotive updates it, the others only updates the controller (actually useless)
            if (this.IsLeadLocomotive())
            {
                var throttleCurrentNotch = ThrottleController.CurrentNotch;
                ThrottleController.Update(elapsedClockSeconds);
                if (ThrottleController.CurrentNotch < throttleCurrentNotch && ThrottleController.ToZero)
                    SignalEvent(Event.ThrottleChange);
                ThrottlePercent = (ThrottleIntervention < 0 ? ThrottleController.CurrentValue : ThrottleIntervention) * 100.0f;
                ConfirmWheelslip(elapsedClockSeconds);
                LocalThrottlePercent = (ThrottleIntervention < 0 ? ThrottleController.CurrentValue : ThrottleIntervention) * 100.0f;
            }
            else
            {
                ThrottleController.Update(elapsedClockSeconds);
            }

#if INDIVIDUAL_CONTROL
            //this train is remote controlled, with mine as a helper, so I need to send the controlling information, but not the force.
            if (MultiPlayer.MPManager.IsMultiPlayer() && this.Train.TrainType == Train.TRAINTYPE.REMOTE && this == Program.Simulator.PlayerLocomotive)
            {
                //cannot control train brake as it is the remote's job to do so
                if ((EngineBrakeController != null && EngineBrakeController.UpdateValue != 0.0) || (DynamicBrakeController != null && DynamicBrakeController.UpdateValue != 0.0) || ThrottleController.UpdateValue != 0.0)
                {
                    controlUpdated = true;
                }
                ThrottlePercent = ThrottleController.Update(elapsedClockSeconds) * 100.0f;
                if ((DynamicBrakeController != null) && (DynamicBrakePercent >= 0)) DynamicBrakePercent = DynamicBrakeController.Update(elapsedClockSeconds) * 100.0f;
                return; //done, will go back and send the message to the remote train controller
            }

            if (MultiPlayer.MPManager.IsMultiPlayer() && this.notificationReceived == true)
            {
                ThrottlePercent = ThrottleController.CurrentValue * 100.0f;
                this.notificationReceived = false;
            }
#endif
        }

        /// <summary>
        /// This function updates periodically the locomotive's motive force.
        /// </summary>
        protected virtual void UpdateTractiveForce(float elapsedClockSeconds, float t, float AbsSpeedMpS, float AbsWheelSpeedMpS)
        {
            // Method to set force and power info
            // An alternative method in the steam locomotive will override this and input force and power info for it.
            if (DynamicBrakeFullRangeIncreaseTimeSeconds == 0)
                DynamicBrakeFullRangeIncreaseTimeSeconds = 4;
            if (DynamicBrakeFullRangeDecreaseTimeSeconds == 0)
                DynamicBrakeFullRangeDecreaseTimeSeconds = 6;
            if (PowerOn && Direction != Direction.N)
            {
                if (extendedPhysics == null)
                {
                    if (TractiveForceCurves == null && TractiveForceCurvesAC == null && TractiveForceCurvesDC == null)
                    {
                        float maxForceN = MaxForceN * t * (1 - PowerReduction);
                        float maxPowerW = MaxPowerW * t * t * (1 - PowerReduction);

                        if (maxForceN * AbsTractionSpeedMpS > maxPowerW)
                            maxForceN = maxPowerW / AbsTractionSpeedMpS;
                        //if (AbsSpeedMpS > MaxSpeedMpS)
                        //    maxForceN = 0;
                        if (AbsTractionSpeedMpS > MaxSpeedMpS - 0.05f)
                            maxForceN = 20 * (MaxSpeedMpS - AbsTractionSpeedMpS) * maxForceN;
                        if (AbsSpeedMpS > (MaxSpeedMpS))
                            maxForceN = 0;

                        maxForceN = maxForceN * UiPowerLose;
                        TractiveForceN = maxForceN;
                    }
                    else
                    {
                        if (t > 0)
                        {
                            // Icik
                            switch (SwitchingVoltageMode)
                            {
                                case 0:
                                    if (TractiveForceCurvesDC != null)
                                    {
                                        TractiveForceN = TractiveForceCurvesDC.Get(t, AbsTractionSpeedMpS) * (1 - PowerReduction);
                                        if (TractiveForceN < 0 && !TractiveForceCurvesDC.AcceptsNegativeValues())
                                            TractiveForceN = 0;
                                    }
                                    break;
                                case 1:
                                    if (TractiveForceCurves != null)
                                    {
                                        TractiveForceN = TractiveForceCurves.Get(t, AbsTractionSpeedMpS) * (1 - PowerReduction);
                                        if (TractiveForceN < 0 && !TractiveForceCurves.AcceptsNegativeValues())
                                            TractiveForceN = 0;
                                    }
                                    break;
                                case 2:
                                    if (TractiveForceCurvesAC != null)
                                    {
                                        TractiveForceN = TractiveForceCurvesAC.Get(t, AbsTractionSpeedMpS) * (1 - PowerReduction);
                                        if (TractiveForceN < 0 && !TractiveForceCurvesAC.AcceptsNegativeValues())
                                            TractiveForceN = 0;
                                    }
                                    break;
                            }
                            TractiveForceN = TractiveForceN * UiPowerLose;
                        }
                        else
                        {
                            TractiveForceN = 0;
                        }
                    }
                }
                else
                {
                    TractiveForceN = 0;
                    foreach (Undercarriage uc in extendedPhysics.Undercarriages)
                    {
                        foreach (ExtendedAxle ea in uc.Axles)
                        {
                            TractiveForceN += ea.ForceN;
                        }
                    }
                }
            }
            else
                TractiveForceN = 0f;

            /*if (MaxForceN > 0 && MaxContinuousForceN > 0 && PowerReduction < 1)
            {
                if (!float.IsNaN(AverageForceN))
                    TractiveForceN *= 1 - (MaxForceN - MaxContinuousForceN) / (MaxForceN * MaxContinuousForceN) * AverageForceN * (1 - PowerReduction);
                float w = (ContinuousForceTimeFactor - elapsedClockSeconds) / ContinuousForceTimeFactor;
                if (w < 0)
                    w = 0;
                AverageForceN = w * AverageForceN + (1 - w) * TractiveForceN;
            }*/
        }

        /// <summary>
        /// This function applies a sign to the motive force as a function of the direction of the train.
        /// </summary>
        protected virtual void ApplyDirectionToTractiveForce()
        {
            // Steam locomotives have their MotiveForceN already pre-inverted based on Direction
            if (!(this is MSTSSteamLocomotive))
            {
                if (Train.IsPlayerDriven)
                {
                    switch (Direction)
                    {
                        case Direction.Forward:
                            //MotiveForceN *= 1;     //Not necessary
                            break;
                        case Direction.Reverse:
                            TractiveForceN *= -1;
                            break;
                        case Direction.N:
                        default:
                            TractiveForceN *= 0;
                            break;
                    }
                }
                else // for AI locomotives
                {
                    switch (Direction)
                    {
                        case Direction.Reverse:
                            TractiveForceN *= -1;
                            break;
                        default:
                            break;
                    }
                }// end AI locomotive
            }
        }

        public enum CurrentDirectionEnum // used for drive or dynamic brake
        {
            Accelerating,
            Braking
        };

        protected enum Wheelslip
        {
            None,
            Warning,
            Occurring
        };

        protected Wheelslip WheelslipState = Wheelslip.None;

        public void ConfirmWheelslip(float elapsedClockSeconds)
        {
            if (extendedPhysics != null) // extended physics calculates its own wheelslip parametres
            {
                WheelSlip = false;
                return;
            }
            if (elapsedClockSeconds > 0 && Simulator.GameTime - LocomotiveAxle.ResetTime > 5)
            {
                if (AdvancedAdhesionModel)
                {
                    // Wheelslip
                    if (LocomotiveAxle.IsWheelSlip)
                    {
                        if (WheelslipState != Wheelslip.Occurring)
                        {
                            WheelslipState = Wheelslip.Occurring;
                            Simulator.Confirmer.Warning(CabControl.Wheelslip, CabSetting.On);
                        }
                    }
                    else
                    {
                        if (LocomotiveAxle.IsWheelSlipWarning)
                        {
                            if (WheelslipState != Wheelslip.Warning)
                            {
                                WheelslipState = Wheelslip.Warning;
                                Simulator.Confirmer.Confirm(CabControl.Wheelslip, CabSetting.Warn1);
                            }
                        }
                        else
                        {
                            if (WheelslipState != Wheelslip.None)
                            {
                                WheelslipState = Wheelslip.None;
                                Simulator.Confirmer.Confirm(CabControl.Wheelslip, CabSetting.Off);
                            }
                        }
                    }
                }
                else
                {
                    if (WheelSlip && (WheelslipState != Wheelslip.Occurring))
                    {
                        WheelslipState = Wheelslip.Occurring;
                        Simulator.Confirmer.Warning(CabControl.Wheelslip, CabSetting.On);
                    }
                    if ((!WheelSlip) && (WheelslipState != Wheelslip.None))
                    {
                        WheelslipState = Wheelslip.None;
                        Simulator.Confirmer.Confirm(CabControl.Wheelslip, CabSetting.Off);
                    }
                }
            }
        }

        /// <summary>
        /// This function updates periodically the state of the steam ejector or vacuum pump on a vacuum braked system.
        /// </summary>
        protected virtual void UpdateSteamEjector(float elapsedClockSeconds)
        {
                 // Ejectors are controlled independently for the "straight_vacuum_single_pipe" brake type 
                 // Ejectors are controlled by brake control valves in Simple Physics Control
                if (Simulator.Settings.SimpleControlPhysics && CarBrakeSystemType != "straight_vacuum_single_pipe")
                // Simple braking - control Ejector automatically based upon the brake control position
                // Stop ejector operation if full vacuum pressure reached
                {
                if ((TrainBrakeController.TrainBrakeControllerState == ControllerState.Release || TrainBrakeController.TrainBrakeControllerState == ControllerState.FullQuickRelease || (TrainBrakeController.TrainBrakeControllerState == ControllerState.VacContServ)) && (this.BrakeSystem.BrakeLine1PressurePSI > Vac.ToPress(this.TrainBrakeController.MaxPressurePSI)))
                {
                    LargeSteamEjectorIsOn = true;  // If brake is set to a release controller, then turn ejector on
                    LargeEjectorSoundOn = true;
                }
                else
                {
                    LargeSteamEjectorIsOn = false; // If brake is not set to a release controller, or full vacuum reached, then turn ejector off
                    LargeEjectorSoundOn = false;
                }
                }
                else if (!LargeEjectorControllerFitted && CarBrakeSystemType != "straight_vacuum_single_pipe") // Use an "automatic" large ejector when using a dreadnought style brake controller - large ejector stays on until moved back to released position
                {
                    if (TrainBrakeController.TrainBrakeControllerState == ControllerState.Release)
                    {
                        LargeSteamEjectorIsOn = true;  // If brake is set to a release controller, then turn ejector on
                        LargeEjectorSoundOn = true;
                    }
                    else
                    {
                        LargeSteamEjectorIsOn = false; // If brake is not set to a release controller, then turn ejector off
                        if (LargeEjectorSoundOn)
                        {
                            SignalEvent(Event.LargeEjectorOff);
                            LargeEjectorSoundOn = false;
                        }
                    }

                }
                else  if (LargeEjectorControllerFitted)// Advanced braking - control ejector based upon using a "manual" large ejector control setting
                {
                    if (LargeEjectorFeedFraction > 0.05)
                    {
                        LargeSteamEjectorIsOn = true;  // turn ejector on
                        LargeEjectorSoundOn = true;
                    }
                    else
                    {
                        LargeSteamEjectorIsOn = false; // turn ejector off
                        LargeEjectorSoundOn = false;
                    }
                }


                if (SmallEjectorControllerFitted && CarBrakeSystemType != "straight_vacuum_single_pipe")
                // Turn small ejector on if controlled from drivers controller
                if (SmallEjectorFeedFraction > 0.05)
                {
                    SmallSteamEjectorIsOn = true;  // turn ejector on
                    SmallEjectorSoundOn = true;
                }
                else if (SmallEjectorControllerFitted)
                {
                    SmallSteamEjectorIsOn = false; // turn ejector off
                    SmallEjectorSoundOn = false;
                }

            
            // If diesel or electric locomotive, assume vacuum pump (exhauster) is continually running.
            if (!(this is MSTSSteamLocomotive))
            {
                VacuumPumpOperating = true;
            }
        }

        /// <summary>
        /// This function updates periodically the state of the vacuum exhauster on a vacuum braked system with a EQ reservoir.
        /// Resevoir vacuum is maintained in "atmospheric pressure" and converted to vacuum
        /// Vacuum reservoir should normally be maintained at approx 26InHg (4.185 psi)
        /// </summary>
        protected virtual void UpdateVacuumExhauster(float elapsedClockSeconds)
        {
            if (VacuumMainResVacuumPSIAorInHg > VacuumBrakesExhausterRestartVacuumPSIAorInHg && AuxPowerOn && !VacuumExhausterIsOn)
                SignalEvent(Event.VacuumExhausterOn);
            else if ((VacuumMainResVacuumPSIAorInHg < VacuumBrakesMainResMaxVacuumPSIAorInHg || !AuxPowerOn) && VacuumExhausterIsOn)
                SignalEvent(Event.VacuumExhausterOff);

        }

        /// <summary>
        /// This function updates periodically the state of the compressor and charges the main reservoir if the compressor is active.
        /// </summary>
        protected virtual void UpdateCompressor(float elapsedClockSeconds)
        {
            if (CompressorIsOn)
                MainResPressurePSI += elapsedClockSeconds * MainResChargingRatePSIpS;

            if (Compressor2IsOn)
                MainResPressurePSI += elapsedClockSeconds * MainResChargingRatePSIpS_2;

            if (AuxCompressorIsOn)
                AuxResPressurePSI += elapsedClockSeconds * AuxResChargingRatePSIpS;            
        }

        /// <summary>
        /// This function updates periodically the states of the horn/whistle and the bell of the locomotive.
        /// </summary>
        protected virtual void UpdateHornAndBell(float elapsedClockSeconds)
        {
            Horn = ManualHorn || TCSHorn;
            if (Horn && !PreviousHorn)
            {
                SignalEvent(Event.HornOn);
                if (MPManager.IsMultiPlayer()) MPManager.Notify((new MSGEvent(MPManager.GetUserName(), "HORN", 1)).ToString());
            }
            else if (!Horn && PreviousHorn)
            {
                SignalEvent(Event.HornOff);
                if (MPManager.IsMultiPlayer()) MPManager.Notify((new MSGEvent(MPManager.GetUserName(), "HORN", 0)).ToString());
            }

            if (ManualBell)
            {
                BellState = SoundState.Sound;
            }
            else if (DoesHornTriggerBell && Horn)
            {
                BellState = SoundState.ContinuousSound;
            }
            else if (!ManualBell && BellState == SoundState.Sound)
            {
                BellState = SoundState.Stopped;
            }

            Bell = BellState != SoundState.Stopped;
            if (Bell && !PreviousBell)
            {
                SignalEvent(Event.BellOn);
                if (Train.TrainType != Train.TRAINTYPE.REMOTE && MPManager.IsMultiPlayer()) MPManager.Notify((new MSGEvent(MPManager.GetUserName(), "BELL", 1)).ToString());
            }
            else if (!Bell && PreviousBell)
            {
                SignalEvent(Event.BellOff);
                if (Train.TrainType != Train.TRAINTYPE.REMOTE && MPManager.IsMultiPlayer()) MPManager.Notify((new MSGEvent(MPManager.GetUserName(), "BELL", 0)).ToString());
            }

            PreviousHorn = Horn;
            PreviousBell = Bell;
        }

        /// <summary>
        /// This function updates periodically the locomotive's sound variables.
        /// </summary>
        protected virtual void UpdateSoundVariables(float elapsedClockSeconds)
        {
        }

        /// <summary>
        /// Calls the Update method in the parent class MSTSWagon.
        /// </summary>
        /// <param name="elapsedClockSeconds"></param>
        protected void UpdateParent(float elapsedClockSeconds)
        {
            base.Update(elapsedClockSeconds);
        }

        /// <summary>
        /// Adjusts the MotiveForce to account for adhesion limits
        /// If UseAdvancedAdhesion is true, dynamic adhesion model is computed
        /// If UseAdvancedAdhesion is false, the basic force limits are calculated the same way MSTS calculates them, but
        /// the weather handleing is different and Curtius-Kniffler curves are considered as a static limit
        /// </summary>
        public void AdvancedAdhesion(float elapsedClockSeconds)
        {

            if (LocoNumDrvAxles <= 0)
            {
                WheelSpeedMpS = AbsSpeedMpS;
                return;
            }

            //Curtius-Kniffler computation for the basic model
    //        float max0 = 1.0f;  //Adhesion conditions [N]

            if (EngineType == EngineTypes.Steam && SteamEngineType != MSTSSteamLocomotive.SteamEngineTypes.Geared )
             {
                // Steam locomotive details updated in UpdateTractiveForce method, and inserted into adhesion module
                // ****************  NB WheelSpeed updated within Steam Locomotive module at the moment - to be fixed to prevent discrepancies ******************
            }
            
            else 
            {
               
                //Compute axle inertia from parameters if possible
                if (AxleInertiaKgm2 > 10000.0f) // if axleinertia value supplied in ENG file, then use in calculations
                {
                    LocomotiveAxle.InertiaKgm2 = AxleInertiaKgm2;
                }
                else // if no value in ENG file, calculate axleinertia value.
                {
                    if (WheelAxles.Count > 0 && DriverWheelRadiusM > 0)
                    {
                        float upperLimit = 2.0f * WheelAxles.Count * (15000.0f * DriverWheelRadiusM - 2900.0f);
                        upperLimit = upperLimit < 100.0f ? 100.0f : upperLimit;

                        float lowerLimit = WheelAxles.Count * (9000.0f * DriverWheelRadiusM - 1750.0f);
                        lowerLimit = lowerLimit < 100.0f ? 100.0f : lowerLimit;

                        LocomotiveAxle.InertiaKgm2 = (upperLimit - lowerLimit) / (5000000.0f) * MaxPowerW + lowerLimit;
                    }
                    else
                        LocomotiveAxle.InertiaKgm2 = 32000.0f;
                }
                //Limit the inertia to 40000 kgm2
                LocomotiveAxle.InertiaKgm2 = LocomotiveAxle.InertiaKgm2 > 40000.0f ? 40000.0f : LocomotiveAxle.InertiaKgm2;

                LocomotiveAxle.AxleRevolutionsInt.MinStep = LocomotiveAxle.InertiaKgm2 / MaxPowerW / 5.0f;


                //Set axle model parameters

                //LocomotiveAxle.BrakeForceN = FrictionForceN;
                //  LocomotiveAxle.BrakeRetardForceN = BrakeForceN;

                //LocomotiveAxle.BrakeRetardForceN = BrakeRetardForceN;
                // Icik
                // Součinitel využití adheze (výchozí hodnota 1.00)
                if (AdhesionEfficiencyKoef == 0) AdhesionEfficiencyKoef = 1.00f;
                LocomotiveAxle.AdhesionEfficiencyKoef = AdhesionEfficiencyKoef;               
                
                // Upravuje chybu v adhezi pokud vůz brzdí (brzdí plnou vahou tzn. všemi koly)
                LocomotiveAxle.BrakeRetardForceN = BrakeRetardForceN / (MassKG / DrvWheelWeightKg);

                LocomotiveAxle.AxleWeightN = 9.81f * DrvWheelWeightKg;   //will be computed each time considering the tilting
                LocomotiveAxle.DriveForceN = MotiveForceN * (1 - PowerReduction);  //Total force applied to wheels
                LocomotiveAxle.TrainSpeedMpS = SpeedMpS;            //Set the train speed of the axle model
                LocomotiveAxle.Update(elapsedClockSeconds);         //Main updater of the axle model
                MotiveForceN = LocomotiveAxle.AxleForceN;           //Get the Axle force and use it for the motion
                if (elapsedClockSeconds > 0)
                {
                    WheelSlip = LocomotiveAxle.IsWheelSlip;             //Get the wheelslip indicator
                    WheelSlipWarning = LocomotiveAxle.IsWheelSlipWarning;
                }
                WheelSpeedMpS = LocomotiveAxle.AxleSpeedMpS;
            }
        }

        public void SimpleAdhesion()
        {

            // Check if the following few lines are required???
            if (LocoNumDrvAxles <= 0)
            {
                WheelSpeedMpS = AbsSpeedMpS;
                return;
            }
            
            if (LocoNumDrvAxles <= 0)
                return;

            //Curtius-Kniffler computation
            // Set to a high level of adhesion to ensure that locomotive rarely slips in dry mode
            float uMax = 1.3f * (7.5f / (AbsSpeedMpS + 44.0f) + 0.161f); // Curtius - Kniffler equation
 
            float max0 = DrvWheelWeightKg * 9.81f * uMax;  //Ahesion limit in [N]
            float max1;

            if (Simulator.WeatherType == WeatherType.Rain || Simulator.WeatherType == WeatherType.Snow)
            {
                if (Train.SlipperySpotDistanceM < 0)
                {
                    Train.SlipperySpotLengthM = 10 + 40 * (float)Simulator.Random.NextDouble();
                    Train.SlipperySpotDistanceM = Train.SlipperySpotLengthM + 2000 * (float)Simulator.Random.NextDouble();
                }
                if (Train.SlipperySpotDistanceM < Train.SlipperySpotLengthM)
                    max0 *= 0.8f;
                if (Simulator.WeatherType == WeatherType.Rain)
                    max0 *= 0.8f;
                else
                    max0 *= 0.7f;
            }
            //float max1 = (Sander ? .95f : Adhesion2) * max0;  //Not used this way
            max1 = MaxForceN;
            //add sander
            if (AbsSpeedMpS < SanderSpeedOfMpS && CurrentTrackSandBoxCapacityM3 > 0.0 && MainResPressurePSI > 80.0)
            {
                if (SanderSpeedEffectUpToMpS > 0.0f)
                {
                    if ((Sander) && (AbsSpeedMpS < SanderSpeedEffectUpToMpS))
                    {
                        switch (Simulator.WeatherType)
                        {
                            case WeatherType.Clear: max0 *= (1.0f - 0.5f / SanderSpeedEffectUpToMpS * AbsSpeedMpS) * 1.2f; break;
                            case WeatherType.Rain: max0 *= (1.0f - 0.5f / SanderSpeedEffectUpToMpS * AbsSpeedMpS) * 1.8f; break;
                            case WeatherType.Snow: max0 *= (1.0f - 0.5f / SanderSpeedEffectUpToMpS * AbsSpeedMpS) * 2.5f; break;
                        }
                    }
                }
                else
                    if (Sander)
                {
                    switch (Simulator.WeatherType)
                    {
                        case WeatherType.Clear: max0 *= 1.2f; break;
                        case WeatherType.Rain: max0 *= 1.8f; break;
                        case WeatherType.Snow: max0 *= 2.5f; break;
                    }
                }
            }

            max1 = max0;

            WheelSlip = false;

            if (MotiveForceN > max1)
            {
                WheelSlip = true;
                if (AntiSlip)
                    MotiveForceN = max1;
                else
                    MotiveForceN = Adhesion1 * max0;        //Lowers the adhesion limit to 20% of its full
            }
            else if (MotiveForceN < -max1)
            {
                WheelSlip = true;
                if (AntiSlip)
                    MotiveForceN = -max1;
                else
                    MotiveForceN = -Adhesion1 * max0;       //Lowers the adhesion limit to 20% of its full
            }
        }

        /// <summary>
        /// Refills the locomotive from a water trough
        /// </summary>
        public virtual void UpdateWaterTroughRefill(float elapsedClockSeconds, float absSpeedMpS)
        {
            // Check to see whether locomotive is to be refilled over water trough
            if (Simulator.PlayerLocomotive == this && IsWaterScoopDown)
            {
                var fraction = GetFilledFraction((uint)MSTSWagon.PickupType.FuelWater);

                if (!HasWaterScoop)
                {
                    if (!WaterScoopNotFittedFlag)
                    {
                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("No water scoop on this loco"));
                        WaterScoopNotFittedFlag = true;
                    }
                    RefillingFromTrough = false;
                }
                else if (ScoopIsBroken)
                {
                    Simulator.Confirmer.Message(ConfirmLevel.Error, Simulator.Catalog.GetString("Scoop is broken, can't refill"));
                    RefillingFromTrough = false;       
                }
                else if (IsOverJunction())
                {
                    if (!ScoopIsBroken) // Only display message first time scoop is broken
                    {
                        Simulator.Confirmer.Message(ConfirmLevel.Error, Simulator.Catalog.GetString("Scoop is broken by junction track"));
                    }
                    ScoopIsBroken = true;
                    RefillingFromTrough = false;
                    SignalEvent(Event.WaterScoopBroken);       
                }
                else if (!IsOverTrough())
                {
                    if (!WaterScoopOverTroughFlag)
                    {
                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Scoop is not over trough, can't refill"));
                        WaterScoopOverTroughFlag = true;
                        MSTSWagon.RefillProcess.OkToRefill = false;
                        MSTSWagon.RefillProcess.ActivePickupObjectUID = 0;
                    }
                    RefillingFromTrough = false;
                }
                else if (IsTenderRequired == 1 && Direction == Direction.Reverse) // Locomotives with tenders cannot go in reverse
                {
                    if (!WaterScoopDirectionFlag)
                    {
                        Simulator.Confirmer.Message(ConfirmLevel.None, Simulator.Catalog.GetStringFmt("Refill: Loco must be moving forward."));
                        WaterScoopDirectionFlag = true;
                    }
                    RefillingFromTrough = false;
                }
                else if (absSpeedMpS < WaterScoopMinSpeedMpS)
                {
                    if (!WaterScoopSlowSpeedFlag)
                    {
                        Simulator.Confirmer.Message(ConfirmLevel.None, Simulator.Catalog.GetStringFmt("Refill: Loco speed must exceed {0} for water to enter tender.",
                                FormatStrings.FormatSpeedLimit(WaterScoopMinSpeedMpS, MilepostUnitsMetric)));
                        WaterScoopSlowSpeedFlag = true;
                        MSTSWagon.RefillProcess.OkToRefill = false;
                        MSTSWagon.RefillProcess.ActivePickupObjectUID = 0;
                    }
                    RefillingFromTrough = false;
                }
                else if (fraction > 1.0)
                {
                    Simulator.Confirmer.Message(ConfirmLevel.None, Simulator.Catalog.GetStringFmt("Refill: Water supply now replenished."));
                }
                else
                {
                    MSTSWagon.RefillProcess.OkToRefill = true;
                    MSTSWagon.RefillProcess.ActivePickupObjectUID = -1;
                    RefillingFromTrough = true;
                    WaterScoopOverTroughFlag = false; // Reset flag so that message will come up again
                }

            }
            else if (HasWaterScoop && MSTSWagon.RefillProcess.OkToRefill == true && IsOverTrough())// water scoop has been raised, stop water filling
            {
                MSTSWagon.RefillProcess.OkToRefill = false;
                MSTSWagon.RefillProcess.ActivePickupObjectUID = 0;
                RefillingFromTrough = false;
            }


            // update water scoop
            // Water scoop fill charateristics can be found in - 
            // Calculate water velocity entering pipe: v = SQRT ( loco speed^2 - 2 * gravity * h)
            // Calculate the drag of the water scoop in the water: Drag Force = 0.5 * Drag Coeff * Fluid Density * Reference Area * Velocity

            if (RefillingFromTrough)
            {
                // Calculate water velocity
                const float Aconst = 2;
                const float Bconst = 2.15f;
                float Avalue = ((float)Math.Pow(MpS.ToMpH(absSpeedMpS), 2) * Bconst);
                float Bvalue = Aconst * GravitationalAccelerationFtpSpS * Me.ToFt(WaterScoopFillElevationM);

                if (Avalue > Bvalue)
                {
                    WaterScoopVelocityMpS = Me.FromFt((float)Math.Sqrt(Avalue - Bvalue));
                }
                else
                {
                    WaterScoopVelocityMpS = 0;
                }

                // calculate volume of water scooped per period
                const float CuFttoGalUK = 6.22884f; // imperial gallons of water in a cubic foot of water
                WaterScoopedQuantityLpS = L.FromGUK(Me2.ToFt2((WaterScoopDepthM * WaterScoopWidthM)) * Me.ToFt(WaterScoopVelocityMpS) * CuFttoGalUK);
                WaterScoopInputAmountL = WaterScoopedQuantityLpS * elapsedClockSeconds; // Calculate current input quantity

                // Max sure that water level can't exceed maximum tender water level. Assume that water will be vented out of tender if maximum value exceeded. 
                // If filling from water trough this will be done with force
                // The water controller can only be used by one stock item at a time.
                if (EngineType == EngineTypes.Steam)
                {
                    const float NominalExtraWaterVolumeFactor = 1.0001f;
                    CombinedTenderWaterVolumeUKG += L.ToGUK(WaterScoopInputAmountL); // add the amount of water added by scoop
                    WaterScoopTotalWaterL += WaterScoopInputAmountL;
                    CombinedTenderWaterVolumeUKG = MathHelper.Clamp(CombinedTenderWaterVolumeUKG, 0.0f, MaxTotalCombinedWaterVolumeUKG * NominalExtraWaterVolumeFactor);
                }
                else
                {
                    CurrentLocomotiveSteamHeatBoilerWaterCapacityL += WaterScoopInputAmountL; // add water if it is a steam heat boiler
                    CurrentLocomotiveSteamHeatBoilerWaterCapacityL = MathHelper.Clamp(CurrentLocomotiveSteamHeatBoilerWaterCapacityL, 0.0f, MaximumSteamHeatBoilerWaterTankCapacityL);
                }

                // Calculate drag force
                float ScoopDragCoeff = 1.05f;
                float ScoopDragAreaM = WaterScoopDepthM * WaterScoopWidthM;
                float ScoopFluidDensityKgpM3 = 998.2f; // Fuild density of water @ 20c
                WaterScoopDragForceN = 0.5f * ScoopDragCoeff * ScoopFluidDensityKgpM3 * ScoopDragAreaM * absSpeedMpS * absSpeedMpS;

                // Turn water scoop sound on
                if (!WaterScoopSoundOn)
                {
                    WaterScoopSoundOn = true;
                    SignalEvent(Event.WaterScoopDown);
                }
            }
            else // Ensure water scoop values are zero if not taking water.
            {
                WaterScoopDragForceN = 0f;
                WaterScoopedQuantityLpS = 0;
                WaterScoopInputAmountL = 0;
                WaterScoopVelocityMpS = 0;

                if (!IsOverTrough()) // Only reset once train moves off the trough
                {
                    WaterScoopTotalWaterL = 0.0f; // Reset amount of water picked up by water sccop.
                }

                // Turn water scoop sound off
                if (WaterScoopSoundOn)
                {
                    WaterScoopSoundOn = false;
                    SignalEvent(Event.WaterScoopUp);
                }
            }
        }

        #region Calculate Friction Coefficient
        /// <summary>
        /// Calculates the current coefficient of friction based upon the current weather 
        /// The calculation of Coefficient of Friction appears to provide a wide range of 
        /// variations depending upon a number of factors including the wheel and track 
        /// composition, and whether the track is dry, wet (or lubricated), icy, covered 
        /// in leaf litter, etc.
        /// For the purposes of simulating frcition the following values have been used. 
        /// Some reference documents have suggested that friction can vary between 0.07 
        /// for lubricated or icy track to 0.78 for dry track.
        /// The standard Cutius-Kniffler formula for dry rail is used as a base.
        /// Dry track = 0.33 
        /// 
        /// The following values are indicatitive values only (sourced from Principles and Applications of Tribology).
        /// Wet track (clean) = 0.18 <=> 0.2
        /// Wet track (sand) = 0.22 <=> 0.25
        /// Dew or fog = 0.09 <=> 0.15
        /// Sleet = 0.15
        /// Sleet (sand) = 0.2
        /// Snow track = 0.1 
        /// Snow track (sand) = 0.15
        /// 
        /// Note Heavy rain will actually wash track clean, and will give a higher value of adhesion then light drizzling rain
        /// </summary>
        public virtual void UpdateFrictionCoefficient(float elapsedClockSeconds)
        {
            //float BaseuMax = AdhesionEfficiencyKoef * (Curtius_KnifflerA / (MpS.ToKpH(AbsSpeedMpS) + Curtius_KnifflerB) + Curtius_KnifflerC); // Base Curtius - Kniffler equation - u = 0.33, all other values are scaled off this formula
            if (AdhesionEfficiencyKoef == 0) AdhesionEfficiencyKoef = 1.00f;
            float BaseuMax = AdhesionEfficiencyKoef * (Curtius_KnifflerA / (MpS.ToKpH(AbsSpeedMpS) + Curtius_KnifflerB) + Curtius_KnifflerC); // Base Curtius - Kniffler equation - u = 0.33, all other values are scaled off this formula
            float SandingFrictionCoefficientFactor = 0.0f;
            //Set the friction coeff due to weather
            if (Simulator.WeatherType == WeatherType.Rain || Simulator.WeatherType == WeatherType.Snow)
            {
                if (Train.SlipperySpotDistanceM < 0)
                {
                    Train.SlipperySpotLengthM = 10 + 40 * (float)Simulator.Random.NextDouble();
                    Train.SlipperySpotDistanceM = Train.SlipperySpotLengthM + 2000 * (float)Simulator.Random.NextDouble();
                }
                if (Train.SlipperySpotDistanceM < Train.SlipperySpotLengthM)
                {
                    BaseFrictionCoefficientFactor = 0.8f;                    
                }
                if (Simulator.WeatherType == WeatherType.Rain) // Wet weather
                {
                    if (Simulator.Settings.AdhesionProportionalToWeather && AdvancedAdhesionModel && !Simulator.Paused)  // Adjust clear weather for precipitation presence - base friction value will be approximately between 0.15 and 0.2
                    // ie base value between 0.8 and 1.0 (TODO) 
                    // note lowest friction will be for drizzle rain; friction will increase for precipitation both higher and lower than drizzle rail
                    {
                        // Icik
                        float pric = Simulator.Weather.PricipitationIntensityPPSPM2; // Nabývá max 1
                        // precipitation will calculate a value between 0.15 (light rain) and 0.2 (heavy rain) - this will be a factor that is used to adjust the base value - assume linear value between upper and lower precipitation values
                        if (pric >= 0.50f)
                        {   //BaseFrictionCoefficientFactor = Math.Min((pric * 0.0078f + 0.45f), 0.8f); // should give a minimum value between 0.8 and 1.0
                            BaseFrictionCoefficientFactor = Math.Min(pric - (0.1f * pric), 0.86f);                            
                        }
                        else
                        {   //BaseFrictionCoefficientFactor = Math.Min((0.4539f + 1.0922f * (0.5f - pric)), 0.8f); // should give a minimum value between 0.8 and 1.0
                            BaseFrictionCoefficientFactor = Math.Min(1 - (pric * 0.5f), BaseFrictionCoefficientFactor0);                            
                        }
                        if (BaseFrictionCoefficientFactor < 0.68f) BaseFrictionCoefficientFactor = 0.68f;
                    }
                    else // if not proportional to precipitation use fixed friction value of 0.8 x friction coefficient of 0.33
                    {
                        BaseFrictionCoefficientFactor = 0.8f;
                    }
                }
                else     // Snow weather
                {
                    //BaseFrictionCoefficientFactor = 0.6f;
                    // Icik
                    float pric = Simulator.Weather.PricipitationIntensityPPSPM2; // Nabývá max 1                               
                    if (pric >= 0.60f)
                    {   
                        BaseFrictionCoefficientFactor = Math.Min(1 - (pric * 0.28f), BaseFrictionCoefficientFactor0);                        
                    }
                    else
                    {   
                        BaseFrictionCoefficientFactor = Math.Min(1 - (pric * 0.05f), BaseFrictionCoefficientFactor0);
                    }
                    if (BaseFrictionCoefficientFactor < 0.72f) BaseFrictionCoefficientFactor = 0.72f;
                }

                //add sander - more effective in wet weather, so increases adhesion by more
                if (AbsSpeedMpS < SanderSpeedOfMpS && CurrentTrackSandBoxCapacityM3 > 0.0 && MainResPressurePSI > 80.0 && (AbsSpeedMpS > 0))
                {
                    // Icik
                    if (SanderSpeedEffectUpToMpS == 0) SanderSpeedEffectUpToMpS = 112 / 3.6f; // 112km/h
                    if (SanderSpeedEffectUpToMpS > 0.0f)
                    {
                        if ((Sander) && (AbsSpeedMpS < SanderSpeedEffectUpToMpS))
                        {
                            // Icik
                            SandingFrictionCoefficientFactor = 1 + (0.75f * ((SanderSpeedEffectUpToMpS - AbsSpeedMpS) / SanderSpeedEffectUpToMpS));
                            BaseFrictionCoefficientFactor *= SandingFrictionCoefficientFactor;
                        }
                    }
                    else
                    {
                        if (Sander)  // If sander is on, and train speed is greater then zero, then put sand on the track
                        {
                            SandingFrictionCoefficientFactor = 1.75f;                            
                            BaseFrictionCoefficientFactor *= SandingFrictionCoefficientFactor; // Sanding track adds approx 175% adhesion (best case)
                        }
                    }
                }
            }
            else // Default to Dry (Clear) weather
            {

                if (Simulator.Settings.AdhesionProportionalToWeather && AdvancedAdhesionModel && !Simulator.Paused)  // Adjust clear weather for fog presence
                {
                    float fog = Simulator.Weather.FogDistance;
                    if (fog > 2000)
                    {
                        BaseFrictionCoefficientFactor = 1.0f; // if fog is not too thick don't change the friction
                    }
                    else
                    {
                        //BaseFrictionCoefficientFactor = Math.Min((fog * 2.75e-4f + 0.8f), 0.8f); // If fog is less then 2km then it will impact friction, decrease adhesion by up to 20% (same as clear to wet transition)
                        BaseFrictionCoefficientFactor = Math.Min((fog * 2.75e-4f + 0.9f), 0.95f); // If fog is less then 2km then it will impact friction, decrease adhesion by up to 20% (same as clear to wet transition)
                    }                    
                }
                else // if not proportional to fog use fixed friction value approximately equal to 0.33, thus factor will be 1.0 x friction coefficient of 0.33
                {
                    BaseFrictionCoefficientFactor = 1.0f;
                }

                //add sander - not as effective in dry weather
                if (AbsSpeedMpS < SanderSpeedOfMpS && CurrentTrackSandBoxCapacityM3 > 0.0 && MainResPressurePSI > 80.0 && (AbsSpeedMpS > 0))
                {
                    // Icik
                    if (SanderSpeedEffectUpToMpS == 0) SanderSpeedEffectUpToMpS = 112 / 3.6f; // 112km/h
                    if (SanderSpeedEffectUpToMpS > 0.0f)
                    {
                        if ((Sander) && (AbsSpeedMpS < SanderSpeedEffectUpToMpS))
                        {
                            // Icik
                            SandingFrictionCoefficientFactor = 1 + (0.25f * ((SanderSpeedEffectUpToMpS - AbsSpeedMpS) / SanderSpeedEffectUpToMpS));
                            BaseFrictionCoefficientFactor *= SandingFrictionCoefficientFactor;
                        }
                    }
                    else
                    {
                        if (Sander)  // If sander is on, and train speed is greater then zero, then put sand on the track
                        {
                            SandingFrictionCoefficientFactor = 1.25f;
                            BaseFrictionCoefficientFactor *= SandingFrictionCoefficientFactor; // Sanding track adds approx 125% adhesion (best case)
                        }
                    }
                }
                BaseFrictionCoefficientFactor0 = BaseFrictionCoefficientFactor;
            }

            // For wagons use base Curtius-Kniffler adhesion factor - u = 0.33
            float WagonCurtius_KnifflerA = 7.5f;
            float WagonCurtius_KnifflerB = 44.0f;
            float WagonCurtius_KnifflerC = 0.161f;
            
            float WagonBaseuMax = (WagonCurtius_KnifflerA / (MpS.ToKpH(AbsSpeedMpS) + WagonCurtius_KnifflerB) + WagonCurtius_KnifflerC);
            Train.WagonCoefficientFriction = WagonBaseuMax * BaseFrictionCoefficientFactor;  // Find friction coefficient factor for wagons based upon environmental conditions
            WagonCoefficientFrictionHUD = Train.WagonCoefficientFriction; // Save value for HUD display

            if (EngineType == EngineTypes.Steam && SteamDrvWheelWeightLbs < 10000 && Simulator.WeatherType == WeatherType.Clear)
            {
                BaseFrictionCoefficientFactor *= 0.75f;  // Dry track - static friction for vehicles with wheel weights less then 10,000lbs - u = 0.25

            }

            if (WheelSlip && ThrottlePercent > 0.2f && !BrakeSkid)   // Test to see if loco wheel is slipping, then coeff of friction will be decreased below static value. Sanding will override this somewhat
            {
                BaseFrictionCoefficientFactor = 0.15f * SandingFrictionCoefficientFactor;  // Descrease friction to take into account dynamic (kinetic) friction U = 0.0525
            }
            else if (WheelSlip && ThrottlePercent < 0.1f && BrakeSkid) // Test to see if loco wheel is skidding due to brake application
            {
                BaseFrictionCoefficientFactor = 0.15f * SandingFrictionCoefficientFactor;  // Descrease friction to take into account dynamic (kinetic) friction U = 0.0525
            }

            var AdhesionMultiplier = Simulator.Settings.AdhesionFactor / 100.0f; // Convert to a factor where 100% = no change to adhesion
            var AdhesionRandom = (float)((float)(Simulator.Settings.AdhesionFactorChange) * 0.01f * 2f * (Simulator.Random.NextDouble() - 0.5f));

            Train.LocomotiveCoefficientFriction = BaseuMax * BaseFrictionCoefficientFactor * AdhesionMultiplier;  // Find friction coefficient factor for locomotive
            Train.LocomotiveCoefficientFriction = MathHelper.Clamp(Train.LocomotiveCoefficientFriction, 0.05f, 0.8f); // Ensure friction coefficient never exceeds a "reasonable" value

            // Set adhesion conditions for diesel, electric or steam geared locomotives
            if (elapsedClockSeconds > 0)
            {
                LocomotiveAxle.AdhesionConditions = AdhesionMultiplier * AdhesionFilter.Filter(BaseFrictionCoefficientFactor + AdhesionRandom, elapsedClockSeconds);
                LocomotiveAxle.AdhesionConditions = MathHelper.Clamp(LocomotiveAxle.AdhesionConditions, 0.05f, 2.5f); // Avoids NaNs in axle speed computing
            }

           // Set adhesion conditions for other steam locomotives
            if (EngineType == EngineTypes.Steam && SteamEngineType != MSTSSteamLocomotive.SteamEngineTypes.Geared)  // ToDo explore adhesion factors
            {
                LocomotiveCoefficientFrictionHUD = Train.LocomotiveCoefficientFriction; // Set display value for HUD - steam
            }
            else
            {
                LocomotiveCoefficientFrictionHUD = BaseuMax * LocomotiveAxle.AdhesionConditions; // Set display value for HUD - diesel
            }

            
        }

        #endregion


        public void UpdateTrackSander(float elapsedClockSeconds)
        {
        // updates track sander in terms of sand usage and impact on air compressor
        // The following assumptions have been made:
        //

            if (Sander)  // If sander is on adjust parameters
            {
                if (CurrentTrackSandBoxCapacityM3 > 0.0) // if sand still in sandbox then sanding is available
                {
                    // Calculate consumption of sand, and drop in sand box level
                    float ActualSandConsumptionM3pS = pS.FrompH(TrackSanderSandConsumptionM3pS) * elapsedClockSeconds;
                    CurrentTrackSandBoxCapacityM3 -= ActualSandConsumptionM3pS;
                    CurrentTrackSandBoxCapacityM3 = MathHelper.Clamp(CurrentTrackSandBoxCapacityM3, 0.0f, MaxTrackSandBoxCapacityM3);
                    if (CurrentTrackSandBoxCapacityM3 == 0.0)
                    {
                        Simulator.Confirmer.Message(ConfirmLevel.Warning, Simulator.Catalog.GetString("Sand supply has been exhausted"));
                    }
                }

          // Calculate air consumption and change in main air reservoir pressure
                float ActualAirConsumptionM3pS = pS.FrompM(TrackSanderAirComsumptionM3pS) * elapsedClockSeconds;
                float SanderPressureDiffPSI = ActualAirConsumptionM3pS / Me3.ToFt3(MainResVolumeM3) ;
                MainResPressurePSI -= SanderPressureDiffPSI;
                MainResPressurePSI = MathHelper.Clamp(MainResPressurePSI, 0.001f, MaxMainResPressurePSI);
            }

        }

        public override bool GetSanderOn()
        {
            return Sander;
        }

        #region Reverser
        public void SetDirection(Direction direction)
        {
            if (Direction != direction && ThrottlePercent < 1)
            {
                Direction = direction;
                switch (direction)
                {
                    case Direction.Reverse: SignalEvent(Event.ReverserToForwardBackward); break;
                    case Direction.N: SignalEvent(Event.ReverserToNeutral); break;
                    case Direction.Forward: SignalEvent(Event.ReverserToForwardBackward); break;
                }
                // passes event also to other locomotives
                foreach (TrainCar car in Train.Cars)
                {
                    var loco = car as MSTSLocomotive;
                    if (loco != null && car != this && loco.AcceptMUSignals)
                        switch (direction)
                        {
                            case Direction.Reverse: loco.SignalEvent(Event.ReverserToForwardBackward); break;
                            case Direction.N: loco.SignalEvent(Event.ReverserToNeutral); break;
                            case Direction.Forward: loco.SignalEvent(Event.ReverserToForwardBackward); break;
                        }

                }
                SignalEvent(Event.ReverserChange);
                if (direction == Direction.Forward)
                    Train.MUReverserPercent = 100;
                else
                    Train.MUReverserPercent = -100;
            }

        }

        public virtual void StartReverseIncrease(float? target)
        {
            AlerterReset(TCSEvent.ReverserChanged);
            if (this.IsLeadLocomotive())
            {
                {
                    switch (Direction)
                    {
                        case Direction.Reverse: SetDirection(Direction.N); Simulator.Confirmer.Confirm(CabControl.Reverser, CabSetting.Neutral); break;
                        case Direction.N: SetDirection(Direction.Forward); Simulator.Confirmer.Confirm(CabControl.Reverser, CabSetting.On); break;
                        case Direction.Forward: SetDirection(Direction.Forward); Simulator.Confirmer.Confirm(CabControl.Reverser, CabSetting.On); break;
                    }
                }
            }
        }

        public virtual void StartReverseDecrease(float? target)
        {
            AlerterReset(TCSEvent.ReverserChanged);
            if (this.IsLeadLocomotive())
            {
                {
                    switch (Direction)
                    {
                        case Direction.Reverse: SetDirection(Direction.Reverse); Simulator.Confirmer.Confirm(CabControl.Reverser, CabSetting.Off); break;
                        case Direction.N: SetDirection(Direction.Reverse); Simulator.Confirmer.Confirm(CabControl.Reverser, CabSetting.Off); break;
                        case Direction.Forward: SetDirection(Direction.N); Simulator.Confirmer.Confirm(CabControl.Reverser, CabSetting.Neutral); break;
                    }
                }
            }
        }
        #endregion

        #region ThrottleController
        public void StartThrottleIncrease(float? target)
        {
            Mirel.ResetVigilance();
            if (CruiseControl != null && target != null)
            {
                if (CruiseControl.DisableCruiseControlOnThrottleAndZeroSpeed && CruiseControl.SelectedSpeedMpS == 0 && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SpeedRegMode = CruiseControl.SpeedRegulatorMode.Manual;
                }
                if (CruiseControl.DisableCruiseControlOnThrottleAndZeroForce && CruiseControl.SelectedMaxAccelerationPercent == 0 && SelectedMaxAccelerationStep == 0 && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SetSpeed(0);
                    CruiseControl.SpeedRegMode = CruiseControl.SpeedRegulatorMode.Manual;
                }
                if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.UseThrottleAsSpeedSelector)
                {
                    CruiseControl.SpeedRegulatorSelectedSpeedStartIncrease();
                    return;
                }
            }
            if (ThrottleController.CurrentValue >= ThrottleController.MaximumValue)
                return;

            if (target != null) ThrottleController.StartIncrease(target);
            else new NotchedThrottleCommand(Simulator.Log, true);

            SignalEvent(Event.ThrottleChange);
            AlerterReset(TCSEvent.ThrottleChanged);
            CommandStartTime = Simulator.ClockTime;
        }

        public void StartThrottleIncrease()
        {
            Mirel.ResetVigilance();
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.Throttle)
                    {
                        if (!mpc.StateChanged)
                        {
                            mpc.StateChanged = true;
                            mpc.DoMovement(MultiPositionController.Movement.Forward);
                        }
                        return;
                    }
                }
            }
            if (CruiseControl != null && CombinedControlType == CombinedControl.None)
            {
                if (CruiseControl.UseThrottleAsForceSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SpeedRegulatorMaxForceStartIncrease();
                    return;
                }
                else
                {
                    if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                    {
                        if (!CruiseControl.UseThrottleAsSpeedSelector)
                            return;
                    }
                }
            }
            bool checkBraking = true;
            if (CruiseControl != null)
            {
                if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.UseThrottleAsSpeedSelector)
                {
                    checkBraking = false;
                }
            }
            if (DynamicBrakeController != null && DynamicBrakeController.CurrentValue >= 0 && (DynamicBrakePercent >= 0 || !(DynamicBrakePercent == -1 && !DynamicBrake || DynamicBrakePercent >= 0 && DynamicBrake)))
            {
                if (!(CombinedControlType == CombinedControl.ThrottleDynamic
                    || CombinedControlType == CombinedControl.ThrottleAir && TrainBrakeController.CurrentValue > 0))
                {
                    Simulator.Confirmer.Warning(CabControl.Throttle, CabSetting.Warn1);
                    return;
                }
            }

            if (CombinedControlType == CombinedControl.ThrottleDynamic && DynamicBrake)
                StartDynamicBrakeDecrease(null);
            else if (CombinedControlType == CombinedControl.ThrottleAir && TrainBrakeController.CurrentValue > 0)
                StartTrainBrakeDecrease(null);
            else
                StartThrottleIncrease(ThrottleController.SmoothMax());
        }

        public void StopThrottleIncrease()
        {
            Mirel.ResetVigilance();
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.Throttle)
                    {
                        if (mpc.StateChanged)
                        {
                            mpc.StateChanged = false;
                            mpc.DoMovement(MultiPositionController.Movement.Neutral);
                        }
                        return;
                    }
                }
            }
            if (CruiseControl != null)
            {
                if (CruiseControl.UseThrottleAsForceSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SpeedRegulatorMaxForceStopIncrease();
                    return;
                }
                else
                {
                    if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.UseThrottleAsSpeedSelector && CruiseControl.SelectedSpeedMpS > 0)
                    {
                        CruiseControl.SpeedRegulatorSelectedSpeedStopIncrease();
                        return;
                    }
                }
            }

            AlerterReset(TCSEvent.ThrottleChanged);
            ThrottleController.StopIncrease();

            if (CombinedControlType == CombinedControl.ThrottleDynamic)
                StopDynamicBrakeDecrease();
            else if (CombinedControlType == CombinedControl.ThrottleAir)
                StopTrainBrakeDecrease(0);
            else if (ThrottleController.SmoothMax() != null)
                new ContinuousThrottleCommand(Simulator.Log, true, ThrottleController.CurrentValue, CommandStartTime);
        }

        public void StartThrottleDecrease(float? target)
        {
            Mirel.ResetVigilance();
            if (CruiseControl != null)
            {
                if (CruiseControl.UseThrottleAsSpeedSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.SelectedSpeedMpS > 0)
                {
                    CruiseControl.SpeedRegulatorSelectedSpeedStartDecrease();
                    return;
                }
            }
            if (ThrottleController.CurrentValue <= ThrottleController.MinimumValue)
                return;

            if (target != null) ThrottleController.StartDecrease(target);
            else new NotchedThrottleCommand(Simulator.Log, false);

            SignalEvent(Event.ThrottleChange);
            AlerterReset(TCSEvent.ThrottleChanged);
            CommandStartTime = Simulator.ClockTime;
        }

        protected bool speedSelectorModeDecreasing = false;
        public void StartThrottleDecrease()
        {
            Mirel.ResetVigilance();
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.Throttle)
                    {
                        if (!mpc.StateChanged)
                        {
                            mpc.StateChanged = true;
                            mpc.DoMovement(MultiPositionController.Movement.Aft);
                        }
                        return;
                    }
                }
            }
            if (CruiseControl != null && CombinedControlType == CombinedControl.None)
            {
                if (CruiseControl.UseThrottleAsForceSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SpeedRegulatorMaxForceStartDecrease();
                    return;
                }
                else
                {
                    if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.UseThrottleAsSpeedSelector)
                    {
                        CruiseControl.SpeedRegulatorSelectedSpeedStartDecrease();
                        return;
                    }
                    if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && !CruiseControl.UseThrottleAsSpeedSelector)
                    {
                        return;
                    }
                }
            }
            if (CruiseControl != null)
            {
                if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.UseThrottleAsSpeedSelector && CruiseControl.SelectedSpeedMpS > 0)
                {
                    ThrottleController.CurrentValue = 1;
                }
            }
            if (CombinedControlType == CombinedControl.ThrottleDynamic && ThrottleController.CurrentValue <= 0)
                StartDynamicBrakeIncrease(null);
            else if (CombinedControlType == CombinedControl.ThrottleAir && ThrottleController.CurrentValue <= 0)
                StartTrainBrakeIncrease(null, 0);
            else
                StartThrottleDecrease(ThrottleController.SmoothMin());
        }

        public void StopThrottleDecrease()
        {
            Mirel.ResetVigilance();
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.Throttle)
                    {
                        if (mpc.StateChanged)
                        {
                            mpc.StateChanged = false;
                            mpc.DoMovement(MultiPositionController.Movement.Neutral);
                        }
                        return;
                    }
                }
            }
            if (CruiseControl != null)
            {
                if (CruiseControl.UseThrottleAsSpeedSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.SelectedSpeedMpS > 0)
                {
                    CruiseControl.SpeedRegulatorSelectedSpeedStopDecrease();
                    return;
                }
                else
                {
                    if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto && CruiseControl.SelectedSpeedMpS > 0)
                    {
                        speedSelectorModeDecreasing = false;
                    }
                }
            }
            AlerterReset(TCSEvent.ThrottleChanged);
            ThrottleController.StopDecrease();

            if (CombinedControlType == CombinedControl.ThrottleDynamic)
                StopDynamicBrakeIncrease();
            else if (CombinedControlType == CombinedControl.ThrottleAir)
                StopTrainBrakeIncrease(0);
            if (ThrottleController.SmoothMin() != null)
                new ContinuousThrottleCommand(Simulator.Log, false, ThrottleController.CurrentValue, CommandStartTime);
        }

        //Steam Heat Controller

        #region Steam heating controller

        public void StartSteamHeatIncrease(float? target)
        {
            SteamHeatController.CommandStartTime = Simulator.ClockTime;
            if (IsPlayerTrain)
                Simulator.Confirmer.ConfirmWithPerCent(CabControl.SteamHeat, CabSetting.Increase, SteamHeatController.CurrentValue * 100);
            SteamHeatController.StartIncrease(target);
            SignalEvent(Event.SteamHeatChange);
        }

        public void StopSteamHeatIncrease()
        {
            SteamHeatController.StopIncrease();
            new ContinuousSteamHeatCommand(Simulator.Log, 1, true, SteamHeatController.CurrentValue, SteamHeatController.CommandStartTime);
        }

        public void StartSteamHeatDecrease(float? target)
        {
            if (IsPlayerTrain)
                Simulator.Confirmer.ConfirmWithPerCent(CabControl.SteamHeat, CabSetting.Decrease, SteamHeatController.CurrentValue * 100);
            SteamHeatController.StartDecrease(target);
            SignalEvent(Event.SteamHeatChange);
        }

        public void StopSteamHeatDecrease()
        {
            SteamHeatController.StopDecrease();
            if (IsPlayerTrain)
                new ContinuousSteamHeatCommand(Simulator.Log, 1, false, SteamHeatController.CurrentValue, SteamHeatController.CommandStartTime);
        }

        public void SteamHeatChangeTo(bool increase, float? target)
        {
            if (increase)
            {
                if (target > SteamHeatController.CurrentValue)
                {
                    StartSteamHeatIncrease(target);
                }
            }
            else
            {
                if (target < SteamHeatController.CurrentValue)
                {
                    StartSteamHeatDecrease(target);
                }
            }
        }

        public void SetSteamHeatValue(float value)
        {
            var controller = SteamHeatController;
            var oldValue = controller.IntermediateValue;
            var change = controller.SetValue(value);
            if (change != 0)
            {
                new ContinuousSteamHeatCommand(Simulator.Log, 1, change > 0, controller.CurrentValue, Simulator.GameTime);
            }
            if (oldValue != controller.IntermediateValue)
                Simulator.Confirmer.UpdateWithPerCent(CabControl.SteamHeat, oldValue < controller.IntermediateValue ? CabSetting.Increase : CabSetting.Decrease, controller.CurrentValue * 100);
        }

        public void ToggleWaterScoop()
        {
            if (Simulator.PlayerLocomotive == this)
            {
                WaterScoopDown = !WaterScoopDown;
                SignalEvent(Event.WaterScoopRaiseLower);
                if (WaterScoopDown)
                {
                    IsWaterScoopDown = true; // Set flag to potentially fill from water trough
                }
                else
                {
                    IsWaterScoopDown = false;
                    WaterScoopOverTroughFlag = false; // Reset flags so that message will come up again
                    WaterScoopNotFittedFlag = false;
                    WaterScoopSlowSpeedFlag = false;
                    WaterScoopDirectionFlag = false;
                }
                    Simulator.Confirmer.Confirm(CabControl.WaterScoop, WaterScoopDown? CabSetting.On : CabSetting.Off);
            }
        }

        #endregion

        /// <summary>
        /// Used by commands to start a continuous adjustment.
        /// </summary>
        public void ThrottleChangeTo(bool increase, float? target)
        {
            if (increase)
            {
                if (target > ThrottleController.CurrentValue)
                {
                    StartThrottleIncrease(target);
                }
            }
            else
            {
                if (target < ThrottleController.CurrentValue)
                {
                    StartThrottleDecrease(target);
                }
            }
        }

        /// <summary>
        /// Used by commands to make a single adjustment.
        /// </summary>
        public void AdjustNotchedThrottle(bool increase)
        {
            if (increase)
            {
                ThrottleController.StartIncrease();
                ThrottleController.StopIncrease();
            }
            else
            {
                ThrottleController.StartDecrease();
                ThrottleController.StopDecrease();
            }
            Simulator.Confirmer.ConfirmWithPerCent(CabControl.Throttle, ThrottleController.CurrentValue * 100);
        }

        public void SetThrottleValue(float value)
        {
            if (CruiseControl != null)
            {
                if (CruiseControl.UseThrottleAsForceSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SetMaxForcePercent((float)Math.Round(value * 100, 0));
                    return;
                }
                if (CruiseControl.UseThrottleAsSpeedSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SetSpeed((float)Math.Round((MpS.ToKpH(MaxSpeedMpS) / 100) * value * 100, 0));
                    return;
                }
            }
            var controller = ThrottleController;
            var oldValue = controller.IntermediateValue;
            var change = controller.SetValue(value);
            if (change != 0)
            {
                new ContinuousThrottleCommand(Simulator.Log, change > 0, controller.CurrentValue, Simulator.ClockTime);
                SignalEvent(Event.ThrottleChange);
                AlerterReset(TCSEvent.ThrottleChanged);
            }
            if (oldValue != controller.IntermediateValue)
                Simulator.Confirmer.UpdateWithPerCent(
                    this is MSTSSteamLocomotive ? CabControl.Regulator : CabControl.Throttle,
                    oldValue < controller.IntermediateValue ? CabSetting.Increase : CabSetting.Decrease,
                    controller.CurrentValue * 100);
        }

        public void SetThrottlePercent(float percent)
        {
            if (CruiseControl != null)
            {
                if (CruiseControl.UseThrottleAsForceSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                {
                    CruiseControl.SetMaxForcePercent(percent);
                    return;
                }
                else
            ThrottleController.SetPercent(percent);
        }
            else
                ThrottleController.SetPercent(percent);
        }

        public void SetThrottlePercentWithSound(float percent)
        {
            var oldThrottlePercent = ThrottleController.CurrentValue * 100;
            SetThrottlePercent(percent);
            if (Math.Abs(oldThrottlePercent - ThrottleController.CurrentValue * 100) > 2)
                SignalEvent(Event.ThrottleChange);
        }

        public void ThrottleToZero()
        {
            if (CombinedControlType == CombinedControl.ThrottleDynamic && ThrottleController.CurrentValue <= 0)
                StartDynamicBrakeIncrease(null);
            else if (CombinedControlType == CombinedControl.ThrottleAir && ThrottleController.CurrentValue <= 0)
                StartTrainBrakeIncrease(null, 0);
            else
                StartThrottleToZero(0.0f);

        }

        public void StartThrottleToZero(float? target)
        {
            if (ThrottleController.CurrentValue <= ThrottleController.MinimumValue)
                return;

            ThrottleController.StartDecrease(target, true);
            if (ThrottleController.NotchCount() <= 0) SignalEvent(Event.ThrottleChange);
            AlerterReset(TCSEvent.ThrottleChanged);
            CommandStartTime = Simulator.ClockTime;
        }

        #endregion

        #region CombinedHandle
        /// <summary>
        /// Determines which sub-control of combined handle is to be set when receiving a combined value.
        /// Combined value is in 0-1 range, where arrangement is [[1--throttle--0]split[0--dynamic|airbrake--1]].
        /// </summary>
        public void SetCombinedHandleValue(float value)
        {
            if (CombinedControlType == CombinedControl.ThrottleDynamic && DynamicBrake)
            {
                if (DynamicBrakeController.CurrentValue == 0 && value < CombinedControlSplitPosition)
                    DynamicBrakeChangeActiveState(false);
                else if (DynamicBrakePercent > -1)
                    SetDynamicBrakeValue((MathHelper.Clamp(value, CombinedControlSplitPosition, 1) - CombinedControlSplitPosition) / (1 - CombinedControlSplitPosition));
            }
            else if (CombinedControlType == CombinedControl.ThrottleAir && TrainBrakeController.CurrentValue > 0)
            {
                SetTrainBrakeValue((MathHelper.Clamp(value, CombinedControlSplitPosition, 1) - CombinedControlSplitPosition) / (1 - CombinedControlSplitPosition), 0);
            }
            else
            {
                if (CombinedControlType == CombinedControl.ThrottleDynamic && ThrottleController.CurrentValue == 0 && value > CombinedControlSplitPosition)
                    DynamicBrakeChangeActiveState(true);
                else if (DynamicBrakePercent < 0)
                    SetThrottleValue(1 - MathHelper.Clamp(value, 0, CombinedControlSplitPosition) / CombinedControlSplitPosition);
            }
        }

        /// <summary>
        /// Determines which sub-control of combined handle is active (based on its type), 
        /// and returns the overall position considering the split position. 
        /// </summary>
        /// <param name="intermediateValue">Whather asking for intermediate (for mouse operation) or notched (for displaying) value.</param>
        /// <returns>Combined position into 0-1 range, where arrangement is [[1--throttle--0]split[0--dynamic|airbrake--1]]</returns>
        public float GetCombinedHandleValue(bool intermediateValue)
        {
            if (CombinedControlType == CombinedControl.ThrottleDynamic && DynamicBrake)
            {
                if (CruiseControl != null)
                {
                    if (CruiseControl.SkipThrottleDisplay)
                    {
                        return CombinedControlSplitPosition;
                    }
                    else
                    {
                return CombinedControlSplitPosition + (1 - CombinedControlSplitPosition) * (intermediateValue ? DynamicBrakeController.IntermediateValue : DynamicBrakeController.CurrentValue);
                    }
                }
                else
                {
                    return CombinedControlSplitPosition + (1 - CombinedControlSplitPosition) * (intermediateValue ? DynamicBrakeController.IntermediateValue : DynamicBrakeController.CurrentValue);
                }
            }
            else if (CombinedControlType == CombinedControl.ThrottleAir && TrainBrakeController.CurrentValue > 0)
                return CombinedControlSplitPosition + (1 - CombinedControlSplitPosition) * (intermediateValue ? TrainBrakeController.IntermediateValue : TrainBrakeController.CurrentValue);
            else if (CruiseControl == null)
                return CombinedControlSplitPosition * (1 - (intermediateValue ? ThrottleController.IntermediateValue : ThrottleController.CurrentValue));
            else if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Manual)
                return CombinedControlSplitPosition * (1 - (intermediateValue ? ThrottleController.IntermediateValue : ThrottleController.CurrentValue));
            else if (CruiseControl.UseThrottleAsSpeedSelector)
                return CombinedControlSplitPosition * (1 - (CruiseControl.SelectedSpeedMpS / MaxSpeedMpS));
            else
                return CombinedControlSplitPosition;

        }
        #endregion

        #region GearBoxController
        public virtual void ChangeGearUp()
        {
        }

        public virtual void StartGearBoxIncrease()
        {
            if (GearBoxController != null)
            {
                GearBoxController.StartIncrease();
                Simulator.Confirmer.ConfirmWithPerCent(CabControl.GearBox, CabSetting.Increase, GearBoxController.CurrentNotch);
                AlerterReset(TCSEvent.GearBoxChanged);
                SignalGearBoxChangeEvents();
            }

            ChangeGearUp();
        }

        public virtual void StopGearBoxIncrease()
        {
            if (GearBoxController != null)
            {
                GearBoxController.StopIncrease();
            }
        }

        public virtual void ChangeGearDown()
        {
        }

        public virtual void StartGearBoxDecrease()
        {
            if (GearBoxController != null)
            {
                GearBoxController.StartDecrease();
                Simulator.Confirmer.ConfirmWithPerCent(CabControl.GearBox, CabSetting.Decrease, GearBoxController.CurrentNotch);
                AlerterReset(TCSEvent.GearBoxChanged);
                SignalGearBoxChangeEvents();
            }

            ChangeGearDown();
        }

        public virtual void StopGearBoxDecrease()
        {
            if (GearBoxController != null)
            {
                GearBoxController.StopDecrease();
            }
        }

        /// <summary>
        /// Trigger sound events when the gearbox increases or decreases.
        /// </summary>
        private void SignalGearBoxChangeEvents()
        {
            // Only activate sound event if notch has actually changed
            if (GearBoxController.CurrentNotch != PreviousGearBoxNotch)
            {
                switch (GearBoxController.CurrentNotch)
                {
                    case 0:
                        SignalEvent(Event.GearPosition0);
                        break;
                    case 1:
                        SignalEvent(Event.GearPosition1);
                        break;
                    case 2:
                        SignalEvent(Event.GearPosition2);
                        break;
                    case 3:
                        SignalEvent(Event.GearPosition3);
                        break;
                    case 4:
                        SignalEvent(Event.GearPosition4);
                        break;
                    case 5:
                        SignalEvent(Event.GearPosition5);
                        break;
                    case 6:
                        SignalEvent(Event.GearPosition6);
                        break;
                    case 7:
                        SignalEvent(Event.GearPosition7);
                        break;
                    default:
                        SignalEvent(Event.GearPosition8);
                        break;
                }
                PreviousGearBoxNotch = GearBoxController.CurrentNotch; // Update previous value for next time around
            }
        }

        public void SetGearBoxValue(float value)
        {
            var controller = GearBoxController;
            var oldValue = controller.CurrentValue;
            var change = controller.SetValue(value);
            if (change != 0)
            {
                //new GarBoxCommand(Simulator.Log, change > 0, controller.CurrentValue, Simulator.ClockTime);
                SignalEvent(change > 0 ? Event.GearUp : Event.GearDown);
                AlerterReset(TCSEvent.GearBoxChanged);
            }
            if (oldValue != controller.CurrentValue)
                Simulator.Confirmer.ConfirmWithPerCent(CabControl.GearBox, CabSetting.Decrease, GearBoxController.CurrentNotch);
        }
        #endregion

        #region TrainBrakeController
        public void StartTrainBrakeIncrease(float? target, int from) // from 0 = keyboard, 1 = CruiseControl
        {
            if (Mirel.Equipped && !Mirel.BlueLight && Mirel.initTest == Mirel.InitTest.Passed && SpeedMpS > 0) Mirel.AlerterPressed(true);
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.TrainBrake)
                    {
                        mpc.DoMovement(MultiPositionController.Movement.Aft);
                        SignalEvent(Event.TrainBrakeChange);
                        return;
                    }
                }
            }
            if (CombinedControlType == CombinedControl.ThrottleAir)
                ThrottleController.SetValue(0);

            bool alertChange = true;
            if (CruiseControl != null)
                if (CruiseControl.arrIsBraking && from == 1)
                    alertChange = false;

            if (alertChange)
                AlerterReset(TCSEvent.TrainBrakeChanged);
            TrainBrakeController.StartIncrease(target);
            TrainBrakeController.CommandStartTime = Simulator.ClockTime;
            if (CruiseControl != null)
            {
                CruiseControl.TrainBrakePriority = true;
                if (from == 0)
                    CruiseControl.IReallyWantToBrake = true;
            }
            if (TrainBrakeController.TrainBrakeControllerState == ControllerState.Apply
                || TrainBrakeController.TrainBrakeControllerState == ControllerState.EPApply
                || TrainBrakeController.TrainBrakeControllerState == ControllerState.EPFullServ
                || TrainBrakeController.TrainBrakeControllerState == ControllerState.FullServ
                || TrainBrakeController.TrainBrakeControllerState  == ControllerState.Emergency)
            {
            if (ThrottlePercent > 0 && DoesBrakeCutPower && DoesPowerLossResetControls)
                {
                    //ThrottleController.SetPercent(0);
                    StartThrottleToZero(0.0f);
                }
            }

            if (alertChange)
            {
                Simulator.Confirmer.Confirm(CabControl.TrainBrake, CabSetting.Increase, GetTrainBrakeStatus());
                SignalEvent(Event.TrainBrakeChange);
            }
        }

        public void StopTrainBrakeIncrease(int from)
        {
            if (Mirel.Equipped && !Mirel.BlueLight && Mirel.initTest == Mirel.InitTest.Passed && SpeedMpS > 0) Mirel.AlerterPressed(true);
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.TrainBrake)
                    {
                        mpc.DoMovement(MultiPositionController.Movement.Neutral);
                        SignalEvent(Event.TrainBrakeChange);
                        return;
                    }
                }
            }
            AlerterReset(TCSEvent.TrainBrakeChanged);
            TrainBrakeController.StopIncrease();
            new TrainBrakeCommand(Simulator.Log, true, TrainBrakeController.CurrentValue, TrainBrakeController.CommandStartTime, from);
        }

        public void StartTrainBrakeDecrease(float? target, bool toZero = false)
        {
            if (Mirel.Equipped && !Mirel.BlueLight && Mirel.initTest == Mirel.InitTest.Passed && SpeedMpS > 0) Mirel.AlerterPressed(true);
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.TrainBrake)
                    {
                        mpc.DoMovement(MultiPositionController.Movement.Forward);
                        SignalEvent(Event.TrainBrakeChange);
                        return;
                    }
                }
            }
            bool alertChange = true;
            if (CruiseControl != null)
                if (CruiseControl.arrIsBraking)
                    alertChange = false;
            if (alertChange)
                AlerterReset(TCSEvent.TrainBrakeChanged);
            TrainBrakeController.StartDecrease(target, toZero);
            TrainBrakeController.CommandStartTime = Simulator.ClockTime;
            if (alertChange)
            {
                Simulator.Confirmer.Confirm(CabControl.TrainBrake, CabSetting.Decrease, GetTrainBrakeStatus());
                SignalEvent(Event.TrainBrakeChange);
            }
        }

        public void StopTrainBrakeDecrease(int from)
        {
            if (CruiseControl != null)
                if (Mirel.Equipped && !Mirel.BlueLight && Mirel.initTest == Mirel.InitTest.Passed && SpeedMpS > 0 && CruiseControl.SpeedRegMode != CruiseControl.SpeedRegulatorMode.Manual)
                    Mirel.AlerterPressed(true);
            else
                if (Mirel.Equipped && !Mirel.BlueLight && Mirel.initTest == Mirel.InitTest.Passed && SpeedMpS > 0)
                    Mirel.AlerterPressed(true);
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.TrainBrake)
                    {
                        mpc.DoMovement(MultiPositionController.Movement.Neutral);
                        SignalEvent(Event.TrainBrakeChange);
                        return;
                    }
                }
            }
            AlerterReset(TCSEvent.TrainBrakeChanged);
            TrainBrakeController.StopDecrease();
            new TrainBrakeCommand(Simulator.Log, false, TrainBrakeController.CurrentValue, TrainBrakeController.CommandStartTime, from);
        }

        /// <summary>
        /// Used by commands to start a continuous adjustment.
        /// </summary>
        /// <param name="increase"></param>
        /// <param name="target"></param>
        public void TrainBrakeChangeTo(bool increase, float? target, int from)
        {  // Need a better way to express brake as a single number?
            if (increase)
            {
                if (target > TrainBrakeController.CurrentValue)
                {
                    StartTrainBrakeIncrease(target, from);
                }
            }
            else
            {
                if (target < TrainBrakeController.CurrentValue)
                {
                    StartTrainBrakeDecrease(target);
                }
            }
        }

        //Debrief Eval
        public static int DbfEvalFullTrainBrakeUnder8kmh = 0;
        public bool ldbfevalfulltrainbrakeunder8kmh = false;

        public override string GetTrainBrakeStatus()
        {
            var train = Simulator.PlayerLocomotive.Train;//Debrief Eval
            string s = TrainBrakeController.GetStatus();
 

            if (s == "Emergency" && train.LeadLocomotive != null && !ldbfevalfulltrainbrakeunder8kmh && train.LeadLocomotive.IsPlayerTrain && Math.Abs(train.SpeedMpS) < 2.22222)
            {
                
                DbfEvalFullTrainBrakeUnder8kmh++;
                ldbfevalfulltrainbrakeunder8kmh = true;
                train.DbfEvalValueChanged = true;//Debrief eval
            }
            if (s != "Emergency" && ldbfevalfulltrainbrakeunder8kmh)
                ldbfevalfulltrainbrakeunder8kmh = false;

            TrainCar lastCar = Train.Cars[Train.Cars.Count - 1];
            if (lastCar == this)
                lastCar = Train.Cars[0];
            s += BrakeSystem.GetFullStatus(lastCar.BrakeSystem, BrakeSystemPressureUnits);
            return s;
        }

        public void SetTrainBrakeValue(float value, int from)
        {
            var controller = TrainBrakeController;
            var oldValue = controller.IntermediateValue;
            var change = controller.SetValue(value);
            bool alertChange = true;

            if (CruiseControl != null)
                if (CruiseControl.arrIsBraking)
                    alertChange = false;

            if (change != 0)
            {
                new TrainBrakeCommand(Simulator.Log, change > 0, value, Simulator.ClockTime, from);
                if (alertChange)
                {
                    SignalEvent(Event.TrainBrakeChange);
                    AlerterReset(TCSEvent.TrainBrakeChanged);
                }
            }
            if (oldValue != controller.IntermediateValue && alertChange)
                Simulator.Confirmer.Update(CabControl.TrainBrake, oldValue < controller.IntermediateValue ? CabSetting.Increase : CabSetting.Decrease, GetTrainBrakeStatus());
        }

        public void SetTrainBrakePercent(float percent)
        {
            // Insure we have TrainBrakeController ; some vehicles do not
            // such as Hy-rail truck
            // if (HasTrainBrake)
            if (TrainBrakeController.IsValid())
                TrainBrakeController.SetPercent(percent);
        }
        #endregion

        #region EngineBrakeController
        public void StartEngineBrakeIncrease(float? target)
        {
            CanCheckEngineBrake = false;
            EngineBrakePriority = true;
            AlerterReset(TCSEvent.EngineBrakeChanged);
            if (EngineBrakeController == null)
                return;

            EngineBrakeController.StartIncrease(target);
            Simulator.Confirmer.Confirm(CabControl.EngineBrake, CabSetting.Increase, GetEngineBrakeStatus());
            SignalEvent(Event.EngineBrakeChange);
        }

        /// <summary>
        /// Ends change of brake value.
        /// </summary>
        public void StopEngineBrakeIncrease()
        {
            if (EngineBrakeController == null)
                return;

            AlerterReset(TCSEvent.EngineBrakeChanged);
            EngineBrakeController.StopIncrease();
            new EngineBrakeCommand(Simulator.Log, true, EngineBrakeController.CurrentValue, EngineBrakeController.CommandStartTime);
        }

        public void StartEngineBrakeDecrease(float? target)
        {
            if (EngineBrakeController == null)
                return;

            AlerterReset(TCSEvent.EngineBrakeChanged);
            EngineBrakeController.StartDecrease(target);
            EngineBrakeController.CommandStartTime = Simulator.ClockTime; // Remember when the command was issued
            Simulator.Confirmer.Confirm(CabControl.EngineBrake, CabSetting.Increase, GetEngineBrakeStatus());
            SignalEvent(Event.EngineBrakeChange);
        }

        /// <summary>
        /// Ends change of brake value.
        /// </summary>
        public void StopEngineBrakeDecrease()
        {
            if (EngineBrakeController == null)
                return;

            AlerterReset(TCSEvent.EngineBrakeChanged);
            EngineBrakeController.StopDecrease();
            new EngineBrakeCommand(Simulator.Log, false, EngineBrakeController.CurrentValue, EngineBrakeController.CommandStartTime);
        }

        public void EngineBrakeChangeTo(bool increase, float? target)
        {  // Need a better way to express brake as a single number.
            if (increase)
            {
                if (target > EngineBrakeController.CurrentValue)
                {
                    StartEngineBrakeIncrease(target);
                }
            }
            else
            {
                if (target < EngineBrakeController.CurrentValue)
                {
                    StartEngineBrakeDecrease(target);
                }
            }
        }

        public void SetEngineBrakeValue(float value)
        {
            var controller = EngineBrakeController;
            var oldValue = controller.IntermediateValue;
            var change = controller.SetValue(value);
            if (change != 0)
            {
                new EngineBrakeCommand(Simulator.Log, change > 0, controller.CurrentValue, Simulator.ClockTime);
                SignalEvent(Event.EngineBrakeChange);
                AlerterReset(TCSEvent.EngineBrakeChanged);
            }
            if (oldValue != controller.IntermediateValue)
                Simulator.Confirmer.Update(CabControl.EngineBrake, oldValue < controller.IntermediateValue ? CabSetting.Increase : CabSetting.Decrease, GetEngineBrakeStatus());
        }

        public void SetEngineBrakePercent(float percent)
        {
            if (EngineBrakeController == null)
                return;
            EngineBrakeController.SetPercent(percent);
        }

        public override string GetEngineBrakeStatus()
        {
            if (EngineBrakeController == null)
                return null;
            // If brake type is only a state, and no numerical fraction application is displayed in the HUD, then display Brake Cylinder (BC) pressure
            if (String.IsNullOrEmpty(EngineBrakeController.GetStateFractionScripted())) // Test to see if a brake state only is present without a fraction of application, if no fraction display BC pressure
            {
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    if (SteamEngineBrakeFitted)
                    {
                        const float percentageConversion = 100;
                        return string.Format("{0} {1}%", EngineBrakeController.GetStatus(), percentageConversion * EngineBrakeController.CurrentValue);  // Display for steam brake
                    }
                    else
                    {
                        return string.Format("{0} BC {1}", EngineBrakeController.GetStatus(), FormatStrings.FormatPressure(Vac.FromPress(Train.HUDLocomotiveBrakeCylinderPSI), PressureUnit.InHg, PressureUnit.InHg, true)); // display for vacuum brakes
                    }
                }
                else
                {
                    return string.Format("{0} BC {1} {2}", EngineBrakeController.GetStatus(), FormatStrings.FormatPressure(Train.HUDLocomotiveBrakeCylinderPSI, PressureUnit.PSI, MainPressureUnit, true), BailOff ? " BailOff" : "");
                }

                // Fraction not found so display BC                
            }
            else
            {
                if ((BrakeSystem is VacuumSinglePipe))
                {
                    return string.Format("{0}", EngineBrakeController.GetStatus());  // Fraction found so don't display BC
                }
                else
                {
                    return string.Format("{0}{1}", EngineBrakeController.GetStatus(), BailOff ? " BailOff" : "");  // Fraction found so don't display BC
                }
            }
        }
        #endregion

        #region BrakemanBrakeController

        public void StartBrakemanBrakeIncrease(float? target)
        {
            AlerterReset(TCSEvent.BrakemanBrakeChanged);
            if (BrakemanBrakeController == null)
                return;

            BrakemanBrakeController.StartIncrease(target);
            Simulator.Confirmer.Confirm(CabControl.BrakemanBrake, CabSetting.Increase, GetBrakemanBrakeStatus());
//            SignalEvent(Event.EngineBrakeChange);
        }

        /// <summary>
        /// Ends change of brake value.
        /// </summary>
        public void StopBrakemanBrakeIncrease()
        {
            if (BrakemanBrakeController == null)
                return;

         //   AlerterReset(TCSEvent.BrakemanBrakeChanged);
            BrakemanBrakeController.StopIncrease();
            new BrakemanBrakeCommand(Simulator.Log, true, BrakemanBrakeController.CurrentValue, BrakemanBrakeController.CommandStartTime);
        }

        public void StartBrakemanBrakeDecrease(float? target)
        {
            if (BrakemanBrakeController == null)
                return;

            AlerterReset(TCSEvent.BrakemanBrakeChanged);
            BrakemanBrakeController.StartDecrease(target);
            BrakemanBrakeController.CommandStartTime = Simulator.ClockTime; // Remember when the command was issued
            Simulator.Confirmer.Confirm(CabControl.BrakemanBrake, CabSetting.Increase, GetBrakemanBrakeStatus());
         //   SignalEvent(Event.BrakemanBrakeChange);
        }

        /// <summary>
        /// Ends change of brake value.
        /// </summary>
        public void StopBrakemanBrakeDecrease()
        {
            if (BrakemanBrakeController == null)
                return;

            AlerterReset(TCSEvent.BrakemanBrakeChanged);
            BrakemanBrakeController.StopDecrease();
            new BrakemanBrakeCommand(Simulator.Log, false, BrakemanBrakeController.CurrentValue, BrakemanBrakeController.CommandStartTime);
        }

        public void BrakemanBrakeChangeTo(bool increase, float? target)
        {  // Need a better way to express brake as a single number.
            if (increase)
            {
                if (target > BrakemanBrakeController.CurrentValue)
                {
                    StartBrakemanBrakeIncrease(target);
                }
            }
            else
            {
                if (target<BrakemanBrakeController.CurrentValue)
                {
                    StartBrakemanBrakeDecrease(target);
                }
            }
        }

        public void SetBrakemanBrakeValue(float value)
        {
            var controller = BrakemanBrakeController;
            var oldValue = controller.IntermediateValue;
            var change = controller.SetValue(value);
            if (change != 0)
            {
                new BrakemanBrakeCommand(Simulator.Log, change > 0, controller.CurrentValue, Simulator.ClockTime);
             //   SignalEvent(Event.BrakemanBrakeChange);
                AlerterReset(TCSEvent.BrakemanBrakeChanged);
            }
            if (oldValue != controller.IntermediateValue)
                Simulator.Confirmer.Update(CabControl.BrakemanBrake, oldValue<controller.IntermediateValue? CabSetting.Increase : CabSetting.Decrease, GetBrakemanBrakeStatus());
        }

        public void SetBrakemanBrakePercent(float percent)
        {
            if (BrakemanBrakeController == null)
                return;
            BrakemanBrakeController.SetPercent(percent);
        }

        public override string GetBrakemanBrakeStatus()
        {
            if (BrakemanBrakeController == null)
                return null;
            return string.Format("{0}", BrakemanBrakeController.GetStatus());
        }

    #endregion

    #region DynamicBrakeController
    public void StartDynamicBrakeIncrease(float? target)
        {
            AlerterReset(TCSEvent.DynamicBrakeChanged);

            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.DynamicBrake)
                    {
                        if (!mpc.StateChanged)
                        {
                            mpc.StateChanged = true;
                            mpc.DoMovement(MultiPositionController.Movement.Aft);
                        }
                        return;
                    }
                }
            }
            if (CruiseControl != null)
            {
                SetThrottlePercent(0);
                CruiseControl.DynamicBrakePriority = true;
            }

            if (!CanUseDynamicBrake())
                return;

            if (DynamicBrakePercent < 0)
            {
                DynamicBrakeChangeActiveState(true);
            }
            else if (DynamicBrake)
            {
                SignalEvent(Event.DynamicBrakeChange);
                DynamicBrakeController.StartIncrease(target);
                if (!HasSmoothStruc)
                {
                    StopDynamicBrakeIncrease();
                    Simulator.Confirmer.ConfirmWithPerCent(CabControl.DynamicBrake, DynamicBrakeController.CurrentValue * 100);
                }
            }
        }

        public void StopDynamicBrakeIncrease()
        {
            AlerterReset(TCSEvent.DynamicBrakeChanged);
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.DynamicBrake)
                    {
                        if (mpc.StateChanged)
                        {
                            mpc.StateChanged = false;
                            mpc.DoMovement(MultiPositionController.Movement.Neutral);
                        }
                        return;
                    }
                }
            }
            if (CanUseDynamicBrake())
            {
                DynamicBrakeController.StopIncrease();
                new DynamicBrakeCommand(Simulator.Log, true, DynamicBrakeController.CurrentValue, DynamicBrakeController.CommandStartTime);
            }
        }

        public void StartDynamicBrakeDecrease(float? target)
        {
            AlerterReset(TCSEvent.DynamicBrakeChanged);

            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.DynamicBrake)
                    {
                        if (!mpc.StateChanged)
                        {
                            mpc.StateChanged = true;
                            mpc.DoMovement(MultiPositionController.Movement.Forward);
                        }
                        return;
                    }
                }
            }

            if (!CanUseDynamicBrake())
                return;

            if (DynamicBrakePercent <= 0)
            {
                DynamicBrakeChangeActiveState(false);
            }
            else if (DynamicBrake)
            {
                SignalEvent(Event.DynamicBrakeChange);
                DynamicBrakeController.StartDecrease(target);
                if (!HasSmoothStruc)
                {
                    StopDynamicBrakeDecrease();
                    Simulator.Confirmer.ConfirmWithPerCent(CabControl.DynamicBrake, DynamicBrakeController.CurrentValue * 100);
                }
            }
        }

        public void StopDynamicBrakeDecrease()
        {
            AlerterReset(TCSEvent.DynamicBrakeChanged);
            if (MultiPositionControllers != null)
            {
                foreach (MultiPositionController mpc in MultiPositionControllers)
                {
                    if (mpc.controllerBinding == MultiPositionController.ControllerBinding.DynamicBrake)
                    {
                        if (mpc.StateChanged)
                        {
                            mpc.StateChanged = false;
                            mpc.DoMovement(MultiPositionController.Movement.Neutral);
                        }
                        return;
                    }
                }
            }
            if (CanUseDynamicBrake())
            {
                DynamicBrakeController.StopDecrease();
                new DynamicBrakeCommand(Simulator.Log, false, DynamicBrakeController.CurrentValue, DynamicBrakeController.CommandStartTime);
                if (CruiseControl != null)
                {
                    if (DynamicBrakePercent < 1)
                        CruiseControl.DynamicBrakePriority = false;
            }
        }
        }

        public void DynamicBrakeChangeTo(bool increase, float? target)
        {  // Need a better way to express brake as a single number.
            if (increase)
            {
                if (target > DynamicBrakeController.CurrentValue)
                {
                    StartDynamicBrakeIncrease(target);
                }
            }
            else
            {
                if (target < DynamicBrakeController.CurrentValue)
                {
                    StartDynamicBrakeDecrease(target);
                }
            }
        }

        public void SetDynamicBrakeValue(float value)
        {
            if (!DynamicBrake && ThrottleController.CurrentValue == 0 && value > 0.05f)
                DynamicBrakeChangeActiveState(true);
            if (DynamicBrake && DynamicBrakeController.CurrentValue == 0 && value < -0.05f)
            {
                DynamicBrakeChangeActiveState(false);
                return;
            }
            if (!DynamicBrake)
                return;

            var controller = DynamicBrakeController;
            var oldValue = controller.IntermediateValue;
            var change = controller.SetValue(value);
            if (change != 0)
            {
                new DynamicBrakeCommand(Simulator.Log, change > 0, controller.CurrentValue, Simulator.ClockTime);
                SignalEvent(Event.DynamicBrakeChange);
                AlerterReset(TCSEvent.DynamicBrakeChanged);
            }
            if (oldValue != controller.IntermediateValue)
                Simulator.Confirmer.UpdateWithPerCent(CabControl.DynamicBrake, oldValue < controller.IntermediateValue ? CabSetting.Increase : CabSetting.Decrease, DynamicBrakeController.CurrentValue * 100);
        }

        public void SetDynamicBrakePercent(float percent)
        {
            if (!CanUseDynamicBrake())
                return;
            DynamicBrakeController.SetPercent(percent);
            DynamicBrakeChangeActiveState(percent >= 0);
        }

        public void SetDynamicBrakePercentWithSound(float percent)
        {
            if (!CanUseDynamicBrake())
                return;
            var oldDynamicBrakePercent = DynamicBrakeController.CurrentValue * 100;
            SetDynamicBrakePercent(percent);
            if (Math.Abs(oldDynamicBrakePercent - DynamicBrakeController.CurrentValue * 100) > 2)
                SignalEvent(Event.DynamicBrakeChange);
        }

        public void DynamicBrakeChangeActiveState(bool toState)
        {
            if (DynamicBrakeController == null)
                return;
            if (toState && !DynamicBrake && DynamicBrakePercent < 0)
            {
                DynamicBrakePercent = 0;
                DynamicBrakeController.CommandStartTime = Simulator.ClockTime;
                StopDynamicBrakeIncrease();
            }
            else if (!toState && DynamicBrake && DynamicBrakePercent > -1 && DynamicBrakeIntervention < 0)
            {
                SignalEvent(Event.DynamicBrakeOff);
                DynamicBrakePercent = -1;
                DynamicBrakeController.CommandStartTime = Simulator.ClockTime;
                StopDynamicBrakeIncrease();
            }
        }

        protected bool CanUseDynamicBrake()
        {
            return (DynamicBrakeController != null
                && ThrottlePercent == 0);
        }

        public override string GetDynamicBrakeStatus()
        {
            if (DynamicBrakeController == null)
                return null;
            if (DynamicBrakePercent < 0)
                return string.Empty;
            if (TrainControlSystem.FullDynamicBrakingOrder)
                return string.Format("{0:F0}%", DynamicBrakePercent);
            return string.Format("{0}", DynamicBrakeController.GetStatus());
        }
        #endregion


        public float CanAccelerateTime = 0;
        public bool CanAccelerate(float elapsedClockTime, float controllerVolts)
        {
            bool ret = false;
            if (CurrentDirection == CurrentDirectionEnum.Braking && CanAccelerateTime < AcceleratingToBrakingChangeTime + 0.01f)
            {
                CanAccelerateTime += elapsedClockTime;
            }
            if (CanAccelerateTime > AcceleratingToBrakingChangeTime)
            {
                CanBrakeTime = 0;
                CurrentDirection = CurrentDirectionEnum.Accelerating;
                ret = true;
            }
            return ret;
        }

        public float CanBrakeTime = 0;
        public bool CanBrake(float elapsedClockTime, float controllerVolts)
        {
            bool ret = false;
            if (CurrentDirection == CurrentDirectionEnum.Accelerating && CanBrakeTime < AcceleratingToBrakingChangeTime + 0.01f)
            {
                CanBrakeTime += elapsedClockTime;
            }
            if (CanBrakeTime > AcceleratingToBrakingChangeTime)
            {
                CanAccelerateTime = 0;
                CurrentDirection = CurrentDirectionEnum.Braking;
                ret = true;
            }
            return ret;
        }

        public virtual void SetPower(bool ToState)
        {
            
        }

        internal void ToggleMUCommand(bool ToState)
        {
            AcceptMUSignals = ToState;
        }

        public void SetTrainHandbrake(bool apply)
        {
            if (apply)
            {
                Train.SetHandbrakePercent(100);
                Simulator.Confirmer.Confirm(CabControl.Handbrake, CabSetting.On);
            }
            else
            {
                Train.SetHandbrakePercent(0);
                Simulator.Confirmer.Confirm(CabControl.Handbrake, CabSetting.Off);
            }
        }

        public void SetTrainRetainers(bool apply)
        {
            Train.SetRetainers(apply);
            Simulator.Confirmer.ConfirmWithPerCent(CabControl.Retainers, CabSetting.Increase, Train.RetainerPercent, (int)CabSetting.Range1 + (int)Train.RetainerSetting);
        }

        public void BrakeHoseConnect(bool apply)
        {
            if (apply)
            {
                Train.ConnectBrakeHoses();
                Simulator.Confirmer.Confirm(CabControl.BrakeHose, CabSetting.On);
            }
            else
            {
                Train.DisconnectBrakes();
                Simulator.Confirmer.Confirm(CabControl.BrakeHose, CabSetting.Off);
            }
        }

        public bool wasCabLightSetOn = false;
        public void ToggleCabLight()
        {
            if (this is MSTSSteamLocomotive)
                return;
            CabLightOn = !CabLightOn;
            wasCabLightSetOn = CabLightOn;
            if (CabFloodLightOn)
                CabLightOn = false;

            SignalEvent(Event.CabLightSwitchToggle);
            Simulator.Confirmer.Confirm(CabControl.CabLight, CabLightOn ? CabSetting.On : CabSetting.Off);
        }

        public void ToggleCabFloodLight()
        {
            if (this is MSTSSteamLocomotive)
                return;

            CabFloodLightOn = !CabFloodLightOn;
            if (CabFloodLightOn)
                CabLightOn = false;
            else
                CabLightOn = wasCabLightSetOn;
            SignalEvent(Event.CabLightSwitchToggle);
            Simulator.Confirmer.Confirm(CabControl.CabFloodLight, CabFloodLightOn ? CabSetting.On : CabSetting.Off);
        }

        public void ToggleBattery()
        {
            Battery = !Battery;
            if (Battery) SignalEvent(Event.BatteryOn);
            else SignalEvent(Event.BatteryOff);
            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.Battery, Battery ? CabSetting.On : CabSetting.Off);
        }
        public void TogglePowerKey()
        {
            PowerKey = !PowerKey;
            if (PowerKey) SignalEvent(Event.PowerKeyOn);
            else SignalEvent(Event.PowerKeyOff);
            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.PowerKey, PowerKey ? CabSetting.On : CabSetting.Off);
            if (ActiveStation == DriverStation.None && PowerKey)
            {
                ActiveStation = UsingRearCab ? DriverStation.Station2 : DriverStation.Station1;
            }
            if ((ActiveStation == DriverStation.Station1 || ActiveStation == DriverStation.Station2) && !PowerKey)
            {
                ActiveStation = DriverStation.None;
            }
        }       
        public void ToggleCabRadio( bool newState)
        {
            CabRadioOn = newState;
            if (!OnLineCabRadio)
            {
                if (CabRadioOn) SignalEvent(Event.CabRadioOn); // hook for sound trigger
                else SignalEvent(Event.CabRadioOff);
            }
            else if (OnLineCabRadioURL != "")
            { }
            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.CabRadio, CabRadioOn ? CabSetting.On : CabSetting.Off);
        }

        public void ToggleWipers(bool newState)
        {
            SignalEvent(newState ? Event.WiperOn : Event.WiperOff);
        }

        public void SetBailOff(bool bailOff)
        {
            BailOff = bailOff;
            Simulator.Confirmer.Confirm(CabControl.BailOff, bailOff ? CabSetting.On : CabSetting.Off);
        }

        public virtual void Refuel()
        {
            // Electric locos do nothing. Diesel and steam override this.
        }

        public void OdometerToggle()
        {
            OdometerVisible = !OdometerVisible;
        }

        /// <summary>
        /// Set odometer reference distance to actual travelled distance,
        /// and set measuring direction to the actual direction
        /// </summary>
        public void OdometerReset()
        {
            if (Train == null)
                return;

            if (OdometerCountingForwards != OdometerCountingUp ^ (Direction == Direction.Reverse))
            {
                OdometerCountingForwards = !OdometerCountingForwards;
            }

            if (Direction == Direction.Reverse)
            {
                if (OdometerCountingForwards)
                    OdometerResetPositionM = Train.DistanceTravelledM - Train.Length;
                else
                    OdometerResetPositionM = Train.DistanceTravelledM;
            }
            else
            {
                if (OdometerCountingForwards)
                    OdometerResetPositionM = Train.DistanceTravelledM;
                else
                    OdometerResetPositionM = Train.DistanceTravelledM + Train.Length;
            }

            Simulator.Confirmer.Confirm(CabControl.Odometer, CabSetting.On);
        }

        public void OdometerToggleDirection()
        {
            if (Train == null)
                return;

            OdometerCountingUp = !OdometerCountingUp;

            Simulator.Confirmer.Confirm(CabControl.Odometer, OdometerCountingUp ? CabSetting.Increase : CabSetting.Decrease);
        }

        public override bool GetCabFlipped()
        {
            return UsingRearCab;
        }

        public void SetEmergency(bool emergency)
        {
            if (this.Train != null && this.Train.TrainType == Train.TRAINTYPE.REMOTE) return; //not apply emergency for remote trains.
            TrainControlSystem.SetEmergency(emergency);
        }

        public void AlerterReset()
        {
            TrainControlSystem.HandleEvent(TCSEvent.AlerterReset);
        }

        public void AlerterReset(TCSEvent evt)
        {
            AlerterReset();
            TrainControlSystem.HandleEvent(evt);
        }

        public void AlerterPressed(bool pressed)
        {
            TrainControlSystem.AlerterPressed(pressed);
            Mirel.AlerterPressed(pressed);
        }

        // Icik      
        public void ToggleHV2SwitchUp()
        {
            if (HV2Enable)
            {
                if (HV2Switch < 1)
                    HV2Switch++;
                if (HV2Switch < 1)
                {
                    ToggleHV2Switch();
                }
                HV2Switch = MathHelper.Clamp(HV2Switch, 0, 1);
            }
        }

        public void ToggleHV2Switch()
        {
            if (HV2Enable)
            {
                if (LastStateHV2 != HV2Switch)
                    SignalEvent(Event.PantographToggle); // Zvuk přepínače                

                if (HVCanOn && Battery && PowerKey)
                    HVOn = true;
                //Simulator.Confirmer.Information("HV can On");

                switch (HV2Switch)
                {
                    case 0:
                        //Simulator.Confirmer.Information("Switch 0");
                        break;
                    case 1:
                        //Simulator.Confirmer.Information("Switch 1");
                        break;
                }
                LastStateHV2 = HV2Switch;
            }
        }

        public void ToggleHV3SwitchUp()
        {
            if (HV3Enable)
            {
                if (HV3Switch < 3)
                    HV3Switch++;
                if (HV3Switch < 3)
                {
                    ToggleHV3Switch();                    
                }
                HV3Switch = MathHelper.Clamp(HV3Switch, 0, 2);
            }
        }
        public void ToggleHV3SwitchDown()
        {
            if (HV3Enable)
            {
                if (HV3Switch > 0)
                    HV3Switch--;
                if (HV3Switch > -1)
                {
                    ToggleHV3Switch();                    
                }
                HV3Switch = MathHelper.Clamp(HV3Switch, 0, 2);
            }
        }
        public void ToggleHV3Switch()
        {
            if (HV3Enable)
            {
                // Výběr napájecího systému při HV3 (zde bude výběr dle obrazovky)
                switch (RouteVoltageV)
                {
                    case 3000:
                        SwitchingVoltageMode = 0;
                        SwitchingVoltageMode_OffDC = true;
                        SwitchingVoltageMode_OffAC = false;
                        break;
                    case 25000:
                        SwitchingVoltageMode = 2;
                        SwitchingVoltageMode_OffDC = false;
                        SwitchingVoltageMode_OffAC = true;
                        break;
                }
                
                if (LastStateHV3 != HV3Switch)
                    SignalEvent(Event.PantographToggle); // Zvuk přepínače                

                switch (HV3Switch)
                {
                    case 0: // HV vypnout
                        //Simulator.Confirmer.Information("Switch 0");
                        break;
                    case 1: // střed
                        //Simulator.Confirmer.Information("Switch 1");
                        break;                                       
                    case 2: // HV zapnout
                        //Simulator.Confirmer.Information("Switch 2");
                        break;                    
                }
                LastStateHV3 = HV3Switch;
            }
        }

        public void ToggleHV5SwitchUp()
        {            
            if (HV5Enable)
            {
                if (HV5Switch < 6)
                    HV5Switch++;
                if (HV5Switch < 6)
                {                    
                    ToggleHV5Switch();
                    Simulator.Confirmer.Confirm(CabControl.SwitchingVoltageMode_OffAC, SwitchingVoltageMode_OffAC ? CabSetting.On : CabSetting.Off);
                }
                HV5Switch = MathHelper.Clamp(HV5Switch, 1, 5);                
            }
        }
        public void ToggleHV5SwitchDown()
        {
            if (HV5Enable)
            {
                if (HV5Switch > 0)
                    HV5Switch--;
                if (HV5Switch > 0)
                {                    
                    ToggleHV5Switch();
                    Simulator.Confirmer.Confirm(CabControl.SwitchingVoltageMode_OffDC, SwitchingVoltageMode_OffDC ? CabSetting.On : CabSetting.Off);
                }
                HV5Switch = MathHelper.Clamp(HV5Switch, 1, 5);                
            }
        }
        public void ToggleHV5Switch()
        {
            if (HV5Enable)
            {
                if (LastStateHV5 != HV5Switch)                
                    SignalEvent(Event.PantographToggle); // Zvuk přepínače                

                if (HVCanOn && Battery && PowerKey && Pantograph4Switch != 0)
                    HVOn = true;
                //Simulator.Confirmer.Information("HV can On");

                switch (HV5Switch)
                {
                    case 1:
                        //Simulator.Confirmer.Information("Switch 1");
                        break;
                    case 2: // DC
                        SwitchingVoltageMode = 0;
                        SwitchingVoltageMode_OffDC = true;
                        SwitchingVoltageMode_OffAC = false;
                        //Simulator.Confirmer.Information("Switch 2");
                        break;
                    case 3: // střed
                        SwitchingVoltageMode = 1;
                        SwitchingVoltageMode_OffDC = false;
                        SwitchingVoltageMode_OffAC = false;
                        //Simulator.Confirmer.Information("Switch 3");
                        break;
                    case 4: // AC
                        SwitchingVoltageMode = 2;
                        SwitchingVoltageMode_OffAC = true;
                        SwitchingVoltageMode_OffDC = false;
                        //Simulator.Confirmer.Information("Switch 4");
                        break;
                    case 5:
                        //Simulator.Confirmer.Information("Switch 5");
                        break;
                }
                LastStateHV5 = HV5Switch;
            }
        }


        public void TogglePantograph3SwitchUp()
        {
            if (Pantograph3Enable)
            {
                if (Pantograph3Switch < 3)
                    Pantograph3Switch++;
                if (Pantograph3Switch < 3)
                {
                    TogglePantograph3Switch();
                }
                Pantograph3Switch = MathHelper.Clamp(Pantograph3Switch, 0, 2);
            }
        }
        public void TogglePantograph3SwitchDown()
        {
            if (Pantograph3Enable)
            {
                if (Pantograph3Switch > 0)
                    Pantograph3Switch--;
                if (Pantograph3Switch > -1)
                {
                    TogglePantograph3Switch();
                }
                Pantograph3Switch = MathHelper.Clamp(Pantograph3Switch, 0, 2);
            }
        }
        public void TogglePantograph3Switch()
        {
            if (Pantograph3Enable)
            {
                if (LastStatePantograph3 != Pantograph3Switch)
                    SignalEvent(Event.PantographToggle); // Zvuk přepínače                

                if (!MultiSystemEngine && !CircuitBreakerOn)
                    return;

                // Zabrání zvednutí pantografu po stlačení tlačítka přerušení napájení
                if (BreakPowerButton)
                    BreakPowerButton_Activated = true;
                if (BreakPowerButton_Activated && Pantograph3Switch == 1)
                    BreakPowerButton_Activated = false;

                if (Pantograph3CanOn && Battery && PowerKey && !BreakPowerButton_Activated && GameTimeFlow > 1) 
                {
                    PantoStatus = Pantograph3Switch;
                    int p1 = 1; int p2 = 2;
                    if (UsingRearCab) { p1 = 2; p2 = 1; }
                    if (PantoStatus != PrePantoStatus)
                    {
                        switch (Pantograph3Switch)
                        {
                            case 0: // Panto vypnout
                                if (Pantographs[p1].State != PantographState.Down)                             
                                    SignalEvent(PowerSupplyEvent.LowerPantograph, p1);
                                if (Pantographs[p2].State != PantographState.Down)
                                    SignalEvent(PowerSupplyEvent.LowerPantograph, p2);                                
                                break;
                            case 1: // střed                                    
                                break;
                            case 2: // Panto zapnout
                                if (Pantographs[p1].State != PantographState.Up)                            
                                    SignalEvent(PowerSupplyEvent.RaisePantograph, p1);
                                if (Pantographs[p2].State != PantographState.Down)
                                    SignalEvent(PowerSupplyEvent.LowerPantograph, p2);
                                break;
                        }
                        PrePantoStatus = Pantograph3Switch;
                    }                    
                }
                LastStatePantograph3 = Pantograph3Switch;
            }
        }

        public void TogglePantograph4SwitchUp()
        {
            if (Pantograph4Switch < 4)
                Pantograph4Switch++;
            if (Pantograph4Switch == 4)
                Pantograph4Switch = 0;
            SignalEvent(Event.PantographToggle);
            TogglePantograph4Switch();
        }
        public void TogglePantograph4SwitchDown()
        {
            if (Pantograph4Switch > -1)
                Pantograph4Switch--;
            if (Pantograph4Switch == -1)
                Pantograph4Switch = 3;
            SignalEvent(Event.PantographToggle);
            TogglePantograph4Switch();            
        }
        public void TogglePantograph4Switch()
        {
            if (!MultiSystemEngine && !CircuitBreakerOn)
                return;
            if (Pantograph3Enable)
                return;

            // Zabrání zvednutí pantografu po stlačení tlačítka přerušení napájení
            if (BreakPowerButton)
                BreakPowerButton_Activated = true;
            if (BreakPowerButton_Activated && Pantograph4Switch == 0)
                BreakPowerButton_Activated = false;
                        
            if (Battery && !BreakPowerButton_Activated && GameTimeFlow > 1) // Zatím bez PowerKey kvůli kompatibilitě
            {
                PantoStatus = Pantograph4Switch;
                int p1 = 1; int p2 = 2;
                if (UsingRearCab) { p1 = 2; p2 = 1; }
                if (PantoStatus != PrePantoStatus)
                {
                    switch (Pantograph4Switch)
                    {
                        case 0:
                            {
                                if (Pantographs[p1].State == PantographState.Up) // Zadní panto                            
                                    SignalEvent(PowerSupplyEvent.LowerPantograph, p1);
                                if (Pantographs[p2].State == PantographState.Up) // Přední panto
                                    SignalEvent(PowerSupplyEvent.LowerPantograph, p2);
                            }
                            break;
                        case 1:
                            {
                                if (AirForPantograph && Pantographs[p1].State == PantographState.Down) // Zadní panto
                                    SignalEvent(PowerSupplyEvent.RaisePantograph, p1);
                                if (Pantographs[p2].State == PantographState.Up) // Přední panto
                                    SignalEvent(PowerSupplyEvent.LowerPantograph, p2);
                            }
                            break;
                        case 2:
                            {
                                if (AirForPantograph && Pantographs[p1].State == PantographState.Down) // Zadní panto
                                    SignalEvent(PowerSupplyEvent.RaisePantograph, p1);
                                if (AirForPantograph && Pantographs[p2].State == PantographState.Down) // Přední panto
                                    SignalEvent(PowerSupplyEvent.RaisePantograph, p2);
                            }
                            break;
                        case 3:
                            {
                                if (Pantographs[p1].State == PantographState.Up) // Zadní panto                            
                                    SignalEvent(PowerSupplyEvent.LowerPantograph, p1);
                                if (AirForPantograph && Pantographs[p2].State == PantographState.Down) // Přední panto
                                    SignalEvent(PowerSupplyEvent.RaisePantograph, p2);
                            }
                            break;
                    }
                }
                PrePantoStatus = Pantograph4Switch;
            }
        }

        public void ToggleCompressorCombinedSwitchUp()
        {
            if (CompressorSwitch < 4)
                CompressorSwitch++;
            if (CompressorSwitch <= 3)
            {
                SignalEvent(Event.CompressorMode_OffAutoOn);
                ToggleCompressorCombined();
            }
            CompressorSwitch = MathHelper.Clamp(CompressorSwitch, 0, 3);            
        }
        public void ToggleCompressorCombinedSwitchDown()
        {
            if (CompressorSwitch > -1)
                CompressorSwitch--;
            if (CompressorSwitch >= 0)
            {
                SignalEvent(Event.CompressorMode_OffAutoOn);
                ToggleCompressorCombined();
            }
            CompressorSwitch = MathHelper.Clamp(CompressorSwitch, 0, 3);            
        }          
        public void ToggleCompressorCombined()
        {                       
            if (CompressorCombined)
            {
                Compressor_I_HandMode = false;
                switch (CompressorSwitch)
                {
                    case 0:
                        {
                            AuxCompressorMode_OffOn = true;
                            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.AuxCompressorMode_OffOn, AuxCompressorMode_OffOn ? CabSetting.On : CabSetting.Off);                            
                        }
                        break;
                    case 1:
                        {
                            AuxCompressorMode_OffOn = false;
                            CompressorMode_OffAuto = false;                            
                        }
                        break;
                    case 2:
                        {
                            CompressorMode_OffAuto = true;
                            Compressor_I_HandMode = false;
                            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.CompressorMode_OffAuto, CompressorMode_OffAuto ? CabSetting.On : CabSetting.Off);                            
                        }
                        break;
                    case 3:
                        {
                            CompressorMode_OffAuto = false;
                            Compressor_I_HandMode = true;
                            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.Compressor_I_HandMode, Compressor_I_HandMode ? CabSetting.On : CabSetting.Off);
                        }
                        break;
                }                
            }
        }

        public void ToggleCompressorCombinedSwitch2Up()
        {
            if (CompressorSwitch2 < 3)
                CompressorSwitch2++;
            if (CompressorSwitch2 <= 2)
            {
                SignalEvent(Event.CompressorMode_OffAutoOn);
                ToggleCompressorCombined2();
            }
            CompressorSwitch2 = MathHelper.Clamp(CompressorSwitch2, 0, 2);            
        }
        public void ToggleCompressorCombinedSwitch2Down()
        {
            if (CompressorSwitch2 > -1)
                CompressorSwitch2--;
            if (CompressorSwitch2 >= 0)
            {
                SignalEvent(Event.CompressorMode_OffAutoOn);
                ToggleCompressorCombined2();
            }
            CompressorSwitch2 = MathHelper.Clamp(CompressorSwitch2, 0, 2);
        }
        public void ToggleCompressorCombined2()
        {
            if (CompressorCombined2)
            {
                Compressor_II_HandMode = false;
                switch (CompressorSwitch2)
                {                   
                    case 0:
                        {                            
                            CompressorMode2_OffAuto = false;
                        }
                        break;
                    case 1:
                        {
                            CompressorMode2_OffAuto = true;
                            Compressor_II_HandMode = false;
                            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.CompressorMode2_OffAuto, CompressorMode2_OffAuto ? CabSetting.On : CabSetting.Off);
                        }
                        break;
                    case 2:
                        {
                            CompressorMode2_OffAuto = false;
                            Compressor_II_HandMode = true;
                            if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.Compressor_II_HandMode, Compressor_II_HandMode ? CabSetting.On : CabSetting.Off);
                        }
                        break;
                }                
            }
        }

        public void ToggleAuxCompressorMode_OffOn()
        {
            if (AuxCompressor && !CompressorCombined)
            {
                AuxCompressorMode_OffOn = !AuxCompressorMode_OffOn;
                if (AuxCompressorMode_OffOn) SignalEvent(Event.AuxCompressorMode_OffOnOn);
                else SignalEvent(Event.AuxCompressorMode_OffOnOff);
                if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.AuxCompressorMode_OffOn, AuxCompressorMode_OffOn ? CabSetting.On : CabSetting.Off);
            }
        }
        public void ToggleCompressorMode_OffAuto()
        {
            if (Compressor_I && !CompressorCombined)
            {
                CompressorMode_OffAuto = !CompressorMode_OffAuto;
                if (CompressorMode_OffAuto) SignalEvent(Event.CompressorMode_OffAutoOn);
                else SignalEvent(Event.CompressorMode_OffAutoOff);
                if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.CompressorMode_OffAuto, CompressorMode_OffAuto ? CabSetting.On : CabSetting.Off);
            }
        }
        public void ToggleCompressorMode2_OffAuto()
        {
            if (Compressor_II && !CompressorCombined2)
            {
                CompressorMode2_OffAuto = !CompressorMode2_OffAuto;
                if (CompressorMode2_OffAuto) SignalEvent(Event.CompressorMode_OffAutoOn);
                else SignalEvent(Event.CompressorMode_OffAutoOff);
                if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.CompressorMode2_OffAuto, CompressorMode2_OffAuto ? CabSetting.On : CabSetting.Off);
            }
        }
        public void ToggleHeating_OffOn()
        {
            if (HeatingEnable)
            {
                Heating_OffOn = !Heating_OffOn;
                if (Heating_OffOn) SignalEvent(Event.Heating_OffOnOn);
                else SignalEvent(Event.Heating_OffOnOff);
                if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.Heating_OffOn, Heating_OffOn ? CabSetting.On : CabSetting.Off);
            }
        }
        

        // Zatím povoleno kvůli kompatibilitě
        public void ToggleControlRouteVoltage()
        {
            if (!IsPlayerTrain)
                return;
            if (!EnableControlVoltageChange)
                return;
            if (LocomotivePowerVoltage == 3000)
            {
                LocomotivePowerVoltage = 25000;
                MultiSystemEngine = false;
                Simulator.Confirmer.Information("Systém napájení změněn na 25kV.");
            }
            else if (LocomotivePowerVoltage == 25000 && !MultiSystemEngine)
            {
                MultiSystemEngine = true;
                Simulator.Confirmer.Information("Systém napájení změněn na 3kV + 25kV.");
            }
            else if (LocomotivePowerVoltage == 25000 && MultiSystemEngine)
            {
                LocomotivePowerVoltage = 3000;
                MultiSystemEngine = false;
                Simulator.Confirmer.Information("Systém napájení byl změněn na 3kV.");
            }
        }

        public void SetVoltageMarker(int newVoltage)
        {
            if (!Simulator.SuperUser)
                return;
            // uložím marker
            SetVoltageMarkerPosition(newVoltage);
            if (newVoltage == 3000)
            {
                RouteVoltageChange = true;
                RouteVoltageV = 3000;
            }
            else if (newVoltage == 25000)
            {
                RouteVoltageChange = false;
                RouteVoltageV = 25000;
            }
            else if (newVoltage == 0)
                RouteVoltageV = 0;
        }


        public void ToggleQuickReleaseButton(bool quickReleaseButton)
        {
            if (QuickReleaseButtonEnable)
            {
                QuickReleaseButton = quickReleaseButton;
                if (QuickReleaseButton && !QuickReleaseButtonPressed)
                {
                    SignalEvent(Event.QuickReleaseButton);
                    QuickReleaseButtonPressed = true;
                }
                if (!QuickReleaseButton && QuickReleaseButtonPressed)
                {
                    SignalEvent(Event.QuickReleaseButtonRelease);
                    QuickReleaseButtonPressed = false;
                }
                if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.QuickReleaseButton, quickReleaseButton ? CabSetting.On : CabSetting.Off);
            }
        }

        public void ToggleLowPressureReleaseButton(bool lowPressureReleaseButton)
        {
            if (LowPressureReleaseButtonEnable)
            {
                LowPressureReleaseButton = lowPressureReleaseButton;
                if (LowPressureReleaseButton && !LowPressureReleaseButtonPressed)
                {
                    SignalEvent(Event.LowPressureReleaseButton);
                    LowPressureReleaseButtonPressed = true;
                }
                if (!LowPressureReleaseButton && LowPressureReleaseButtonPressed)
                {
                    SignalEvent(Event.LowPressureReleaseButtonRelease);
                    LowPressureReleaseButtonPressed = false;
                }
                if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.LowPressureReleaseButton, lowPressureReleaseButton ? CabSetting.On : CabSetting.Off);
            }
        }

        public void ToggleBreakPowerButton(bool breakPowerButton)
        {
            if (BreakPowerButtonEnable)
            {
                BreakPowerButton = breakPowerButton;
                if (BreakPowerButton && !BreakPowerButtonPressed)
                {
                    SignalEvent(Event.BreakPowerButton);
                    BreakPowerButtonPressed = true;
                }
                if (!BreakPowerButton && BreakPowerButtonPressed)
                {
                    SignalEvent(Event.BreakPowerButtonRelease);
                    BreakPowerButtonPressed = false;
                }
                if (Simulator.PlayerLocomotive == this) Simulator.Confirmer.Confirm(CabControl.BreakPowerButton, breakPowerButton ? CabSetting.On : CabSetting.Off);
            }
        }

        public enum TrainType { Pax, Cargo };
        public TrainType SelectedTrainType = TrainType.Pax;
        public void ChangeTrainTypePaxCargo()
        {
            SelectedTrainType = SelectedTrainType == TrainType.Pax ? SelectedTrainType = TrainType.Cargo : TrainType.Pax;
        }

        XmlDocument powerStationXml;
        int PowerSuplyStationDbVersion = 0;
        bool PowerSuplyStationDbVersionUpdated = false;
        public void SetPowerSupplyStationLocation()
        {
            if (!Simulator.SuperUser)
                return;

            cz.aspone.lkpr.WebService webService = new cz.aspone.lkpr.WebService();
            if (!PowerSuplyStationDbVersionUpdated)
            {
                int v = int.Parse(webService.GetPowerSuplyStationVersion(Simulator.TRK.Tr_RouteFile.FileName));
                PowerSuplyStationDbVersion = v + 1;
                webService.UpdatePowerSuplyStationVersion(PowerSuplyStationDbVersion, Simulator.TRK.Tr_RouteFile.FileName);
                PowerSuplyStationDbVersionUpdated = true;
            }
            FileInfo fi = new FileInfo(Simulator.TRK.Tr_RouteFile.FullFileName);
            File.WriteAllText(fi.DirectoryName + "\\PowerSupplyStationsDbVersion.ini", PowerSuplyStationDbVersion.ToString());

            double latitude = 0;
            double longitude = 0;
            new WorldLatLon().ConvertWTC(WorldPosition.TileX, WorldPosition.TileZ, WorldPosition.WorldLocation.Location, ref latitude, ref longitude);

            if (powerStationXml == null)
            {
                powerStationXml = new XmlDocument();
                powerStationXml.Load(Simulator.RoutePath + "\\PowerSupplyStations.xml");
            }

            int id = webService.SavePowerSupplyStation(-1, Simulator.TRK.Tr_RouteFile.Name, longitude.ToString(), latitude.ToString(), RouteVoltageV == 3000 ? "0" : "1", PowerSuplyStationDbVersion);

            foreach (XmlNode node in powerStationXml.ChildNodes)
            {
                if (node.Name == "PowerSupplyStations")
                {
                    XmlNode stationNode = powerStationXml.CreateElement("SupplyStation");
                    XmlNode node0 = powerStationXml.CreateElement("Id");
                    node0.InnerText = id.ToString();
                    XmlNode node1 = powerStationXml.CreateElement("Longitude");
                    node1.InnerText = latitude.ToString().Replace(",", ".");
                    XmlNode node2 = powerStationXml.CreateElement("Latitude");
                    node2.InnerText = longitude.ToString().Replace(",", ".");
                    XmlNode node3 = powerStationXml.CreateElement("PowerSystem");
                    node3.InnerText = RouteVoltageV == 3000? "0" : "1";
                    stationNode.AppendChild(node0);
                    stationNode.AppendChild(node1);
                    stationNode.AppendChild(node2);
                    stationNode.AppendChild(node3);
                    node.AppendChild(stationNode);
                }
            }
            powerStationXml.Save(Simulator.RoutePath + "\\PowerSupplyStations.xml");
            SetUpPowerSupplyStations();
            Simulator.Confirmer.Information("Napaječka uložena do externí databáze.");
        }

        XmlDocument voltageMarkersXml;
        int VoltageMarkersDbVersion = 0;
        bool VoltageMarkersDbVersionUpdated = false;
        public void SetVoltageMarkerPosition(int Voltage)
        {
            if (!Simulator.SuperUser)
                return;

            cz.aspone.lkpr.WebService ws = new cz.aspone.lkpr.WebService();

            if (!VoltageMarkersDbVersionUpdated)
            {
                string result = ws.GetPowerSuplyMarkerVersion(Simulator.TRK.Tr_RouteFile.FileName);
                int v = int.Parse(result);
                VoltageMarkersDbVersion = v + 1;
                ws.UpdatePowerSupplyMarkerVersion(VoltageMarkersDbVersion, Simulator.TRK.Tr_RouteFile.FileName);
                VoltageMarkersDbVersionUpdated = true;
            }
            FileInfo fi = new FileInfo(Simulator.TRK.Tr_RouteFile.FullFileName);
            File.WriteAllText(fi.DirectoryName + "\\VoltageChangeMarkersDbVersion.ini", VoltageMarkersDbVersion.ToString());

            double latitude = 0;
            double longitude = 0;
            new WorldLatLon().ConvertWTC(WorldPosition.TileX, WorldPosition.TileZ, WorldPosition.WorldLocation.Location, ref latitude, ref longitude);

            int id = ws.SavePowerSupplyMarker(-1, Simulator.TRK.Tr_RouteFile.FileName, longitude.ToString(), latitude.ToString(), Voltage, VoltageMarkersDbVersion);

            if (voltageMarkersXml == null)
            {
                voltageMarkersXml = new XmlDocument();
                voltageMarkersXml.Load(Simulator.RoutePath + "\\VoltageChangeMarkers.xml");
            }

            foreach (XmlNode node in voltageMarkersXml.ChildNodes)
            {
                if (node.Name == "VoltageChangeMarkers")
                {
                    XmlNode stationNode = voltageMarkersXml.CreateElement("Marker");
                    XmlNode node0 = voltageMarkersXml.CreateElement("Id");
                    node0.InnerText = id.ToString();
                    XmlNode node1 = voltageMarkersXml.CreateElement("Longitude");
                    node1.InnerText = latitude.ToString().Replace(",", ".");
                    XmlNode node2 = voltageMarkersXml.CreateElement("Latitude");
                    node2.InnerText = longitude.ToString().Replace(",", ".");
                    XmlNode node3 = voltageMarkersXml.CreateElement("Voltage");
                    node3.InnerText = Voltage.ToString();
                    stationNode.AppendChild(node0);
                    stationNode.AppendChild(node1);
                    stationNode.AppendChild(node2);
                    stationNode.AppendChild(node3);
                    node.AppendChild(stationNode);
                }
            }
            voltageMarkersXml.Save(Simulator.RoutePath + "\\VoltageChangeMarkers.xml");
            SetUpVoltageChangeMarkers();
            Simulator.Confirmer.Information("Nastaveno " + Voltage.ToString() + "V a uloženo do externí databáze.");
        }

        //put here because you can have diesel helpers and electric player locomotive
        public void ToggleHelpersEngine()
        {
            var onOffFound = false; //this avoids that locomotive engines toggle in opposite directions
            var powerOn = false;
            var helperLocos = 0;

            foreach (var car in Train.Cars)
            {
                var mstsDieselLocomotive = car as MSTSDieselLocomotive;
                if (mstsDieselLocomotive != null && mstsDieselLocomotive.AcceptMUSignals)
                {
                    if (mstsDieselLocomotive.DieselEngines.Count > 0)
                    {
                        if ((car == Simulator.PlayerLocomotive))
                        {
                            if ((mstsDieselLocomotive.DieselEngines.Count > 1))
                            {
                                for (int i = 1; i < mstsDieselLocomotive.DieselEngines.Count; i++)
                                {
                                    if (!onOffFound)
                                    {
                                        onOffFound = true;
                                        if (mstsDieselLocomotive.DieselEngines[i].EngineStatus == DieselEngine.Status.Stopped)
                                        {
                                            mstsDieselLocomotive.DieselEngines[i].Start();
                                            powerOn = true;
                                        }
                                        if (mstsDieselLocomotive.DieselEngines[i].EngineStatus == DieselEngine.Status.Running)
                                        {
                                            mstsDieselLocomotive.DieselEngines[i].Stop();
                                        }
                                    }
                                    else
                                    {
                                        if (mstsDieselLocomotive.DieselEngines[i].EngineStatus == DieselEngine.Status.Stopped && powerOn)
                                        {
                                            mstsDieselLocomotive.DieselEngines[i].Start();
                                        }
                                        if (mstsDieselLocomotive.DieselEngines[i].EngineStatus == DieselEngine.Status.Running && !powerOn)
                                        {
                                            mstsDieselLocomotive.DieselEngines[i].Stop();
                                        }
                                    }
                                }
                                if (mstsDieselLocomotive.DieselEngines[1].EngineStatus == DieselEngine.Status.Stopping)
                                    mstsDieselLocomotive.SignalEvent(Event.SecondEnginePowerOff);
                                else if (mstsDieselLocomotive.DieselEngines[1].EngineStatus == DieselEngine.Status.Starting)
                                    mstsDieselLocomotive.SignalEvent(Event.SecondEnginePowerOn);
                            }
                        }
                        else
                        {
                            foreach (DieselEngine de in mstsDieselLocomotive.DieselEngines)
                            {
                                if (!onOffFound)
                                {
                                    if (de.EngineStatus == DieselEngine.Status.Stopped)
                                    {
                                        de.Start();
                                        powerOn = true;
                                    }
                                    if (de.EngineStatus == DieselEngine.Status.Running)
                                    {
                                        de.Stop();
                                    }
                                }
                                else
                                {

                                    if (de.EngineStatus == DieselEngine.Status.Stopped && powerOn)
                                    {
                                        de.Start();
                                    }
                                    if (de.EngineStatus == DieselEngine.Status.Running && !powerOn)
                                    {
                                        de.Stop();
                                    }
                                }
                            }
                        }
                    }
                    //mstsDieselLocomotive.StartStopDiesel();

                    if ((car != Simulator.PlayerLocomotive) && (mstsDieselLocomotive.AcceptMUSignals))
                    {
                        if (mstsDieselLocomotive.DieselEngines[0].EngineStatus == DieselEngine.Status.Stopping)
                            mstsDieselLocomotive.SignalEvent(Event.EnginePowerOff);
                        else if (mstsDieselLocomotive.DieselEngines[0].EngineStatus == DieselEngine.Status.Starting)
                            mstsDieselLocomotive.SignalEvent(Event.EnginePowerOn);
                        if (mstsDieselLocomotive.DieselEngines.Count > 1)
                        {
                            if (mstsDieselLocomotive.DieselEngines[1].EngineStatus == DieselEngine.Status.Stopping)
                                mstsDieselLocomotive.SignalEvent(Event.SecondEnginePowerOff);
                            else if (mstsDieselLocomotive.DieselEngines[1].EngineStatus == DieselEngine.Status.Starting)
                                mstsDieselLocomotive.SignalEvent(Event.SecondEnginePowerOn);
                        }
                    }
                    helperLocos++;
                }
            }
            // One confirmation however many helper locomotives
            // <CJComment> Couldn't make one confirmation per loco work correctly :-( </CJComment>
            if (helperLocos > 0)
            {
                Simulator.Confirmer.Confirm(CabControl.HelperDiesel, powerOn ? CabSetting.On : CabSetting.Off);
            }

        }

        public override void SignalEvent(Event evt)
        {
            switch (evt)
            {
                case Event.VigilanceAlarmOn: { AlerterSnd = true; if (Simulator.Settings.Alerter) Simulator.Confirmer.Confirm(CabControl.Alerter, CabSetting.On); break; }
                case Event.VigilanceAlarmOff: { AlerterSnd = false; if (Simulator.Settings.Alerter) Simulator.Confirmer.Confirm(CabControl.Alerter, CabSetting.Off); break; }
                case Event.BellOn:
                case Event.BellOff:
                    if (this == Simulator.PlayerLocomotive && Simulator.Confirmer != null)
                        Simulator.Confirmer.Confirm(CabControl.Bell, Bell ? CabSetting.On : CabSetting.Off);
                    break;
                case Event.HornOn:
                case Event.HornOff:
                    if (this == Simulator.PlayerLocomotive && Simulator.Confirmer != null)
                        Simulator.Confirmer.Confirm(this is MSTSSteamLocomotive ? CabControl.Whistle : CabControl.Horn, Horn ? CabSetting.On : CabSetting.Off);
                    break;
                case Event.SanderOn: { Sander = true; if (this.IsLeadLocomotive() && this == Simulator.PlayerLocomotive && Simulator.Confirmer != null) Simulator.Confirmer.Confirm(CabControl.Sander, CabSetting.On); break; }
                case Event.SanderOff: { Sander = false; if (this.IsLeadLocomotive() && this == Simulator.PlayerLocomotive && Simulator.Confirmer != null) Simulator.Confirmer.Confirm(CabControl.Sander, CabSetting.Off); break; }
                case Event.WiperOn: { Wiper = true; if (this == Simulator.PlayerLocomotive && Simulator.Confirmer != null) Simulator.Confirmer.Confirm(CabControl.Wipers, CabSetting.On); break; }
                case Event.WiperOff: { Wiper = false; if (this == Simulator.PlayerLocomotive) Simulator.Confirmer.Confirm(CabControl.Wipers, CabSetting.Off); break; }

                // <CJComment> The "H" key doesn't call these SignalEvents yet. </CJComment>
                case Event._HeadlightOff: { Headlight = 0; break; }
                case Event._HeadlightDim: { Headlight = 1; break; }
                case Event._HeadlightOn: { Headlight = 2; break; }

                case Event.CompressorOn: { CompressorIsOn = true; break; }
                case Event.CompressorOff: { CompressorIsOn = false; break; }

                    //Vacuum exhauster event only triggered if vacuum exhauster engine control fitted.
                case Event.VacuumExhausterOn: { if(FastVacuumExhausterFitted) VacuumExhausterPressed = true; if (this.IsLeadLocomotive() && this == Simulator.PlayerLocomotive && Simulator.Confirmer != null) Simulator.Confirmer.Confirm(CabControl.VacuumExhauster, CabSetting.On); break; }
                case Event.VacuumExhausterOff: { if (FastVacuumExhausterFitted) VacuumExhausterPressed = false; if (this.IsLeadLocomotive() && this == Simulator.PlayerLocomotive && Simulator.Confirmer != null) Simulator.Confirmer.Confirm(CabControl.VacuumExhauster, CabSetting.Off); break; }

                case Event._ResetWheelSlip: { LocomotiveAxle.Reset(Simulator.GameTime, SpeedMpS); ThrottleController.SetValue(0.0f); break; }
                case Event.TrainBrakePressureDecrease:
                case Event.TrainBrakePressureIncrease:
                    {
                        if (Train.TrainType == Train.TRAINTYPE.AI || Train.TrainType == Train.TRAINTYPE.AI_PLAYERHOSTING)
                        {
                            if (Train.Simulator.GameTime - LastBrakeSoundTime < 15) // don't repeat sound too often for AI trains (which frequently set brakes on and off)
                            {
                                return;
                            }
                            LastBrakeSoundTime = Train.Simulator.GameTime;
                        }
                        break;
                    }
                
                // Icik
                case Event.Compressor2On: { Compressor2IsOn = true; break; }
                case Event.Compressor2Off: { Compressor2IsOn = false; break; }
                case Event.AuxCompressorOn: { AuxCompressorIsOn = true; break; }
                case Event.AuxCompressorOff: { AuxCompressorIsOn = false; break; }
            }

            base.SignalEvent(evt);
        }

        //used by remote train locomotives
 /*       public virtual void RemoteUpdate()
        {
        }*/

        public float elapsedTime;
        private float previousSelectedSpeed = 0;
        private float previousMaxMirelSpeed = 0;
        private float previousTrainBrakeData = 0;
        public virtual float GetDataOf(CabViewControl cvc)
        {
            CheckBlankDisplay(cvc);
            float data = 0;
            switch (cvc.ControlType)
            {
                case CABViewControlTypes.SPEEDOMETER:
                    {
                        float speed = Math.Abs(WheelSpeedMpS);
                        if (extendedPhysics != null)
                        {
                            foreach (Undercarriage uc in extendedPhysics.Undercarriages)
                            {
                                foreach (ExtendedAxle ea in uc.Axles)
                                {
                                    if (ea.HaveSpeedometerSensor)
                                        speed = Math.Abs(ea.WheelSpeedMpS);
                                }
                            }
                        }
                        cvc.ElapsedTime += elapsedTime;
                        if (cvc.ElapsedTime < cvc.UpdateTime && cvc.Vibration > 0)
                        {
                            if (cvc.ElapsedTime > cvc.UpdateTime / 2 && Math.Abs(speed) > 0.1f)
                            {
                                if (Up)
                                    data = cvc.PreviousData - (cvc.Vibration / 3.6f);
                                if (Down)
                                    data = cvc.PreviousData + (cvc.Vibration / 3.6f);
                                break;
                            }
                            data = cvc.PreviousData;
                            break;
                        }
                        cvc.ElapsedTime = 0;
                        //data = SpeedMpS;
                        if (AdvancedAdhesionModel)
                            data = speed;
                        else
                            data = speed;

                        if (cvc.Units == CABViewControlUnits.KM_PER_HOUR)
                            data *= 3.6f;
                        else // MPH
                            data *= 2.2369f;
                        data = Math.Abs(data);
                        if (cvc.Precision > 0)
                        {
                            data = data / cvc.Precision;
                            data = (float)Math.Round(data, 0);
                            data = data * cvc.Precision;
                        }
                        if (data > cvc.PreviousData)
                        {
                            Up = true;
                            Down = false;
                        }
                        if (data < cvc.PreviousData)
                        {
                            Up = false;
                            Down = true;
                        }
                        cvc.PreviousData = data;
                        break;
                    }
                case CABViewControlTypes.SPEED_PROJECTED:
                    {
                        if (Train != null)
                            data = Train.ProjectedSpeedMpS;
                        else data = 0;
                        if (cvc.Units == CABViewControlUnits.KM_PER_HOUR)
                            data *= 3.6f;
                        else // MPH
                            data *= 2.2369f;
                        data = Math.Abs(data);
                        break;
                    }
                case CABViewControlTypes.ACCELEROMETER:
                    {
                        switch (cvc.Units)
                        {
                            case CABViewControlUnits.METRES_SEC_SEC:
                                data = this.AccelerationMpSS;
                                break;

                            case CABViewControlUnits.METRES_SEC_HOUR:
                                data = this.AccelerationMpSS * 3600.0f;
                                break;

                            case CABViewControlUnits.KM_HOUR_SEC:
                                data = this.AccelerationMpSS * 3.6f;
                                break;

                            case CABViewControlUnits.KM_HOUR_HOUR:
                                data = this.AccelerationMpSS * 3.6f * 3600.0f;
                                break;

                            case CABViewControlUnits.MILES_HOUR_MIN:
                                data = this.AccelerationMpSS * 2.236936f * 60.0f;
                                break;

                            case CABViewControlUnits.MILES_HOUR_HOUR:
                                // 
                                data = this.AccelerationMpSS * 2.236936f * 3600.0f;
                                break;

                            default:
                                data = this.AccelerationMpSS;
                                break;

                        }
                        break;
                    }

                case CABViewControlTypes.ORTS_WATER_SCOOP:
                    data = WaterScoopDown ? 1 : 0;
                    break;

                case CABViewControlTypes.STEAM_HEAT:
                    data = SteamHeatController.CurrentValue;
                    break;

                case CABViewControlTypes.AMMETER: // Current not modelled yet to ammeter shows tractive effort until then.
                case CABViewControlTypes.AMMETER_ABS:
                    {
                        cvc.ElapsedTime += elapsedTime;
                        if (cvc.ElapsedTime > cvc.UpdateTime)
                        {
                            var direction = 0; // Forwards
                            if (cvc is CVCGauge && ((CVCGauge)cvc).Orientation == 0)
                                direction = ((CVCGauge)cvc).Direction;
                            if (MaxCurrentA == 0)
                                MaxCurrentA = (float)cvc.MaxValue;
                            if (LocomotiveAxle != null)
                            {
                                data = 0.0f;
                                if (ThrottlePercent > 0)
                                {
                                    //float rangeFactor = direction == 0 ? (float)cvc.MaxValue : (float)cvc.MinValue;
                                    float rangeFactor = direction == 0 ? MaxCurrentA : (float)cvc.MinValue;
                                    if (FilteredMotiveForceN != 0)
                                        data = this.FilteredMotiveForceN / MaxForceN * rangeFactor;
                                    else
                                        data = this.LocomotiveAxle.AxleForceN / MaxForceN * rangeFactor;
                                    data = Math.Abs(data);
                                }
                                if (DynamicBrakePercent > 0 && MaxDynamicBrakeForceN > 0)
                                {
                                    float rangeFactor;
                                    if (cvc.ControlType == CABViewControlTypes.AMMETER_ABS)
                                    {
                                        if (DynamicBrakeMaxCurrentA == 0)
                                            rangeFactor = direction == 0 ? (float)cvc.MaxValue : (float)cvc.MinValue;
                                        else
                                            rangeFactor = direction == 0 ? DynamicBrakeMaxCurrentA : (float)cvc.MinValue;
                                    }
                                    else
                                    {
                                        if (DynamicBrakeMaxCurrentA == 0)
                                            rangeFactor = direction == 0 ? (float)cvc.MinValue : (float)cvc.MaxValue;
                                        else
                                            rangeFactor = direction == 0 ? -DynamicBrakeMaxCurrentA : (float)cvc.MaxValue;
                                    }
                                    data = DynamicBrakeForceN / MaxDynamicBrakeForceN * rangeFactor;
                                }
                                if (direction == 1)
                                    data = -data;
                                if (cvc.ControlType == CABViewControlTypes.AMMETER_ABS) data = Math.Abs(data);
                                break;
                            }
                            data = this.MotiveForceN / MaxForceN * MaxCurrentA;
                            if (cvc.ControlType == CABViewControlTypes.AMMETER_ABS) data = Math.Abs(data);
                            cvc.ElapsedTime = 0;
                            PreDataAmmeter = data;
                        }
                        else
                            data = PreDataAmmeter;
                        break;
                    }
                case CABViewControlTypes.LOAD_METER:
                    {
                        var direction = 0; // Forwards
                        if (cvc is CVCGauge && ((CVCGauge)cvc).Orientation == 0)
                            direction = ((CVCGauge)cvc).Direction;
                        if (MaxCurrentA == 0)
                            MaxCurrentA = (float)cvc.MaxValue;
                        if (DynamicBrakeMaxCurrentA == 0)
                            DynamicBrakeMaxCurrentA = (float)cvc.MinValue;
                        data = 0.0f;
                        if (ThrottlePercent > 0)
                        {
                            if (FilteredMotiveForceN != 0)
                                data = this.FilteredMotiveForceN / MaxForceN * MaxCurrentA;
                            else
                                data = this.LocomotiveAxle.AxleForceN / MaxForceN * MaxCurrentA;
                            data = Math.Abs(data);
                        }
                        if (DynamicBrakePercent > 0 && MaxDynamicBrakeForceN > 0)
                        {
                            data = DynamicBrakeForceN / MaxDynamicBrakeForceN * DynamicBrakeMaxCurrentA;
                            data = -Math.Abs(data); // Ensure that dynamic force is seen as a "-ve force", changes colour on the load meter
                        }
                        if (direction == 1)
                            data = -data;
                        break;
                    }
                case CABViewControlTypes.TRACTION_BRAKING:
                    {
                        var direction = 0; // Forwards
                        if (cvc is CVCGauge && ((CVCGauge)cvc).Orientation == 0)
                            direction = ((CVCGauge)cvc).Direction;
                        data = 0.0f;
                        if (FilteredMotiveForceN != 0)
                            data = this.FilteredMotiveForceN;
                        else
                            data = this.LocomotiveAxle.AxleForceN;
                        if (DynamicBrakePercent > 0)
                        {
                            data = DynamicBrakeForceN;
                        }
                        data = Math.Abs(data);
                        switch (cvc.Units)
                        {
                            case CABViewControlUnits.AMPS:
                                if (MaxCurrentA == 0)
                                    MaxCurrentA = (float)cvc.MaxValue;
                                if (DynamicBrakeMaxCurrentA == 0)
                                    DynamicBrakeMaxCurrentA = (float)cvc.MinValue;
                                if (ThrottlePercent > 0)
                                {
                                    data = (data / MaxForceN) * MaxCurrentA;
                                }
                                if (DynamicBrakePercent > 0)
                                {
                                    data = (DynamicBrakeForceN / MaxDynamicBrakeForceN) * DynamicBrakeMaxCurrentA;
                                }
                                data = Math.Abs(data);
                                break;

                            case CABViewControlUnits.NEWTONS:
                                break;

                            case CABViewControlUnits.KILO_NEWTONS:
                                data = data / 1000.0f;
                                break;

                            case CABViewControlUnits.KILO_LBS:
                                data = N.ToLbf(data) * 0.001f;
                                break;
                        }
                        if (direction == 1 && !(cvc is CVCGauge))
                            data = -data;
                        break;
                    }
                case CABViewControlTypes.ORTS_SIGNED_TRACTION_BRAKING:
                    {
                        var direction = 0; // Forwards
                        if (cvc is CVCGauge && ((CVCGauge)cvc).Orientation == 0)
                            direction = ((CVCGauge)cvc).Direction;
                        data = 0.0f;
                        if (FilteredMotiveForceN != 0)
                            data = Math.Abs(this.FilteredMotiveForceN);
                        else
                            data = Math.Abs(this.LocomotiveAxle.AxleForceN);
                        if (DynamicBrakePercent > 0)
                        {
                            data = -Math.Abs(DynamicBrakeForceN);
                        }
                        switch (cvc.Units)
                        {
                            case CABViewControlUnits.AMPS:
                                if (MaxCurrentA == 0)
                                    MaxCurrentA = (float)cvc.MaxValue;
                                if (DynamicBrakeMaxCurrentA == 0)
                                    DynamicBrakeMaxCurrentA = (float)cvc.MinValue;
                                if (ThrottlePercent > 0)
                                {
                                    data = (data / MaxForceN) * MaxCurrentA;
                                }
                                if (DynamicBrakePercent > 0)
                                {
                                    data = (data / MaxDynamicBrakeForceN) * DynamicBrakeMaxCurrentA;
                                }
                                break;

                            case CABViewControlUnits.NEWTONS:
                                break;

                            case CABViewControlUnits.KILO_NEWTONS:
                                data = data / 1000.0f;
                                break;

                            case CABViewControlUnits.KILO_LBS:
                                data = N.ToLbf(data) * 0.001f;
                                break;
                        }
                        //                       if (direction == 1 && !(cvc is CVCGauge))
                        //                           data = -data;
                        break;
                    }
                // this considers both the dynamic as well as the train braking
                case CABViewControlTypes.ORTS_SIGNED_TRACTION_TOTAL_BRAKING:
                    {
                        var direction = 0; // Forwards
                        if (cvc is CVCGauge && ((CVCGauge)cvc).Orientation == 0)
                            direction = ((CVCGauge)cvc).Direction;
                        data = 0.0f;
                        if (Math.Abs(SpeedMpS) == 0.0f)
                            data = 0.0f;
                        else if (Math.Abs(FilteredMotiveForceN) - Math.Abs(BrakeForceN + DynamicBrakeForceN) > 0)
                            data = Math.Abs(this.FilteredMotiveForceN);
                        else if (Math.Abs(FilteredMotiveForceN) - Math.Abs(BrakeForceN + DynamicBrakeForceN) < 0)
                            data = -Math.Abs(BrakeForceN + DynamicBrakeForceN);
                        switch (cvc.Units)
                        {
                            case CABViewControlUnits.NEWTONS:
                                break;

                            case CABViewControlUnits.KILO_NEWTONS:
                                data = data / 1000.0f;
                                break;

                            case CABViewControlUnits.KILO_LBS:
                                data = N.ToLbf(data) * 0.001f;
                                break;
                        }
                        break;
                    }
                case CABViewControlTypes.DYNAMIC_BRAKE_FORCE:
                    {
                        var direction = 0; // Forwards
                        if (cvc is CVCGauge && ((CVCGauge)cvc).Orientation == 0)
                            direction = ((CVCGauge)cvc).Direction;
                        data = 0.0f;
                        data = DynamicBrakeForceN;
                        if (data > 0 && SpeedMpS > 0 || data < 0 && SpeedMpS < 0)
                        {
                            data = 0;
                            break;
                        }
                        data = Math.Abs(data);
                        switch (cvc.Units)
                        {
                            case CABViewControlUnits.AMPS:
                                cvc.ElapsedTime += elapsedTime;
                                if (cvc.ElapsedTime > cvc.UpdateTime)
                                {
                                    if (MaxCurrentA == 0)
                                        MaxCurrentA = (float)cvc.MaxValue;
                                    if (DynamicBrakeMaxCurrentA == 0)
                                        DynamicBrakeMaxCurrentA = (float)cvc.MinValue;
                                    if (ThrottlePercent > 0)
                                    {
                                        data = 0;
                                    }
                                    if (DynamicBrakePercent > 0)
                                    {
                                        data = (DynamicBrakeForceN / MaxDynamicBrakeForceN) * DynamicBrakeMaxCurrentA;
                                    }
                                    data = Math.Abs(data);
                                    cvc.ElapsedTime = 0;
                                    PreDataAmps = data;                                    
                                }
                                else
                                    data = PreDataAmps;
                                break;

                            case CABViewControlUnits.NEWTONS:
                                break;

                            case CABViewControlUnits.KILO_NEWTONS:
                                data = data / 1000.0f;
                                break;

                            case CABViewControlUnits.KILO_LBS:
                                data = N.ToLbf(data) * 0.001f;
                                break;
                        }
                        if (direction == 1 && !(cvc is CVCGauge))
                            data = -data;
                        break;
                    }
                case CABViewControlTypes.MAIN_RES:
                    {
                        data = ConvertFromPSI(cvc, MainResPressurePSI);
                        break;
                    }
                case CABViewControlTypes.BRAKE_PIPE:
                    {
                        data = ConvertFromPSI(cvc, this.BrakeSystem.BrakeLine1PressurePSI);
                        break;
                    }
                case CABViewControlTypes.EQ_RES:
                    {
                        data = ConvertFromPSI(cvc, this.Train.EqualReservoirPressurePSIorInHg);
                        break;
                    }
                case CABViewControlTypes.BRAKE_CYL:
                    {
                        data = ConvertFromPSI(cvc, BrakeSystem.GetCylPressurePSI());
                        break;
                    }
                case CABViewControlTypes.VACUUM_RESERVOIR_PRESSURE:
                    {
                        data = ConvertFromPSI(cvc, BrakeSystem.GetVacResPressurePSI());
                        break;
                    }
                case CABViewControlTypes.RPM:
                    {
                        var mstsDieselLocomotive = this as MSTSDieselLocomotive;
                        if (mstsDieselLocomotive.DieselEngines[0] != null)
                            data = mstsDieselLocomotive.DieselEngines[0].RealRPM;
                        break;
                    }
                case CABViewControlTypes.ORTS_DIESEL_TEMPERATURE:
                    {
                        var mstsDieselLocomotive = this as MSTSDieselLocomotive;
                        if (mstsDieselLocomotive.DieselEngines[0] != null)
                            data = mstsDieselLocomotive.DieselEngines[0].DieselTemperatureDeg;
                        break;
                    }
                case CABViewControlTypes.ORTS_OIL_PRESSURE:
                    {
                        var mstsDieselLocomotive = this as MSTSDieselLocomotive;
                        if (mstsDieselLocomotive.DieselEngines[0] != null)
                            data = ConvertFromPSI(cvc, mstsDieselLocomotive.DieselEngines[0].DieselOilPressurePSI);
                        break;
                    }
                case CABViewControlTypes.THROTTLE:
                case CABViewControlTypes.THROTTLE_DISPLAY:
                case CABViewControlTypes.CPH_DISPLAY:
                    {
                        if (CruiseControl != null)
                            if (CruiseControl.SkipThrottleDisplay) break;
                        if (CruiseControl != null)
                        {
                            if (CruiseControl.UseThrottleAsSpeedSelector && CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                            {
                                data = (MaxSpeedMpS + (CruiseControl.SelectedSpeedMpS - MaxSpeedMpS)) / MaxSpeedMpS;
                                break;
                            }
                        }
                        data = Train.TrainType == Train.TRAINTYPE.AI_PLAYERHOSTING ? ThrottlePercent / 100f : LocalThrottlePercent / 100f;
                        break;
                    }
                case CABViewControlTypes.ENGINE_BRAKE:
                    {
                        data = (EngineBrakeController == null) ? 0.0f : EngineBrakeController.CurrentValue;
                        break;
                    }
                case CABViewControlTypes.TRAIN_BRAKE:
                    {
                        if (CruiseControl != null)
                        {
                            if (CruiseControl.arrIsBraking)
                            {
                                data = previousTrainBrakeData;
                                break;
                            }
                        }
                        data = previousTrainBrakeData = (TrainBrakeController == null) ? 0.0f : TrainBrakeController.CurrentValue;
                        break;
                    }
                case CABViewControlTypes.ORTS_BAILOFF:
                    {
                        data = BailOff ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_QUICKRELEASE:
                    {
                        data = (TrainBrakeController == null || !TrainBrakeController.QuickReleaseButtonPressed) ? 0 : 1;
                        break;
                    }
                case CABViewControlTypes.ORTS_OVERCHARGE:
                    {
                        data = (TrainBrakeController == null || !TrainBrakeController.OverchargeButtonPressed) ? 0 : 1;
                        break;
                    }
                case CABViewControlTypes.FRICTION_BRAKING:
                    {
                        data = (BrakeSystem == null) ? 0.0f : BrakeSystem.GetCylPressurePSI();
                        break;
                    }
                case CABViewControlTypes.DYNAMIC_BRAKE:
                    if (DynamicBrakeIntervention != -1)
                    {
                        data = 0;
                        break;
                    }
                    data = DynamicBrakePercent / 100f;
                    break;

                case CABViewControlTypes.DYNAMIC_BRAKE_DISPLAY:
                    //case CABViewControlTypes.CP_HANDLE:
                    {
                        data = DynamicBrakePercent / 100f;
                        break;
                    }
                case CABViewControlTypes.WIPERS:
                    {
                        data = Wiper ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.VACUUM_EXHAUSTER:
                    {
                        if (FastVacuumExhausterFitted)
                        {
                            data = VacuumExhausterPressed ? 1 : 0;
                        }
                        else
                        {
                            data = 0;
                        }
                        break;
                    }

                case CABViewControlTypes.HORN:
                    {
                        data = Horn ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.BELL:
                    {
                        data = Bell ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.RESET:
                    {
                        if (TrainControlSystem.AlerterButtonPressed)
                            data = 1;
                        else
                            data = 0;
                        break;
                    }

                case CABViewControlTypes.ALERTER_DISPLAY:
                    {
                        if (Simulator.Settings.Alerter)
                        {
                            if (TrainControlSystem.VigilanceEmergency)
                                data = 2;
                            else if (TrainControlSystem.VigilanceAlarm)
                                data = 1;
                            else
                                data = 0;
                        }
                        break;
                    }
                case CABViewControlTypes.OVERSPEED:
                    {
                        data = TrainControlSystem.OverspeedWarning ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.PENALTY_APP:
                    {
                        data = TrainControlSystem.PenaltyApplication ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.EMERGENCY_BRAKE:
                    {
                        data = EmergencyButtonPressed ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.DOORS_DISPLAY:
                    {
                        data = DoorLeftOpen | DoorRightOpen ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.SANDERS:
                    {
                        data = Sander ? 1 : 0;
                        break;
                    }
                // MultStateDisplay entry in CVF file had Type SANDING. W/O the below entry and another entry at line 3625
                // the independant sanding light found in some cabs would not work.
                case CABViewControlTypes.SANDING:
                    {
                        data = Sander ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.CLOCK:
                    {
                        data = 0;
                        break;
                    }

                case CABViewControlTypes.FRONT_HLIGHT:
                    {
                        data = Headlight;
                        break;
                    }
                case CABViewControlTypes.WHEELSLIP:
                    {
                        if (AdvancedAdhesionModel && Train.TrainType != Train.TRAINTYPE.AI_PLAYERHOSTING)
                            data = LocomotiveAxle.IsWheelSlipWarning ? 1 : 0;
                        else
                            data = WheelSlip ? 1 : 0;
                        break;
                    }

                case CABViewControlTypes.DIRECTION:
                case CABViewControlTypes.DIRECTION_DISPLAY:
                    {
                        if (Direction == Direction.Forward)
                            data = 2;
                        else if (Direction == Direction.Reverse)
                            data = 0;
                        else
                            data = 1;
                        break;
                    }
                case CABViewControlTypes.ASPECT_DISPLAY:
                    {
                        switch (TrainControlSystem.CabSignalAspect)
                        {
                            case TrackMonitorSignalAspect.Stop:
                                {
                                    data = 0;
                                    break;
                                }
                            case TrackMonitorSignalAspect.StopAndProceed:
                                {
                                    data = 1;
                                    break;
                                }
                            case TrackMonitorSignalAspect.Restricted:
                                {
                                    data = 2;
                                    break;
                                }
                            case TrackMonitorSignalAspect.Approach_1:
                                {
                                    data = 3;
                                    break;
                                }
                            case TrackMonitorSignalAspect.Approach_2:
                                {
                                    data = 4;
                                    break;
                                }
                            case TrackMonitorSignalAspect.Approach_3:
                                {
                                    data = 5;
                                    break;
                                }
                            case TrackMonitorSignalAspect.Clear_1:
                                {
                                    data = 6;
                                    break;
                                }
                            case TrackMonitorSignalAspect.Clear_2:
                                {
                                    data = 7;
                                    break;
                                }
                            default:
                                {
                                    data = 7;
                                    break;
                                }
                        }
                        break;
                    }
                case CABViewControlTypes.SPEEDLIMIT:
                    {
                        // Displays current allowable speed
                        bool metric = cvc.Units == CABViewControlUnits.KM_PER_HOUR;
                        data = MpS.FromMpS(TrainControlSystem.CurrentSpeedLimitMpS, metric);
                        break;
                    }
                case CABViewControlTypes.SPEEDLIM_DISPLAY:
                    {
                        // Displays allowable speed shown on next signal
                        bool metric = cvc.Units == CABViewControlUnits.KM_PER_HOUR;
                        data = MpS.FromMpS(TrainControlSystem.NextSpeedLimitMpS, metric);
                        break;
                    }
                case CABViewControlTypes.GEARS_DISPLAY:
                    {
                        data = 0;
                        if (this is MSTSDieselLocomotive)
                        {
                            var dieselLoco = this as MSTSDieselLocomotive;
                            if (dieselLoco.DieselEngines.HasGearBox)
                                data = dieselLoco.DieselEngines[0].GearBox.CurrentGearIndex + 1;
                        }
                        break;
                    }
                case CABViewControlTypes.CAB_RADIO:
                    {
                        data = CabRadioOn ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_PLAYER_DIESEL_ENGINE:
                    {
                        data = 0;
                        if (this is MSTSDieselLocomotive)
                        {
                            var dieselLoco = this as MSTSDieselLocomotive;
                            data = (dieselLoco.DieselEngines[0].EngineStatus == DieselEngine.Status.Running ||
                                dieselLoco.DieselEngines[0].EngineStatus == DieselEngine.Status.Starting) ? 1 : 0;
                        }
                        break;
                    }
                case CABViewControlTypes.ORTS_HELPERS_DIESEL_ENGINES:
                    {
                        foreach (var car in Train.Cars)
                        {
                            var dieselLoco = car as MSTSDieselLocomotive;
                            if (dieselLoco != null && dieselLoco.AcceptMUSignals)
                            {
                                if (car == Simulator.PlayerLocomotive && dieselLoco.DieselEngines.Count > 1)
                                {
                                    data = (dieselLoco.DieselEngines[1].EngineStatus == DieselEngine.Status.Running ||
                                        dieselLoco.DieselEngines[1].EngineStatus == DieselEngine.Status.Starting) ? 1 : 0;
                                    break;
                                }
                                else if (car != Simulator.PlayerLocomotive)
                                {
                                    data = (dieselLoco.DieselEngines[0].EngineStatus == DieselEngine.Status.Running ||
                                        dieselLoco.DieselEngines[0].EngineStatus == DieselEngine.Status.Starting) ? 1 : 0;
                                    break;
                                }
                            }
                        }
                        break;
                    }
                case CABViewControlTypes.ORTS_PLAYER_DIESEL_ENGINE_STATE:
                    {
                        data = 0;
                        if (this is MSTSDieselLocomotive)
                        {
                            var dieselLoco = this as MSTSDieselLocomotive;
                            data = (int)dieselLoco.DieselEngines[0].EngineStatus;
                        }
                        break;
                    }
                case CABViewControlTypes.ORTS_PLAYER_DIESEL_ENGINE_STARTER:
                    {
                        data = 0;
                        if (this is MSTSDieselLocomotive)
                        {
                            var dieselLoco = this as MSTSDieselLocomotive;
                            data = dieselLoco.DieselEngines[0].EngineStatus == DieselEngine.Status.Starting ? 1 : 0;
                        }
                        break;
                    }
                case CABViewControlTypes.ORTS_PLAYER_DIESEL_ENGINE_STOPPER:
                    {
                        data = 0;
                        if (this is MSTSDieselLocomotive)
                        {
                            var dieselLoco = this as MSTSDieselLocomotive;
                            data = dieselLoco.DieselEngines[0].EngineStatus == DieselEngine.Status.Stopping ? 1 : 0;
                        }
                        break;
                    }
                case CABViewControlTypes.ORTS_CABLIGHT:
                    data = CabLightOn ? 1 : 0;
                    break;
                case CABViewControlTypes.ORTS_LEFTDOOR:
                    data = GetCabFlipped() ? (DoorRightOpen ? 1 : 0) : DoorLeftOpen ? 1 : 0;
                    break;
                case CABViewControlTypes.ORTS_RIGHTDOOR:
                    data = GetCabFlipped() ? (DoorLeftOpen ? 1 : 0) : DoorRightOpen ? 1 : 0;
                    break;
                case CABViewControlTypes.ORTS_MIRRORS:
                    data = MirrorOpen ? 1 : 0;
                    break;
                case CABViewControlTypes.ORTS_BATTERY:
                    data = Battery ? 1 : 0;
                    break;
                case CABViewControlTypes.ORTS_POWERKEY:
                    data = PowerKey ? 1 : 0;
                    break;
                case CABViewControlTypes.ORTS_2DEXTERNALWIPERS:
                    data = Wiper ? 1 : 0;
                    break;
                case CABViewControlTypes.ORTS_HOURDIAL:
                    float hour = (float)(Simulator.ClockTime / 3600) % 12;
                    if (hour < 0)
                        hour += 12;
                    data = hour;
                    break;
                case CABViewControlTypes.ORTS_MINUTEDIAL:
                    float minute = (float)(Simulator.ClockTime / 60) % 60;
                    if (minute < 0)
                        minute += 60;
                    data = minute;
                    break;
                case CABViewControlTypes.ORTS_SECONDDIAL:
                    int seconds = (int)Simulator.ClockTime % 60;
                    if (seconds < 0)
                        seconds += 60;
                    data = seconds;
                    break;

                // Train Control System controls
                case CABViewControlTypes.ORTS_TCS1:
                case CABViewControlTypes.ORTS_TCS2:
                case CABViewControlTypes.ORTS_TCS3:
                case CABViewControlTypes.ORTS_TCS4:
                case CABViewControlTypes.ORTS_TCS5:
                case CABViewControlTypes.ORTS_TCS6:
                case CABViewControlTypes.ORTS_TCS7:
                case CABViewControlTypes.ORTS_TCS8:
                case CABViewControlTypes.ORTS_TCS9:
                case CABViewControlTypes.ORTS_TCS10:
                case CABViewControlTypes.ORTS_TCS11:
                case CABViewControlTypes.ORTS_TCS12:
                case CABViewControlTypes.ORTS_TCS13:
                case CABViewControlTypes.ORTS_TCS14:
                case CABViewControlTypes.ORTS_TCS15:
                case CABViewControlTypes.ORTS_TCS16:
                case CABViewControlTypes.ORTS_TCS17:
                case CABViewControlTypes.ORTS_TCS18:
                case CABViewControlTypes.ORTS_TCS19:
                case CABViewControlTypes.ORTS_TCS20:
                case CABViewControlTypes.ORTS_TCS21:
                case CABViewControlTypes.ORTS_TCS22:
                case CABViewControlTypes.ORTS_TCS23:
                case CABViewControlTypes.ORTS_TCS24:
                case CABViewControlTypes.ORTS_TCS25:
                case CABViewControlTypes.ORTS_TCS26:
                case CABViewControlTypes.ORTS_TCS27:
                case CABViewControlTypes.ORTS_TCS28:
                case CABViewControlTypes.ORTS_TCS29:
                case CABViewControlTypes.ORTS_TCS30:
                case CABViewControlTypes.ORTS_TCS31:
                case CABViewControlTypes.ORTS_TCS32:
                case CABViewControlTypes.ORTS_TCS33:
                case CABViewControlTypes.ORTS_TCS34:
                case CABViewControlTypes.ORTS_TCS35:
                case CABViewControlTypes.ORTS_TCS36:
                case CABViewControlTypes.ORTS_TCS37:
                case CABViewControlTypes.ORTS_TCS38:
                case CABViewControlTypes.ORTS_TCS39:
                case CABViewControlTypes.ORTS_TCS40:
                case CABViewControlTypes.ORTS_TCS41:
                case CABViewControlTypes.ORTS_TCS42:
                case CABViewControlTypes.ORTS_TCS43:
                case CABViewControlTypes.ORTS_TCS44:
                case CABViewControlTypes.ORTS_TCS45:
                case CABViewControlTypes.ORTS_TCS46:
                case CABViewControlTypes.ORTS_TCS47:
                case CABViewControlTypes.ORTS_TCS48:
                    data = TrainControlSystem.CabDisplayControls[(int)cvc.ControlType - (int)CABViewControlTypes.ORTS_TCS1];
                    break;

                // Jindřich
                case CABViewControlTypes.ORTS_MULTI_POSITION_CONTROLLER:
                    if (MultiPositionControllers != null && data == 0)
                    {
                        foreach (MultiPositionController mpc in MultiPositionControllers)
                        {
                            if (mpc.ControllerId == cvc.ControlId)
                            {
                                data = mpc.GetDataOf(cvc);
                            }
                        }
                    }
                    break;                 
                case CABViewControlTypes.ORTS_AMPERS_BY_CONTROLLER_VOLTAGE:
                    if (extendedPhysics != null)
                    {
                        if (string.IsNullOrEmpty(cvc.CurrentSource))
                        {
                            data = extendedPhysics.TotalCurrent;
                            if (data < 0)
                                data = -data;
                            break;
                        }
                        else if (cvc.CurrentSource.ToLower() == "total")
                        {
                            if (string.IsNullOrEmpty(cvc.CurrentType))
                            {
                                data = extendedPhysics.TotalCurrent;
                                if (data < 0)
                                    data = -data;
                                break;
                            }
                            else if (cvc.CurrentType.ToLower() == "rotor")
                            {
                                data = extendedPhysics.RotorsCurrent;
                                if (data < 0)
                                    data = -data;
                                break;
                            }
                            else if (cvc.CurrentType.ToLower() == "stator")
                            {
                                data = extendedPhysics.StarorsCurrent;
                                if (data < 0)
                                    data = -data;
                                break;
                            }
                        }
                        else if (cvc.CurrentSource.ToLower() == "undercarriage")
                        {
                            if (extendedPhysics.Undercarriages.Count == 0 || cvc.CurrentSourceID == -1)
                            {
                                data = extendedPhysics.TotalCurrent;
                                if (data < 0)
                                    data = -data;
                                break;
                            }
                            else
                            {
                                foreach (Undercarriage uc in extendedPhysics.Undercarriages)
                                {
                                    if (uc.Id == cvc.CurrentSourceID)
                                    {
                                        if (string.IsNullOrEmpty(cvc.CurrentType))
                                        {
                                            data = uc.StatorsCurrent + uc.RotorsCurrent;
                                            if (data < 0)
                                                data = -data;
                                            break;
                                        }
                                        else if (cvc.CurrentType.ToLower() == "stator")
                                        {
                                            data = uc.StatorsCurrent;
                                            if (data < 0)
                                                data = -data;
                                            break;
                                        }
                                        else if (cvc.CurrentType.ToLower() == "rotor")
                                        {
                                            data = uc.RotorsCurrent;
                                            if (data < 0)
                                                data = -data;
                                            break;
                                        }
                                    }
                                }
                            }
                            break;
                        }
                        else if (cvc.CurrentSource.ToLower() == "motor")
                        {
                            foreach (Undercarriage uc in extendedPhysics.Undercarriages)
                            {
                                foreach (ExtendedAxle ea in uc.Axles)
                                {
                                    foreach (ElectricMotor em in ea.ElectricMotors)
                                    {
                                        if (em.Id == cvc.CurrentSourceID)
                                        {
                                            if (string.IsNullOrEmpty(cvc.CurrentType))
                                            {
                                                data = em.RotorCurrent + em.StatorCurrent;
                                                if (data < 0)
                                                    data = -data;
                                                break;
                                            }
                                            else if (cvc.CurrentType.ToLower() == "stator")
                                            {
                                                data = em.StatorCurrent;
                                                if (data < 0)
                                                    data = -data;
                                                break;
                                            }
                                            else if (cvc.CurrentType.ToLower() == "rotor")
                                            {
                                                data = em.RotorCurrent;
                                                if (data < 0)
                                                    data = -data;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }
                    if (CruiseControl != null)
                    {
                        if (CruiseControl.SpeedRegMode == CruiseControl.SpeedRegulatorMode.Auto)
                        {
                            if (CruiseControl.controllerVolts < 0) data = -CruiseControl.controllerVolts / 100 * (MaxCurrentA * 0.8f);
                            else data = CruiseControl.controllerVolts / 100 * (MaxCurrentA * 0.8f);
                            if (data == 0 && DynamicBrakePercent > 0 && AbsSpeedMpS > 0) data = DynamicBrakePercent / 100 * (MaxCurrentA * 0.8f);
                        }
                        else
                        {
                            if (DynamicBrakePercent > 0 && AbsSpeedMpS > 0) data = DynamicBrakePercent / 200 * (MaxCurrentA * 0.8f);
                            else data = ThrottlePercent / 100 * (MaxCurrentA * 1.2f);
                        }
                    }
                    else
                    {
                        if (DynamicBrakePercent > 0 && AbsSpeedMpS > 0) data = DynamicBrakePercent / 200 * (MaxCurrentA * 0.8f);
                        else data = ThrottlePercent / 100 * (MaxCurrentA * 1.2f);
                    }
                    break;

                case CABViewControlTypes.ORTS_SELECTED_SPEED:
                case CABViewControlTypes.ORTS_SELECTED_SPEED_DISPLAY:
                    {
                        if (CruiseControl == null)
                            break;
                        bool jumpOut = false;
                        if (cvc.DisplayID > -1)
                            cvc.BlankDisplay = true;
                        if (StringArray.StArray != null)
                        {
                            foreach (StrArray strArray in StringArray.StArray)
                            {
                                foreach (KeyValuePair<string, int> pair in strArray.Strings)
                                {
                                    int s = strArray.Strings.ElementAt(strArray.SelectedString).Value;
                                    if (s == cvc.DisplayID && s > -1)
                                    {
                                        if (cvc.DisplayID == pair.Value)
                                        {
                                            jumpOut = true;
                                            cvc.BlankDisplay = false;
                                            break;
                                        }
                                    }
                                }
                                if (jumpOut) break;
                            }
                        }
                        float temp = CruiseControl.RestrictedSpeedActive ? MpS.ToKpH(CruiseControl.CurrentSelectedSpeedMpS) : temp = MpS.ToKpH(CruiseControl.SelectedSpeedMpS);
                        if (cvc.ControlStyle == CABViewControlStyles.NEEDLE)
                        {
                            if (previousSelectedSpeed < temp) previousSelectedSpeed += 1f;
                            if (previousSelectedSpeed > temp) previousSelectedSpeed -= 1f;
                            data = previousSelectedSpeed;
                        }
                        else
                            data = temp;

                        if (cvc.Precision > 0)
                        {
                            data = data / cvc.Precision;
                            data = (float)Math.Round(data, 0);
                            data = data * cvc.Precision;
                        }

                        break;
                    }

                case CABViewControlTypes.ORTS_MIREL_SPEED:
                    {
                        float val = (float)Math.Round(Mirel.MirelMaximumSpeed, 0); 
                        val = val - (float)cvc.MinValue;
                        CVCWithFrames cVCWithFrames = (CVCWithFrames)cvc;
                        int frames = cVCWithFrames.FramesCount - 1;
                        double howMany = (cvc.MaxValue - cvc.MinValue) / frames;

                        data = val / (float)howMany;
                        if (Mirel.MaxSpeedSetup && !Mirel.SpeedSetupConfirmed)
                        {
                            data = previousMaxMirelSpeed;
                        }
                        else
                        {
                            previousMaxMirelSpeed = data;
                        }
                        break;
                    }

                case CABViewControlTypes.ORTS_DISPLAY_BLUE_LIGHT:
                    {
                        data = (float)(Mirel.BlueLight ? 0 : 1);
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DRIVE_MODE:
                    {
                        if (Mirel.DriveModeHideModes)
                            data = 0;
                        else
                            data = (float)Mirel.mainMode;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DRIVE_MODE_OPTIONS:
                    {
                        data = (float)Mirel.driveMode;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_FLASH_MASK:
                    {
                        data = Mirel.DisplayFlashMask ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_FULL_DISPLAY:
                    {
                        data = Mirel.FullDisplay ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_NUM_1:
                    {
                        data = Mirel.MirelSpeedNum1;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_NUM_2:
                    {
                        data = Mirel.MirelSpeedNum2;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_NUM_3:
                    {
                        data = Mirel.MirelSpeedNum3;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_D1:
                    {
                        data = Mirel.initTest == Mirel.InitTest.Running ? 0 : 1;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_TEST1:
                    {
                        data = Mirel.Test1 ? 1 : 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed)
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_TEST2:
                    {
                        data = Mirel.Test2 ? 1 : 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed)
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_TEST3:
                    {
                        data = Mirel.Test3 ? 1 : 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed)
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_TEST4:
                    {
                        data = Mirel.Test4 ? 1 : 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed)
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_TEST5:
                    {
                        data = Mirel.Test5 ? 1 : 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed)
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_TEST6:
                    {
                        data = Mirel.Test6 ? 1 : 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed)
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_DISPLAY_TEST7:
                    {
                        data = Mirel.Test7 ? 1 : 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed)
                            data = 0;
                        break;
                    }

                case CABViewControlTypes.ORTS_ACTIVE_CAB:
                    {
                        if (!UsingRearCab && CurrentKeyPosition == KeyPosition.Station1)
                        {
                            data = (int)ActiveStation + 1;
                        }
                        else if (UsingRearCab && CurrentKeyPosition == KeyPosition.Station2)
                        {
                            data = (int)ActiveStation + 1;
                        }
                        else
                        {
                            data = 0;
                        }
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_NZOK:
                    {
                        data = Mirel.NZOK ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_NZ1:
                    {
                        data = Mirel.NZ1 ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_NZ2:
                    {
                        data = Mirel.NZ2 ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_NZ3:
                    {
                        data = Mirel.NZ3 ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_NZ4:
                    {
                        data = Mirel.NZ4 ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_NZ5:
                    {
                        data = Mirel.NZ5 ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_MAN:
                    {
                        data = Mirel.ManualModeDisplay ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_ZAP:
                    {
                        data = Mirel.ZAP ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_VYP:
                    {
                        data = Mirel.VYP ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_TOP_LEFT_DOT:
                    {
                        data = Mirel.ReducedSpeed ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_TRANS_FRQ:
                    {
                        if (Mirel.transmittionSignalFreq == Mirel.TransmittionSignalFreq.None) data = 0;
                        if (Mirel.transmittionSignalFreq == Mirel.TransmittionSignalFreq.Freq50Hz) data = 1;
                        if (Mirel.transmittionSignalFreq == Mirel.TransmittionSignalFreq.Freq75Hz) data = 2;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_M:
                    {
                        data = Mirel.ManualMode ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_MIREL_START_REDUCE_SPEED:
                    {
                        data = Mirel.StartReducingSpeed ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_REPEATER_LIGHTS_MASK:
                    {
                        // data 1 = hide mask and display aspect
                        data = 1;
                        if ((Mirel.selectedDriveMode == Mirel.DriveMode.Normal || Mirel.selectedDriveMode == Mirel.DriveMode.Trailing) && !Mirel.flashFullDisplayInProggress && Mirel.RecievingRepeaterSignal)
                            data = 1;
                        else
                            data = 0;
                        if (Mirel.MirelType != Mirel.Type.Full && (Mirel.Ls90power == Mirel.LS90power.Off || Mirel.Ls90power == Mirel.LS90power.Start))
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.ORTS_STATION:
                    {
                        data = 0;
                        if (Mirel.initTest == Mirel.InitTest.Passed && ActiveStation == DriverStation.None)
                            data = 1;
                        if (Mirel.initTest == Mirel.InitTest.Passed && ActiveStation == DriverStation.Station2 && !UsingRearCab)
                            data = 3;
                        if (Mirel.initTest == Mirel.InitTest.Passed && ActiveStation == DriverStation.Station1 && UsingRearCab)
                            data = 2;
                        break;
                    }

                case CABViewControlTypes.ORTS_LS90_POWER:
                    {
                        data = (float)Mirel.Ls90power;
                        break;
                    }
                case CABViewControlTypes.ORTS_LS90_LED: 
                    {
                        data = (float)Mirel.Ls90led;
                        break;
                    }
                case CABViewControlTypes.ORTS_AVV_SIGNAL:
                    {
                        data = (float)CruiseControl.avvSignal;
                        break;
                    }

                default:
                    if (CruiseControl != null)
                        data = CruiseControl.GetDataOf(cvc);
                    else
                        data = 0;
                    break;

                // Icik                                
                case CABViewControlTypes.PANTOGRAPHS_4:
                case CABViewControlTypes.PANTOGRAPHS_4C:
                case CABViewControlTypes.PANTOGRAPH_4_SWITCH:
                    {
                        Pantograph4 = true;
                        data = Pantograph4Switch;
                        break;
                    }
                case CABViewControlTypes.COMPRESSOR_START:
                    {                        
                        data = 1;
                        cvc.ElapsedTime += elapsedTime;
                        if (CompressorIsOn && cvc.ElapsedTime < cvc.UpdateTime)
                        {
                            data = 0;
                            CompressorBeep++;
                            if (CompressorBeep == 1)
                                SignalEvent(Event.CompressorBeep);                            
                        }
                        if (!CompressorIsOn)
                        {
                            cvc.ElapsedTime = 0;
                            CompressorBeep = 0;
                        }
                        cvc.ElapsedTime2 += elapsedTime;
                        if (Compressor2IsOn && cvc.ElapsedTime2 < cvc.UpdateTime)
                        {
                            data = 0;
                            Compressor2Beep++;
                            if (Compressor2Beep == 1)
                                SignalEvent(Event.CompressorBeep);
                        }
                        if (!Compressor2IsOn)
                        {
                            cvc.ElapsedTime2 = 0;
                            Compressor2Beep = 0;
                        }
                        break;
                    }
                case CABViewControlTypes.COMPRESSOR_COMBINED:
                    {
                        CompressorCombined = true;
                        AuxCompressor = true;
                        Compressor_I = true;
                        data = CompressorSwitch;
                        break;
                    }
                case CABViewControlTypes.COMPRESSOR_COMBINED2:
                    {
                        CompressorCombined2 = true;                        
                        Compressor_II = true;
                        data = CompressorSwitch2;
                        break;
                    }
                case CABViewControlTypes.AUXCOMPRESSOR_MODE_OFFON:
                    {
                        AuxCompressor = true;
                        data = AuxCompressorMode_OffOn ? 1 : 0;                        
                        break;
                    }
                case CABViewControlTypes.COMPRESSOR_MODE_OFFAUTO:
                    {
                        Compressor_I = true;
                        data = CompressorMode_OffAuto ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.COMPRESSOR_MODE2_OFFAUTO:
                    {
                        Compressor_II = true;
                        data = CompressorMode2_OffAuto ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.HEATING_OFFON:
                    {
                        HeatingEnable = true;
                        data = Heating_OffOn ? 1 : 0;
                        break;
                    }
                case CABViewControlTypes.HEATING_POWER:
                    {
                        if (HeatingIsOn)
                            data = 1;
                        else data = 0;
                        break;
                    }                
                case CABViewControlTypes.WARNING_NEUTRAL:
                    {
                        data = 1;                        
                        if (PowerOn && Direction == Direction.N)
                        {
                            data = 0;
                        }                        
                        break;
                    }
                case CABViewControlTypes.QUICK_RELEASE_BUTTON:
                    {
                        QuickReleaseButtonEnable = true;
                        if (QuickReleaseButton)
                            data = 1;
                        else data = 0;                        
                        break;
                    }
                case CABViewControlTypes.LOWPRESSURE_RELEASE_BUTTON:
                    {
                        LowPressureReleaseButtonEnable = true;
                        if (LowPressureReleaseButton)
                            data = 1;
                        else data = 0;
                        break;
                    }
                case CABViewControlTypes.BRAKE_PIPE_FLOW:
                    {
                        if (BrakeSystem.BrakePipeFlow)
                        {
                            data = 1;
                            SignalEvent(Event.BrakePipeFlow);
                        }
                        else data = 0;
                        break;
                    }
                case CABViewControlTypes.BREAK_POWER_BUTTON:
                    {
                        BreakPowerButtonEnable = true;
                        if (BreakPowerButton)
                            data = 1;
                        else data = 0;
                        break;
                    }
                case CABViewControlTypes.HEATING_CURRENT:
                    {                        
                        data = I_HeatingData0;
                        break;
                    }
                case CABViewControlTypes.HEATING_OVERCURRENT:
                    {
                        if (HeatingOverCurrent)
                            data = 1;
                        else
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.CHECK_POWERLOSS:
                    {
                        if (CheckPowerLoss && Battery && PowerKey)
                            data = 1;
                        else
                            data = 0;
                        break;
                    }
                case CABViewControlTypes.DONT_RAISE_PANTO:
                    {
                        if (DontRaisePanto && Battery && PowerKey)
                            data = 1;
                        else
                            data = 0;
                        break;
                    }
            }
            // max needle speed
            if (cvc.MaxNeedleSpeed > 0 && elapsedTime > 0)
            {
                double fullRange = 0;
                if (cvc.MinValueExtendedPhysics != 0 || cvc.MaxValueExtendedPhysics != 0)
                    fullRange = cvc.MaxValueExtendedPhysics - cvc.MinValueExtendedPhysics;
                else
                    fullRange = cvc.MaxValue - cvc.MinValue;
                float step = (float)fullRange / (cvc.MaxNeedleSpeed / elapsedTime);
                if (data - step > cvc.PreviousData)
                {
                    data = cvc.PreviousData + step;
                }
                if (data + step < cvc.PreviousData)
                {
                    data = cvc.PreviousData - step;
                }
                cvc.PreviousData = data;
            }

            return data;
        }

        public virtual string GetDataOfS(CabViewControl crc, ElapsedTime elapsedClockSeconds)
        {
            if (crc.ControlType == CABViewControlTypes.ORTS_MIREL_DISPLAY)
            {
                return Mirel.Display;
            }
            if (crc.ControlType == CABViewControlTypes.ORTS_DIGITAL_STRING)
            {
                if (StringArray.StArray == null)
                {
                    if (String.IsNullOrEmpty(crc.PropertyName))
                        return crc.Label;
                }
                foreach (StrArray strArray in StringArray.StArray)
                {
                    if (strArray.Index == crc.ArrayIndex)
                    {
                        return strArray.Strings.ElementAt(strArray.SelectedString).Key;
                    }
                }
            }
            if (crc.ControlType == CABViewControlTypes.ORTS_DATE)
            {
                return DateTime.Now.Date.ToString(crc.DateFormat);
            }
            string retVal = crc.StringValue;
            if (crc.Length > 0)
            {
                if (retVal.Length > crc.Length) retVal = retVal.Substring(0, crc.Length);
                while (retVal.Length < crc.Length) retVal = retVal + "0";
            }
            return retVal;
        }

        public void CheckBlankDisplay(CabViewControl cvc)
        {
            bool jumpOut = false;
            if (cvc.DisplayID > -1)
                cvc.BlankDisplay = true;
            if (StringArray.StArray == null) return;
            foreach (StrArray strArray in StringArray.StArray)
            {
                foreach (KeyValuePair<string, int> pair in strArray.Strings)
                {
                    int s = strArray.Strings.ElementAt(strArray.SelectedString).Value;
                    if (s == cvc.DisplayID && s > -1)
                    {
                        if (cvc.DisplayID == pair.Value)
                        {
                            jumpOut = true;
                            cvc.BlankDisplay = false;
                            break;
                        }
                    }
                }
                if (jumpOut) break;
            }
        }

        protected static float ConvertFromPSI(CabViewControl cvc, float data)
        {
            if (cvc.Units == CABViewControlUnits.BAR)
                data = Bar.FromPSI(data);
            else if (cvc.Units == CABViewControlUnits.KILOPASCALS)
                data = KPa.FromPSI(data);
            else if (cvc.Units == CABViewControlUnits.KGS_PER_SQUARE_CM)
                data *= 70.307e-3f;
            else if (cvc.Units == CABViewControlUnits.INCHES_OF_MERCURY)
                data = Vac.FromPress(data);
            return data;
        }

        /// <summary>
        /// To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
        /// </summary>
        public virtual void RefillImmediately()
        {
        }

        /// <summary>
        /// To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
        /// </summary>
        public virtual MSTSNotchController GetRefillController(uint type)
        {
            return null;
        }

        /// <summary>
        /// To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
        /// </summary>
        public virtual void SetStepSize(PickupObj matchPickup)
        {
        }

        /// <summary>
        /// To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
        /// </summary>
        public override float GetFilledFraction(uint pickupType)
        {
            return 0f;
        }

        public override void SwitchToPlayerControl()
        {
            base.SwitchToPlayerControl();
            return;
        }

        public override void SwitchToAutopilotControl()
        {
            base.SwitchToAutopilotControl();
            return;
        }

    } // End Class MSTSLocomotive

    public class StringArray
    {
        public List<StrArray> StArray { get; set; }
    }
    public class StrArray
    {
        public Dictionary<string, int> Strings { get; set; }
        public int Index { get; set; }
        public int SelectedString { get; set; }
        public int AffectedDisplayID { get; set; }
    }

    public class CabView
    {
        public CabViewFile CVFFile;
        public List<ViewPoint> ViewPointList;
        public ExtendedCVF ExtendedCVF;
        public CabViewType CabViewType;
        public bool NoseAhead; // if cabview is not in front of engine; used to define how terrain tilts if there is freightanimation

        public CabView(CabViewFile cvfFile, List<ViewPoint> viewPointList, ExtendedCVF extendedCVF, CabViewType cabViewType, bool noseAhead)
        {
            CVFFile = cvfFile;
            ViewPointList = viewPointList;
            ExtendedCVF = extendedCVF;
            CabViewType = cabViewType;
            NoseAhead = noseAhead;
        }
    }

    public class CabView3D : CabView
    {
        public string ShapeFilePath;

        public CabView3D(CabViewFile cvfFile, List<PassengerViewPoint> cabViewpoints, ExtendedCVF extendedCVF, CabViewType cabViewType, bool noseAhead, string shapeFilePath)
            : base(cvfFile, new List<ViewPoint>(), extendedCVF, cabViewType, noseAhead)
        {
            ShapeFilePath = shapeFilePath;
            if (cabViewpoints != null)
                foreach (var point in cabViewpoints)
                    ViewPointList.Add(point);
        }

    }

    /// <summary>
    /// Extended CVF data, currently used for CAB light
    /// By GeorgeS
    /// </summary>
    [ORTSPhysicsFile("lit", "ORTSExtendedCVF")]
    public class ExtendedCVF
    {
        /// <summary>
        /// Translate to current screen resolution
        /// </summary>
        /// <param name="displaySize">Current screen resolution</param>
        /// <returns>Translated vectors</returns>
        public static Vector4 TranslatedPosition(Vector4 Position, Point displaySize)
        {
            return new Vector4(Position.X / 640 * displaySize.X,
                Position.Y / 480 * displaySize.Y,
                Position.Z / 640 * displaySize.X,
                Position.W);
        }

        /// <summary>
        /// Used by the shader
        /// </summary>
        public static Vector3 TranslatedColor(Color Color)
        {
            return new Vector3((float)Color.R / 255, (float)Color.G / 255, (float)Color.B / 255);
        }

        [ORTSPhysics("First light Position", "Light1Position", "The position and aspect of the first cab light", "320 360 155 2")]
        public Vector4 Light1Position;

        [ORTSPhysics("First light ARGB", "Light1ColorARGB", "The color of the first cab light", "255 216 178 255")]
        public Color Light1Color;

        [ORTSPhysics("Second light Position", "Light2Position", "The position and aspect of the first cab light", "0 0 0 0")]
        public Vector4 Light2Position;

        [ORTSPhysics("Second light ARGB", "Light2ColorARGB", "The color of the second cab light", "0 0 0")]
        public Color Light2Color;

    } // End Class ExtendedCVF 
}
